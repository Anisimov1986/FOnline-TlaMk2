
#include "_npc_pids.fos"

#define SOURCE_PID_CRITTER          # (pid) ( 0 - pid )
#define SOURCE_BODY_TYPE_CRITTER    # (bt) ( 100000 + bt )

uint[] IgnoredProtoMap =
{};

int[][][] ToolsSettings =
{
    {
        // Axe
        { PID_AXE },                                                                                                                                           // Пиды инструментов
        { 0 },                                                                                                                                                 // Анимация проигрываемая при попытке собрать ресурсы
        { 0 },                                                                                                                                                 // Анимация проигрываемая при попытке собрать ресурсы
        { 13858, 14086, 14087, 14088, 14089, 14090, 14091, 14701, 14702, 14703, 15641, 15642, 15643, 15644, 15645, 15646, 15647, 15648, 15649, 15650, 15651 }, // Пиды источников ресурсов
        { 5 },                                                                                                                                                 // Количество предметов в одном обхекте Scenery (0 - значение по умолчанию)
        { PID_FIREWOOD, PID_SHARPENED_POLE,      PID_FIREWOOD_MK2 },                                                                                           // Пиды возможных ресурсов
        { 1,            1,       1 },                                                                                                                          // минимальное количество получаемых ресурсов
        { 1,            1,       1 },                                                                                                                          // максимальное количество получаемых ресурсов
        { 80,           80,      80 },                                                                                                                         // Шансы получения того или иного вида ресурсов (шансы проверяются по порядку)
        { -1 },                                                                                                                                                // Парам требуемый для добычи ресурса
        { 0 },                                                                                                                                                 // Значение перка требуемое для добычи ресурса

    },
    {
        // Sledgehammer
        { PID_SLEDGEHAMMER, PID_SUPER_SLEDGE },
        { ANIM1_HAMMER,     ANIM1_HAMMER },
        { ANIM2_SWING_1H,   ANIM2_SWING_1H },
        { 13865, 13866, 13869, 13870, 13879, 13880, 14182, 14183, 14184, 14185, 14189, 15283, 15619, 15620 },
        { 20 },
        { PID_FLINT, PID_ROCK, PID_MINERAL, PID_MINERAL_MK2 },
        { 1,                       1,        1,           1 },
        { 1,                       3,        1,           1 },
        { 10,             80,       50,          40 },
        { -1 },
        { 0 },
    },
    {
        // Sledgehammer
        { PID_SLEDGEHAMMER, PID_SUPER_SLEDGE },
        { ANIM1_HAMMER,     ANIM1_HAMMER },
        { ANIM2_SWING_1H,   ANIM2_SWING_1H },
        { 13860, 13861, 13863, 13864, 13868, 13871, 13877, 13878, 15008 },
        { 20 },
        { PID_ROCK, PID_MINERAL, PID_METAL_ORE, PID_MINERAL_MK2, PID_METAL_ORE_MK2 },
        { 1,        1,           1,        1,           1 },
        { 3,        2,           1,        1,           1 },
        { 60,       40,          70,       50,          80 },
        { -1 },
        { 0 },
    },
    {
        // Multi tool
        { PID_MULTI_TOOL },
        { 0 },
        { 0 },
        { 13893, 13905, 14026, 14027, 14028, 14029, 14030, 15677, 15678 },
        { 5 },
        { PID_METAL_TRASH, PID_PUMP_PARTS, PID_METAL_TRASH_MK2, PID_PUMP_PARTS_MK2 },
        { 1,               1,               1,                      1 },
        { 2,               2,               1,                       1 },
        { 60,              80,               40,                60 },
        { -1 },
        { 0 },
    },
    {
        // Multi tool
        { PID_MULTI_TOOL },
        { 0 },
        { 0 },
        { 13886, 13887, 13984, 13985, 13986, 13987, 14077, 14078, 14079, 14080, 14081, 14084 },
        { 1 },
        { PID_TUBE,      PID_TUBE_MK2 },
        { 1,     1 },
        { 1,     1 },
        { 60,    12 },
        { -1 },
        { 0 },
    },
    {
        // Super Tool Kit
        { PID_SUPER_TOOL_KIT },
        { 0 },
        { 0 },
        { 14550, 14551, 14552, 14553, 14562, 14563, 14564, 14565, 14566, 14567, 14568, 14576, 14577, 14578, 14579, 14580, 14581, 14582, 14583 },
        { 5 },
        { PID_V15_COMPUTER_PART, PID_ELECTRONIC_WASTE, PID_V15_COMPUTER_PART_MK2, PID_ELECTRONIC_WASTE_MK2 },
        { 1,               1,               1,               1 },
        { 1,               1,               1,               1 },
        { 50,              70,              35,              40 },
        { -1 },
        { 0 },
    },
    {
        // Knives
        { PID_KNIFE, PID_COMBAT_KNIFE },
        { ANIM1_KNIFE, ANIM1_KNIFE },
        { ANIM2_SWING_1H, ANIM2_SWING_1H },
        { 14125, 14126, 14127, 14710, 14711, 14712, 14713, 14714, 14715, 15607 },
        { 1 },
        { PID_MUTATED_FRUIT, PID_MUTATED_FRUIT_MK2 },
        { 1, 1 },
        { 1, 1 },
        { 98, 100 },
        { -1 },
        { 0 },
    },
    {
        // Sledgehammer
        { PID_SLEDGEHAMMER, PID_SUPER_SLEDGE },
        { ANIM1_HAMMER,     ANIM1_HAMMER },
        { ANIM2_SWING_1H,   ANIM2_SWING_1H },
        { 15875, 15876, 15877, 15878, 15879, 15880, 15881, 15882 },
        { 20 },
        { PID_ROCK, PID_URANIUM_ORE },
        { 1,              1 },
        { 3,              1 },
        { 70,             80 },
        { -1 },
        { 0 },
    },
    {
        // Монтировка
        { PID_CROWBAR },
        { ANIM1_CLUB },
        { ANIM2_SWING_1H },
        { 13894, 13896, 13904, 13994, 13995, 13996, 13997, 14031, 14035, 14036, 14037, 14038, 14039, 14040, 14045, 14046, 14082, 14083, 14085, 15679, 15680, 15686 },
        { 3 },
        { PID_BOTTLE_GLASS, PID_BOTTLE_EMPTY, PID_PUMP_PARTS, PID_PUMP_PARTS_MK2 },
        { 1,                                     1,                                      1,                                      1 },
        { 1,                                     1,                                      2,                                      1 },
        { 35,                                    50,                                     60,                                     20 },
        { -1 },
        { 0 },
    },
    {
        // Knives
        { PID_KNIFE, PID_COMBAT_KNIFE },
        { ANIM1_KNIFE, ANIM1_KNIFE },
        { ANIM2_SWING_1H, ANIM2_SWING_1H },
        { 13980, 13981, 13982, 13983, 13984, 13985, 13986, 13987, 14003, 14004, 14005, 14006, 14007, 14041, 14042, 14047 },
        { 5 },
        { PID_POCKET_LINT, PID_RAGS, PID_RAGS_MK2 },
        { 1, 1, 1 },
        { 2, 2, 1 },
        { 50, 94, 100 },
        { -1 },
        { 0 },
    },

    {
        // Multi tool
        { PID_MULTI_TOOL },
        { 0 },
        { 0 },
        { 13903 },
        { 2 },
        { PID_STEEL },
        { 1 },
        { 1 },
        { 60 },
        { -1 },
        { 0 },
    },

    {
        // PID_CHEMICALS
        { PID_BOTTLE_GLASS },
        { 0 },
        { 0 },
        { 14318, 14364, 14365, 14366, 14726, 14727, 14728, 14729 },
        { 2 },
        { PID_CHEMICALS },
        { 1 },
        { 1 },
        { 60 },
        { -1 },
        { 0 },
    },

    {
        // PID_BOTTLE_EMPTY
        { PID_BOTTLE_EMPTY },
        { 0 },
        { 0 },
        { 14201, 14734, 15661, 15662 },
        { 15 },
        { PID_BOTTLE_FULL },
        { 1 },
        { 1 },
        { 60 },
        { -1 },
        { 0 },
    },
    {
        // Multi tool
        { PID_BOTTLE_EMPTY },
        { 0 },
        { 0 },
        { 4450 },
        { 1 },
        { PID_BOTTLE_AMMIAK },
        { 0 },
        { 0 },
        { 100 },
        { -1 },
        { 0 },
    },
    {
        // Gribi
        { PID_KNIFE, PID_COMBAT_KNIFE },
        { ANIM1_KNIFE, ANIM1_KNIFE },
        { ANIM2_SWING_1H, ANIM2_SWING_1H },
        { 16017, 16018, 16019 },
        { 3 },
        { PID_MUSHROOM1, PID_MUSHROOM2, PID_MUSHROOM3 },
        { 1, 1, 1 },
        { 1, 1, 1 },
        { 60, 50, 100 },
        { -1 },
        { 0 },
    },
    {
        // Knives GlodenGecko
        { PID_KNIFE, PID_COMBAT_KNIFE, PID_LIL_JESUS_WEAPON, PID_SHIV, PID_SWITCHBLADE, PID_WAKIZASHI_BLADE, PID_ELI_KNIFE, PID_THROWING_KNIFE },
        { ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE },
        { ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H },
        { SOURCE_PID_CRITTER( NPC_PID_GoldenGecko ), SOURCE_PID_CRITTER( NPC_PID_ToughGoldenGecko ) },
        { 1 },
        { PID_GOLDEN_GECKO_PELT, PID_GOLDEN_GECKO_PELT_MK2 },
        { 1, 1 },
        { 1, 1 },
        { 92, 100 },
        { PE_GECKO_SKINNING, PE_HUNTER },
        { 1, 1 },
    },
    {
        // Knives SilverGecko
        { PID_KNIFE, PID_COMBAT_KNIFE, PID_LIL_JESUS_WEAPON, PID_SHIV, PID_SWITCHBLADE, PID_WAKIZASHI_BLADE, PID_ELI_KNIFE, PID_THROWING_KNIFE },
        { ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE },
        { ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H },
        { SOURCE_PID_CRITTER( NPC_PID_SmallSilverGecko ), SOURCE_PID_CRITTER( NPC_PID_ToughSilverGecko ) },
        { 1 },
        { PID_GECKO_PELT, PID_GECKO_PELT_MK2 },
        { 1, 1 },
        { 1, 1 },
        { 92, 100 },
        { PE_GECKO_SKINNING, PE_HUNTER },
        { 1, 1 },
    },
    {
        // Knives FireGecko
        { PID_KNIFE, PID_COMBAT_KNIFE, PID_LIL_JESUS_WEAPON, PID_SHIV, PID_SWITCHBLADE, PID_WAKIZASHI_BLADE, PID_ELI_KNIFE, PID_THROWING_KNIFE },
        { ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE },
        { ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H },
        { SOURCE_PID_CRITTER( NPC_PID_FireGecko ), SOURCE_PID_CRITTER( NPC_PID_ToughFireGecko ) },
        { 1 },
        { PID_FIRE_GECKO_PELT, PID_FIRE_GECKO_PELT_MK2 },
        { 1, 1 },
        { 1, 1 },
        { 92, 100 },
        { PE_GECKO_SKINNING, PE_HUNTER },
        { 2, 1 },
    },
    {
        // Knives Rat
        { PID_KNIFE, PID_COMBAT_KNIFE, PID_LIL_JESUS_WEAPON, PID_SHIV, PID_SWITCHBLADE, PID_WAKIZASHI_BLADE, PID_ELI_KNIFE, PID_THROWING_KNIFE },
        { ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE },
        { ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H },
        { SOURCE_PID_CRITTER( NPC_PID_Rat ) },
        { 1 },
        { PID_MOUSE_SKIN },
        { 1 },
        { 1 },
        { 100 },
        { PE_GECKO_SKINNING, PE_HUNTER },
        { 1, 1 },
    },
    {
        // Knives Radscorpion
        { PID_KNIFE, PID_COMBAT_KNIFE, PID_LIL_JESUS_WEAPON, PID_SHIV, PID_SWITCHBLADE, PID_WAKIZASHI_BLADE, PID_ELI_KNIFE, PID_THROWING_KNIFE },
        { ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE },
        { ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H },
        { SOURCE_PID_CRITTER( NPC_PID_SmallRadscorpion ), SOURCE_PID_CRITTER( NPC_PID_SmallRadscorpion2 ), SOURCE_PID_CRITTER( NPC_PID_LargeRadscorpion ), SOURCE_PID_CRITTER( NPC_PID_LargeRadscorpion2 ), SOURCE_PID_CRITTER( NPC_PID_LargeRadscorpion3 ) },
        { 1 },
        { PID_SCORPION_TAIL },
        { 1 },
        { 1 },
        { 100 },
        {},
        {},
    },
    {
        // Knives Brahmin
        { PID_KNIFE, PID_COMBAT_KNIFE, PID_LIL_JESUS_WEAPON, PID_SHIV, PID_SWITCHBLADE, PID_WAKIZASHI_BLADE, PID_ELI_KNIFE, PID_THROWING_KNIFE },
        { ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE },
        { ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H },
        { SOURCE_BODY_TYPE_CRITTER( BT_BRAHMIN ) },
        { 1 },
        { PID_MEAT },
        { 1 },
        { 3 },
        { 100 },
        { SK_OUTDOORSMAN },
        { 25 },
    },
    {
        // PID_SUPER_TOOL_KIT sentry bot
        { PID_SUPER_TOOL_KIT },
        { 0 },
        { 0 },
        { SOURCE_PID_CRITTER( NPC_PID_SENTRY_BOT_1 ), SOURCE_PID_CRITTER( NPC_PID_SENTRY_BOT_2 ) },
        { 1 },
        { PID_ROBOT_PARTS },
        { 1 },
        { 1 },
        { 20 },
        { SK_SCIENCE },
        { 135 },
    },
    {
        // PID_SUPER_TOOL_KIT robomid
        { PID_SUPER_TOOL_KIT },
        { 0 },
        { 0 },
        { SOURCE_PID_CRITTER( NPC_PID_ROBOMIND ) },
        { 1 },
        { PID_ROBOT_MOTIVATOR },
        { 1 },
        { 1 },
        { 15 },
        { SK_SCIENCE },
        { 100 },
    },
    {
        // Knives Mirelurk
        { PID_KNIFE, PID_COMBAT_KNIFE, PID_LIL_JESUS_WEAPON, PID_SHIV, PID_SWITCHBLADE, PID_WAKIZASHI_BLADE, PID_ELI_KNIFE, PID_THROWING_KNIFE },
        { ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE },
        { ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H },
        { SOURCE_PID_CRITTER( NPC_PID_MirelurkWeak ), SOURCE_PID_CRITTER( NPC_PID_MirelurkDeadly ), SOURCE_PID_CRITTER( NPC_PID_MirelurkTough ) },
        { 1 },
        { PID_RADSCORPION_PARTS },
        { 1 },
        { 1 },
        { 10 },
        {},
        {},
    },
    {
        // Mantis
        { PID_COMBAT_KNIFE, PID_LIL_JESUS_WEAPON },
        { ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE },
        { ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H },
        { SOURCE_BODY_TYPE_CRITTER( BT_MANTI ) },
        { 1 },
        { PID_MANTIS_CHITIN, PID_MANTIS_CHITIN_MK2 },
        { 1, 1 },
        { 1, 1 },
        { 92, 100 },
        { SK_OUTDOORSMAN },
        { 90 },
    },
    {
        // Wasp
        { PID_COMBAT_KNIFE, PID_LIL_JESUS_WEAPON },
        { ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE, ANIM1_KNIFE },
        { ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H, ANIM2_SWING_1H },
        { SOURCE_BODY_TYPE_CRITTER( BT_WASP ) },
        { 1 },
        { PID_WASP_STING },
        { 1 },
        { 1 },
        { 100 },
        { SK_OUTDOORSMAN },
        { 75 },
    }
};
CTool[] Tools;

class CStarter
{
    CStarter()
    {
        for( uint i = 0, iMax = ToolsSettings.length(); i < iMax; i++ )
        {
            uint   k = 0;
            Tools.resize( Tools.length() + 1 );
            CTool@ tool = Tools[ Tools.length() - 1 ];
            tool.ToolPids = ToolsSettings[ i ][ k++ ];
            tool.Anim1 = ToolsSettings[ i ][ k++ ];
            tool.Anim2 = ToolsSettings[ i ][ k++ ];
            tool.SourcePids = ToolsSettings[ i ][ k++ ];
            tool.SourceCount = ToolsSettings[ i ][ k++ ];
            tool.NewItemsPids = ToolsSettings[ i ][ k++ ];
            tool.MinCount = ToolsSettings[ i ][ k++ ];
            tool.MaxCount = ToolsSettings[ i ][ k++ ];
            tool.NewItemsChances = ToolsSettings[ i ][ k++ ];
            tool.Param = ToolsSettings[ i ][ k++ ];
            tool.ParamValue = ToolsSettings[ i ][ k++ ];
            #ifndef __CLIENT
            tool.CallbackDemand.resize( tool.ToolPids.length() );
            tool.CallbackResult.resize( tool.NewItemsPids.length() );
            tool.CallbackSetTimeouts.resize( tool.ToolPids.length() );
            tool.CallbackAddExp.resize( tool.NewItemsPids.length() );
            tool.SetCallbackDemand( defTool )
            .SetCallbackResult( defTool )
            .SetCallbackGetTimeouts( defTool )
            .SetCallbackSetTimeouts( defTool )
            .SetCallbackAddExp( defTool );
            #endif
        }
        #ifndef __CLIENT
        SetToolsExt();
        #endif
    }
}
CStarter starter;

#ifndef __CLIENT
interface IResourceDemand {
    bool OnDemand( Critter& master, int toolPid );
}
interface IResourceResult {
    uint OnResult( Critter& master, Item@ onItem, Scenery@ onScenery, int toolPid, uint count, int newItemsPid );
}
interface IResourceGetTimeouts {
    bool OnGetTimeouts( Critter& master, int toolPid );
}
interface IResourceSetTimeouts {
    void OnSetTimeouts( Critter& master, int toolPid, uint count, int newItemsPid );
}
interface IResourceAddExp {
    void OnAddExp( Critter& master, int toolPid, uint count, int newItemsPid );
}
#endif

class CTool
{
    int[] ToolPids;
    int[] SourcePids;
    int[] SourceCount;
    int[] NewItemsPids;
    int[] NewItemsChances;
    int[] Anim1;
    int[] Anim2;
    int[] MinCount;
    int[] MaxCount;
    int[] Param;
    int[] ParamValue;
    #ifndef __CLIENT
    IResourceDemand@[] CallbackDemand;
    IResourceResult@[] CallbackResult;
    IResourceGetTimeouts@ CallbackGetTimeouts;
    IResourceSetTimeouts@[] CallbackSetTimeouts;
    IResourceAddExp@[] CallbackAddExp;
    CTool@ SetCallbackDemand( IResourceDemand@ callback )
    {
        for( uint i = 0, iMax = ToolPids.length(); i < iMax; i++ )
        {
            @CallbackDemand[ i ] = callback;
        }
        return this;
    }
    CTool@ SetCallbackResult( IResourceResult@ callback )
    {
        for( uint i = 0, iMax = NewItemsPids.length(); i < iMax; i++ )
        {
            @CallbackResult[ i ] = callback;
        }
        return this;
    }
    CTool@ SetCallbackDemand( IResourceDemand@ callback, int toolPid )
    {
        int toolIdx = GetToolIdx( toolPid );
        if( toolIdx != -1 )
        {
            @CallbackDemand[ toolIdx ] = callback;
        }
        else
        {
            LogEx( "Tool with pid №" + toolPid + " not found in group" );
        }
        return this;
    }
    CTool@ SetCallbackResult( IResourceResult@ callback, int newItemPid )
    {
        int16 newItemIdx = GetNewItemIdx( newItemPid );
        if( newItemIdx != -1 )
        {
            @CallbackResult[ newItemIdx ] = callback;
        }
        else
        {
            LogEx( "New item with pid №" + newItemPid + " not found in group" );
        }
        return this;
    }
    CTool@ SetCallbackGetTimeouts( IResourceGetTimeouts@ callback )
    {
        @CallbackGetTimeouts = callback;
        return this;
    }
    CTool@ SetCallbackSetTimeouts( IResourceSetTimeouts@ callback )
    {
        for( uint i = 0, iMax = ToolPids.length(); i < iMax; i++ )
        {
            @CallbackSetTimeouts[ i ] = callback;
        }
        return this;
    }
    CTool@ SetCallbackSetTimeouts( IResourceSetTimeouts@ callback, int toolPid )
    {
        int toolIdx = GetToolIdx( toolPid );
        if( toolIdx != -1 )
        {
            @CallbackSetTimeouts[ toolIdx ] = callback;
        }
        else
        {
            LogEx( "Tool with pid №" + toolPid + " not found in group" );
        }
        return this;
    }
    CTool@ SetCallbackAddExp( IResourceAddExp@ callback )
    {
        for( uint i = 0, iMax = NewItemsPids.length(); i < iMax; i++ )
        {
            @CallbackAddExp[ i ] = callback;
        }
        return this;
    }
    CTool@ SetCallbackAddExp( IResourceAddExp@ callback, int newItemPid )
    {
        int16 newItemIdx = GetNewItemIdx( newItemPid );
        if( newItemIdx != -1 )
        {
            @CallbackAddExp[ newItemIdx ] = callback;
        }
        else
        {
            LogEx( "New item with pid №" + newItemPid + " not found in group" );
        }
        return this;
    }
    int16 GetNewItemIdx( Critter& player, int16 toolIdx )
    {
        bool demand = true;
        if( not ( CallbackDemand[ toolIdx ] is null ) )
        {
            demand = CallbackDemand[ toolIdx ].OnDemand( player, ToolPids[ toolIdx ] );
        }
        if( demand )
        {
            for( uint i = 0, iMax = NewItemsChances.length(); i < iMax; i++ )
            {
                if( Random( 0, 99 ) < NewItemsChances[ i ] )
                {
                    return i;
                }
                else
                {
                    continue;
                }
            }
        }
        return -1;
    }
    int16 GetNewItemIdx( int pid )
    {
        LogEx( "NewItemsPids count: " + NewItemsPids.length() );
        for( uint i = 0, iMax = NewItemsPids.length(); i < iMax; i++ )
        {
            LogEx( "NewItemsPids" + i + ": " + NewItemsPids[ i ] );
            if( NewItemsPids[ i ] == pid )
            {
                return i;
            }
        }
        return -1;
    }
    int GetToolIdx( int pid )
    {
        for( uint i = 0, iMax = ToolPids.length(); i < iMax; i++ )
        {
            if( ToolPids[ i ] == pid )
            {
                return i;
            }
        }
        return -1;
    }
    #endif
}

CTool@ GetTool( int pid, int source, int bt )
{
    // LogEx("ToolsGroup count: "+Tools.length());
    for( uint i = 0, iMax = Tools.length(); i < iMax; i++ )
    {
        for( int16 k = 0, kMax = int( Tools[ i ].ToolPids.length() ); k < kMax; k++ )
        {
            if( Tools[ i ].ToolPids[ k ] == pid )
            {
                for( int16 l = 0, lMax = int( Tools[ i ].SourcePids.length() ); l < lMax; l++ )
                {
                    if( Tools[ i ].SourcePids[ l ] == source || ( Tools[ i ].SourcePids[ l ] < 0 && 0 - Tools[ i ].SourcePids[ l ] == source ) || ( bt >= 0 && ( bt + 100000 ) == Tools[ i ].SourcePids[ l ] ) )
                    {
                        return Tools[ i ];
                    }
                }
                break;
            }
        }
    }
    return null;
}
