#include "_client_defines.fos"
#include "client_gui_h.fos"
#include "_colors.fos"
#include "_macros.fos"
#include "auction_h.fos"
#include "client_grid.fos"
#include "client_picbox_h.fos"
#include "client_scrollable_label.fos"
#include "client_radiobutton_h.fos"
#include "client_page_navigator.fos"

import string@ GetTimeString( const string& format, uint fullSecond ) from "time";

// Окно покупки лотов для аукциона
class AuctionBuyScreen : IGUI::ScreenCallbackShow,
      IGUI::ScreenCallbackHide,
      IGridCellCallback,
      IGUI::ElementCallbackMouseClick,
      IRadioButtonCheckedChangedCallback,
      IPageNavigatorCallback,
      IGridColumnSortedCallback
{

    AuctionBuyScreen( int screen )
    {
        ScreenIndex = screen;
    }

    IGUIScreenOpt@             ScreenOptions;
    int                        ScreenIndex;       // Код окна(дисплея)
    GridTable                  @Grid;             // Грид с лотами
    ItemPictureBox@            PicBox;            // Контрол для отображения картинки предмета
    ScrollableLabel@           Label;             // Контрол для отображения описания предмета
    AuctionBuyPriceLabel@      PriceLabel;        // Ярлык для отображения цены выбранного предмета
    AuctionSearchValueTextBox@ TextBox;           // Поле ввода текста для поиска по наименованию
    string                     LastSearchedValue; // Последняя строка поиска, использованная в фильтре по наименованию

    int                        TypeFilterFlags;   // Фильтры по типам предметов
    int                        LastSelectedLot;   // Индекс последнего выбранного лота
    int                        PageCurrent;       // Номер текущей страницы
    int                        TotalPages;        // Суммарное количество страниц лотов для навигатора. На клиента грузятся данные только для одной страницы. Число лотов на странице см. auction_h.fos - AUCTION_BUY_PAGESIZE
    int                        SortFlag;          // Колонка и направление сортировки

    PageNavigator@             Navigator;         // Навигатор для перемещения по страницам лотов

    // Обработка выбора строки в гриде, реакция на выбор в окне просмотра предмета, описания и выбор цены
    // TODO: убрать окно с ценой, заменить текстбоксом поиска значений
    void OnCellSelected( uint rowIndex )
    {
        LastSelectedLot = rowIndex + Grid.FirstVisibleRow;
        if( LastSelectedLot < 0 || LastSelectedLot >= int( AvailableLots.length() ) )
            return;
        if( valid( PicBox ) )
        {
            PicBox.ChangePid( AvailableLots[ LastSelectedLot ].ItemPid );
        }
        if( valid( Label ) )
        {
            Label.SetText( AvailableLots[ LastSelectedLot ].GetItemDescription() );
        }
        if( valid( PriceLabel ) )
        {
            PriceLabel.ChangeValue( AvailableLots[ LastSelectedLot ].Cost );
        }
    }

    // Сортировка колонки
    void OnColumnSort( uint sortedValue, bool descending )
    {
        if( sortedValue > 0 )
        {
            SortFlag = sortedValue;
            if( descending )
                SortFlag *= 10;
            GetNewData();
        }
        else
        {
            SortFlag = 0;
        }

    }

    // Нажатие кнопки покупки. Обращается сюда из AuctionBuyButton::OnMouseClick
    void OnBuyButtonClick()
    {
        if( !valid( GetChosen() ) || LastSelectedLot < 0 || LastSelectedLot >= int( AvailableLots.length() ) )
        {
            Message( GetMsgStr( TEXTMSG_TEXT, STR_LOT_NOT_SELECTED ) );
            return;
        }
        LotInfo@ lot = AvailableLots[ LastSelectedLot ];
        if( valid( lot ) && lot.PlayerId == GetChosen().Id )
        {
            Label.SetText( GetMsgStr( TEXTMSG_TEXT, STR_BUY_SAME_PLAYER ) );
            return;
        }
        if( AuctionBuyLot( lot ) )
        {
            AvailableLots.removeAt( LastSelectedLot );
            Refresh();
            Label.SetText( lot.GetItemName() + " was bought for " + lot.Cost + ". The item is available in your deposit box in the nearest bank." );
        }
    }

    // Нажатие кнопки "Отмена лота"
    void OnCancelButtonClick()
    {
        if( LastSelectedLot < 0 || LastSelectedLot >= int( AvailableLots.length() ) )
        {
            Message( GetMsgStr( TEXTMSG_TEXT, STR_LOT_NOT_SELECTED ) );
            return;
        }
        LotInfo@ lot = AvailableLots[ LastSelectedLot ];
        if( AuctionCancelLot( lot ) )
        {
            AvailableLots.removeAt( LastSelectedLot );
            Refresh();
            Label.SetText( FormatTags( GetMsgStr( TEXTMSG_TEXT, STR_LOT_CANCELED ), "$itemName" + lot.GetItemName() ) );
        }
    }

    // Установка значений по умолчанию и флагов фильтров при открытии окна
    void OnShow( int totalRows, int p1, int p2 )
    {
        @ScreenOptions = GUI_GetScreenOptions();
        Grid.TotalRows = totalRows;
        TypeFilterFlags = 0;
        SETFLAG( TypeFilterFlags, ATF_WEAPON );
        SETFLAG( TypeFilterFlags, ATF_ARMOUR );
        SETFLAG( TypeFilterFlags, ATF_AMMO );
        SETFLAG( TypeFilterFlags, ATF_DRUGS );
        SETFLAG( TypeFilterFlags, ATF_MISC );
        LastSelectedLot = -1;
        PageCurrent = 0;
        Grid.FirstVisibleRow = 0;
        PicBox.ChangePid( 0 );
        Label.SetText( "" );
        Grid.Refresh();
        if( valid( TextBox ) )
            TextBox.Reset();
        LastSearchedValue = "";
        SortFlag = 0;
        if( valid( Navigator ) )
            Navigator.Refresh();
    }

    // Массив исходных значений очищается при закрытии окна
    void OnHide( int p0, int p1, int p2 )
    {
        AvailableLots.resize( 0 );
        Grid.LastSelectedRow = -1;
    }

    // Обработка нажатия на кнопку "Done"
    void OnMouseClick( int click )
    {
        if( click == MOUSE_CLICK_LEFT )
            ::HideScreen( 0, 0, 0, 0 );
    }

    // Обработка обращения ячеек грида за значениями
    void OnCellValueNeeded( uint row, uint column, string& text )
    {
        if( !valid( GetChosen() ) )
            return;
        if( int(row) < AvailableLots.length()  + Grid.FirstVisibleRow )
        {
            switch( column )
            {
            case 0:
                text = AvailableLots[ row + Grid.FirstVisibleRow ].GetItemName();
                break;
            case 1:
                text = AvailableLots[ row + Grid.FirstVisibleRow ].PlayerName;
                if( GetChosen().Id == AvailableLots[ row + Grid.FirstVisibleRow ].PlayerId )
                    text = "|0xFFFF8000 " + text;                              // В своих лотах имя продавца выделяется оранжевым цветом
                break;
            case 2:
                text = AvailableLots[ row + Grid.FirstVisibleRow ].LotSize;
                break;
            case 3:
                text = AvailableLots[ row + Grid.FirstVisibleRow ].Cost;
                break;
            case 4:
                text = "" + GetTimeString( "%DAY%/%MONTH%/%YEAR%", uint( AvailableLots[ row + Grid.FirstVisibleRow ].TimeToCancel ) );
                break;
            default:
                text = "ERROR";
                //
            }
        }
        else
        {
            text = "";
        }
    }

    // Обработка нажатия фильтров по типам предметов
    void OnCheckedChanged( int value, bool checked )
    {
        if( checked && !FLAG( TypeFilterFlags, value ) )
            SETFLAG( TypeFilterFlags, value );
        if( !checked && FLAG( TypeFilterFlags, value ) )
            UNSETFLAG( TypeFilterFlags, value );
    }

    // Изменение страницы в навигаторе
    // Нумерация страниц в навигаторе начинается с единицы, отличается от сохраненных значений в окне, поэтому добавлено -1
    void OnPageChanged( int newPage )
    {
        if( PageCurrent != newPage - 1 )
        {
            PageCurrent = newPage - 1;
            GetNewData();
        }
    }

    // Обращение навигатора за номером текущей страницы и общим числом страниц
    void GetPages( int& maxPages, int& currentPage )
    {
        maxPages = TotalPages;
        currentPage = PageCurrent + 1;
    }

    // Основная функция загрузки данных при нажатии на кнопку "обновить" или перемещении по страницам навигатора
    void GetNewData()
    {
        ScreenOptions.AutoCursor( true, CURSOR_WAIT );
        // TODO: поиск
        if( valid( TextBox ) )
        {
            string@ val = TextBox.GetSearchValue();
            LastSearchedValue = "";
            if( valid( val ) && val != "" )
            {
                if( LastSearchedValue != val )
                {
                    LastSearchedValue = val;
                    PageCurrent = 0;
                }
            }
        }
        AuctionRefreshData( LastSearchedValue, TypeFilterFlags, PageCurrent, SortFlag );
    }

    // Перерисовка таблицы и навигатора
    // TODO: заменить текст на строки из *.msg файлов
    void Refresh()
    {
        Grid.FirstVisibleRow = 0;
        LastSelectedLot = -1;
        Grid.TotalRows = AvailableLots.length();
        Grid.Refresh();
        if( valid( PicBox ) )
        {
            PicBox.ChangePid( 0 );
        }
        if( valid( Label ) )
        {
            if( Grid.TotalRows == 0 )
            {
                Label.SetText( "No lots were found." );
            }
            else
            {
                Label.SetText( "Choose the lot." );
            }
        }
        if( valid( PriceLabel ) )
        {
            PriceLabel.ChangeValue( 0 );
        }
        ScreenOptions.AutoCursor( true, CURSOR_DEFAULT );
        if( valid( Navigator ) )
            Navigator.Refresh();
    }

    // Переход на окно объявления ставок
    void OpenSellScreen()
    {
        ::HideScreen( 0, 0, 0, 0 );
        RunServerScriptUnsafe( "auction@unsafe_ShowAuctionSellScreen", 0, 0, 0, null, null );
    }
}


LotInfo[] AvailableLots;         // Массив описаний лотов. Исходные данные для окна.

AuctionBuyScreen@ AuctionScreen; // Окно покупки, экземпляр.

// Инициализация, вызывается в client_main@start
void AuctionBuyScreenInit()
{
    @AuctionScreen = AuctionBuyScreen( CLIENT_SCREEN_AUCTION_BUY );
    GUI_CreateScreen( CLIENT_SCREEN_AUCTION_BUY, "auction/auction_buy.png" )
    .CallbackShow( AuctionScreen )
    .CallbackHide( AuctionScreen )
    .AutoCursor( true, CURSOR_DEFAULT );                // 485
    // Таблица
    GridTable grid( CLIENT_SCREEN_AUCTION_BUY, Rectangle( 90, 80, 410, 440 ), 26, 22, AvailableLots.length() );
    @grid.SortingCallback = AuctionScreen;
    grid.AddColumn( "Name", FT_CENTERY | FT_BORDERED, "", COLOR_RED, 150, 0,  COLOR_GREEN, COLOR_RED, SORT_NAME );
    grid.AddColumn( "Seller", FT_CENTERY | FT_BORDERED, "", COLOR_RED, 80, 0,  COLOR_GREEN, COLOR_RED, SORT_SELLER );
    grid.AddColumn( "Lot", FT_CENTERX | FT_CENTERY | FT_BORDERED, "", COLOR_DGREEN, 30, FT_CENTERX,  COLOR_GREEN, COLOR_RED, SORT_LOT );
    grid.AddColumn( "Price", FT_CENTERY | FT_CENTERR | FT_BORDERED, "", COLOR_RED, 60, FT_CENTERR,  COLOR_GREEN, COLOR_RED, SORT_PRICE );
    grid.AddColumn( "End time", FT_CENTERX | FT_CENTERY | FT_BORDERED, "", COLOR_RED, 80, FT_CENTERR,  COLOR_GREEN, COLOR_RED, SORT_TIME );
    grid.UpBtnOptions( "DI_UP1.FRM", "DI_UP2.FRM", "DI_UP2.FRM", Rectangle( 573, 445, 23, 24 ), SCROLL_UP );
    grid.DnBtnOptions( "DI_DOWN1.FRM", "DI_DOWN2.FRM", "DI_DOWN2.FRM", Rectangle( 573, 471, 24, 25 ), SCROLL_DN );
    @grid.CellsCallback = AuctionScreen;
    @AuctionScreen.Grid = grid;
    grid.Init();
    // Картинка предмета
    ItemPictureBox pb( 0, 0, 0, true, Rectangle( 585, 325, 88, 57 ) );
    pb.Init( CLIENT_SCREEN_AUCTION_BUY );
    @AuctionScreen.PicBox = pb;
    // Описание предмета
    ScrollableLabel label( 0, FONT_FALLOUT, int(COLOR_GREEN), Rectangle( 595, 45, 160, 205 ) );
    label.Init( CLIENT_SCREEN_AUCTION_BUY );
    @AuctionScreen.Label = label;
    // Поле для отображения цены/ Заменено на поле для ввода текста. В варианте с AnyDataManager поиск текста не возможен
    /*
       AuctionBuyPriceLabel priceLabel(Rectangle(620, 280,114, 21));
            priceLabel.Init(CLIENT_SCREEN_AUCTION_BUY);
            PriceLabel = priceLabel;
     */
    // Окно поиска текста
    AuctionSearchValueTextBox sValTbx( Rectangle( 620, 280, 114, 21 ), "Type keyword..." );
    sValTbx.Init( CLIENT_SCREEN_AUCTION_BUY );
    @AuctionScreen.TextBox = sValTbx;
    // Кнопки фильтра
    RadioButton rb1( Rectangle( 690, 324, 83, 17 ), Size( 17, 11 ), null, "Weapon", true, "TGSKLON.FRM", "TGSKLOFF.FRM", COLOR_GREEN, ATF_WEAPON, true );
    rb1.SetCheckedCallback( AuctionScreen );
    rb1.Init( CLIENT_SCREEN_AUCTION_BUY );
    RadioButton rb2( Rectangle( 690, 337, 83, 17 ), Size( 17, 11 ), null, "Armor", true, "TGSKLON.FRM", "TGSKLOFF.FRM", COLOR_GREEN, ATF_ARMOUR, true );
    rb2.SetCheckedCallback( AuctionScreen );
    rb2.Init( CLIENT_SCREEN_AUCTION_BUY );
    RadioButton rb3( Rectangle( 690, 351, 83, 17 ), Size( 17, 11 ), null, "Ammo", true, "TGSKLON.FRM", "TGSKLOFF.FRM", COLOR_GREEN, ATF_AMMO, true );
    rb3.SetCheckedCallback( AuctionScreen );
    rb3.Init( CLIENT_SCREEN_AUCTION_BUY );
    RadioButton rb4( Rectangle( 690, 364, 83, 17 ), Size( 17, 11 ), null, "Drugs", true, "TGSKLON.FRM", "TGSKLOFF.FRM", COLOR_GREEN, ATF_DRUGS, true );
    rb4.SetCheckedCallback( AuctionScreen );
    rb4.Init( CLIENT_SCREEN_AUCTION_BUY );
    RadioButton rb5( Rectangle( 690, 377, 83, 17 ), Size( 17, 11 ), null, "Misc", true, "TGSKLON.FRM", "TGSKLOFF.FRM", COLOR_GREEN, ATF_MISC, true );
    rb5.SetCheckedCallback( AuctionScreen );
    rb5.Init( CLIENT_SCREEN_AUCTION_BUY );
    // Кнопка "done"
    GUI_AddScreenElement( CLIENT_SCREEN_AUCTION_BUY, "DI_DONE1.FRM",  620, 447 )
    .Position( 620, 447, 82, 46 )
    .DownPic( "DI_DONE2.FRM" )
    .CallbackMouseClick( AuctionScreen );
    // Кнопка обновить
    AuctionBuyRefreshButton brnRefresh( Rectangle( 725, 411, 44, 41 ) );
    brnRefresh.Init( CLIENT_SCREEN_AUCTION_BUY );
    // Панель для навигации по страницам
    PageNavigator pn( Rectangle( 90, 520, 410, 25 ), 50, FONT_FALLOUT, int(COLOR_GREEN), int(COLOR_BLUE), int(COLOR_LGRAY) );
    pn.SetCallback( AuctionScreen );
    @AuctionScreen.Navigator = pn;
    pn.Init( CLIENT_SCREEN_AUCTION_BUY );
    // Кнопка Купить
    AuctionBuyButton btnBuy( Rectangle( 693, 408, 14, 14 ) );
    btnBuy.Init( CLIENT_SCREEN_AUCTION_BUY );
    // Кнопка Отменить
    AuctionCancelButton btnCancel( Rectangle( 742, 513, 14, 14 ) );
    btnCancel.Init( CLIENT_SCREEN_AUCTION_BUY );
    // Кнопка Продажи
    AuctionViewSellScreenButton@ btnV = AuctionViewSellScreenButton();
    @btnV.Screen = AuctionScreen;
    GUI_AddScreenElement( CLIENT_SCREEN_AUCTION_BUY, "DI_RDBT2.FRM", 742, 543 )
    .Position( 742, 543, 14, 14 )
    .DownPic( "DI_RDBT1.FRM" )
    .CallbackMouseClick( btnV );
}

// Отображение окна
void ShowBuyScreen( int lotsCount, int page, int maxPages, string@ lexems, int[] @ lotInfo )
{
    AvailableLots.resize( 0 );
    if( valid( lotInfo ) )
        ConvertLotInfoFromArray( lotInfo, lexems, lotsCount, AvailableLots );
    AuctionScreen.PageCurrent = page;
    AuctionScreen.TotalPages = maxPages;
    ShowScreen( CLIENT_SCREEN_AUCTION_BUY, AvailableLots.length(), 0, 0 );
}

bool AuctionCancelLot( LotInfo@ lot )
{
    CritterCl@ cr = GetChosen();
    if( valid( cr ) && valid( lot ) )
    {
        if( cr.Id != lot.PlayerId )
        {
            // TODO: добавить месаджбокс
            Message( GetMsgStr( TEXTMSG_TEXT, STR_CANCEL_RESTRICTED ) );
            return false;
        }
        RunServerScriptUnsafe( "auction@unsafe_CancelLot", lot.ItemId, lot.LotId, 0, null, null );
        return true;
    }
    Message( FormatTags( GetMsgStr( TEXTMSG_TEXT, STR_COMMON_ERROR ), "$code" + 171719 ) );
    return false;
}

bool AuctionBuyLot( LotInfo@ lot )
{
    CritterCl@ cr = GetChosen();
    if( valid( cr ) && valid( lot ) )
    {
        if( cr.Id == lot.PlayerId )
        {
            // TODO: добавить месаджбокс
            Message( GetMsgStr( TEXTMSG_TEXT, STR_BUY_SAME_PLAYER ) );
            return false;
        }
        if( cr.Stat[ ST_REPLICATION_MONEY ] < int(lot.Cost) )
        {
            // TODO: добавить месаджбокс
            Message( GetMsgStr( TEXTMSG_TEXT, STR_BUY_NOT_ENOUGH_MONEY ) );
            return false;
        }
        RunServerScriptUnsafe( "auction@unsafe_BuyLot", lot.ItemId, lot.LotId, 0, null, null );
        return true;
    }
    Message( FormatTags( GetMsgStr( TEXTMSG_TEXT, STR_COMMON_ERROR ), "$code" + 171718 ) );
    return false;
}

//  Обновление окна по нажатию кнопки "обновить"
void RefreshBuyScreen( int lotsCount, int page, int maxPages, string@ lexems, int[] @ lotInfo )
{
    AvailableLots.resize( 0 );
    if( valid( lotInfo ) )
        ConvertLotInfoFromArray( lotInfo, lexems, lotsCount, AvailableLots );
    AuctionScreen.PageCurrent = page;
    AuctionScreen.TotalPages = maxPages;
    AuctionScreen.Refresh();
}

// Элементы
// Кнопка "окно продажи"
class AuctionViewSellScreenButton : IGUI::ElementCallbackMouseClick
{
    AuctionBuyScreen@ Screen;

    void OnMouseClick( int click )
    {
        if( click == MOUSE_CLICK_LEFT && valid( Screen ) )
            Screen.OpenSellScreen();
    }
}


// Кнопка "Отменить"
class AuctionCancelButton : AuctionBuyButton
{
    AuctionCancelButton( Rectangle & bounds )
    {
        super( bounds );
    }

    void OnMouseClick( int click )
    {
        if( click == MOUSE_CLICK_LEFT && valid( AuctionScreen ) )
        {
            AuctionScreen.OnCancelButtonClick();
        }
    }
}

// Кнопка "Купить"
class AuctionBuyButton : IGUI::ElementCallbackMouseClick
{
    Rectangle@ Bounds;
    AuctionBuyButton( Rectangle & bounds )
    {
        @Bounds = bounds;
    }

    void OnMouseClick( int click )
    {
        if( click == MOUSE_CLICK_LEFT && valid( AuctionScreen ) )
        {
            AuctionScreen.OnBuyButtonClick();
        }
    }

    void Init( int screen )
    {
        GUI_AddScreenElement( screen, "DI_RDBT2.FRM",  Bounds.X, Bounds.Y )
        .Position( Bounds.X, Bounds.Y, Bounds.Width, Bounds.Height )
        .DownPic( "DI_RDBT1.FRM" )
        .CallbackMouseClick( this );
    }
}

// Кнопка "обновить"
class AuctionBuyRefreshButton : IGUI::ElementCallbackMouseClick
{
    Rectangle@ Bounds;
    AuctionBuyRefreshButton( Rectangle & bounds )
    {
        @Bounds = bounds;
    }

    void OnMouseClick( int click )
    {
        if( click == MOUSE_CLICK_LEFT )
        {
            AuctionScreen.PageCurrent = 0;
            AuctionScreen.GetNewData();
        }
    }

    void Init( int screen )
    {
        GUI_AddScreenElement( screen, null,  Bounds.X, Bounds.Y )
        .Position( Bounds.X, Bounds.Y, Bounds.Width, Bounds.Height )
        .DownPic( "auction/f5.png" )
        .CallbackMouseClick( this );
    }
}


// Поле для ввода текста
class AuctionSearchValueTextBox : IGUI::ElementCallbackInit, IGUI::ElementCallbackKeyPress
{
    Rectangle@      Bounds;
    IGUIElementOpt@ Options;
    string          Text;
    string          DefaultText;

    AuctionSearchValueTextBox( Rectangle & bounds, string textDefault )
    {
        @Bounds = bounds;
        DefaultText = textDefault;
        Text = DefaultText;
    }

    void Init( int screen )
    {
        GUI_AddScreenElement( screen, null,  Bounds.X, Bounds.Y )
        .Position( Bounds.X, Bounds.Y, Bounds.Width, Bounds.Height )
        .CallbackKeyPress( this )
        .CallbackInit( this );
    }

    void OnInit()
    {
        @Options = GUI_GetElementOptions();
        DrawText();

    }

    void OnKeyPress( uint8 key, uint8 letter, bool& result )
    {
        if( key == DIK_RETURN || key == DIK_NUMPADENTER )
        {
            Text = Options.GetText();
            Text = substring( Text, 0, Text.length() - 1 );
            Options.Text( this.Text, FONT_FALLOUT, 0, COLOR_GREEN, FT_CENTERY | FT_NOBREAK_LINE );
            AuctionScreen.PageCurrent = 0;
            AuctionScreen.GetNewData();
        }
    }

    void Reset()
    {
        Text = DefaultText;
        DrawText();
    }

    void DrawText()
    {
        if( valid( Options ) )
        {
            Options
            .Text( this.Text, FONT_FALLOUT, 0, COLOR_GREEN, FT_CENTERY | FT_NOBREAK_LINE )
            .CallbackInit( this )
            .TextInput( true, 10, COLOR_WHITE );
        }
    }

    string@ GetSearchValue()
    {
        string@ value = null;
        Text = Options.GetText();
        if( Text.length() > 0 && Text != "" && Text != DefaultText )
        {
            @value = Text;
        }
        else
        {
            if( Text.length() == 0 || Text == "" )
            {
                if( valid( Options ) )
                {
                    Options.Text( this.DefaultText, FONT_FALLOUT, 0, COLOR_GREEN, FT_CENTERY | FT_NOBREAK_LINE );
                }
            }
        }
        return value;
    }

}


// Ярлык с ценой лота
class AuctionBuyPriceLabel : IGUI::ElementCallbackInit
{
    Rectangle@      Bounds;
    IGUIElementOpt@ Options;
    AuctionBuyPriceLabel( Rectangle & bounds )
    {
        @Bounds = bounds;
    }

    void Init( int screen )
    {
        GUI_AddScreenElement( screen, null,  Bounds.X, Bounds.Y )
        .Position( Bounds.X, Bounds.Y, Bounds.Width, Bounds.Height )
        .Text( "000000000", FONT_BIG_NUM, COLOR_WHITE, 0, FT_NOBREAK_LINE )
        .CallbackInit( this );
    }

    void OnInit()
    {
        @Options = GUI_GetElementOptions();
    }

    void ChangeValue( int value )
    {
        if( valid( Options ) )
        {
            string str = "000000000" + value;
            str = substring( str, str.length() - 8, str.length() - 1 );
            Options.Text( str, FONT_BIG_NUM, COLOR_WHITE, 0, FT_NOBREAK_LINE );
        }
    }
}
