#include "_client_defines.fos"
#include "client_gui_h.fos"
#include "_macros.fos"
#include "_colors.fos"
#include "client_rectangle_h.fos"

#ifndef __CLIENT_NumericUpAndDown__
# define __CLIENT_NumericUpAndDown__

# define BUTTON_TYPE_UP      ( 1 )
# define BUTTON_TYPE_DOWN    ( -1 )
# define BTN_HEIGHT          ( 14 )
# define BTN_WIDTH           ( 11 )

interface INumericUpAndDownCallback  {
    void OnNumericValueChanged( int value );
}

// Окно для ввода цифр с кнопками вверх/вниз
// С указанием максимального-минимального значения
class NumericUpAndDown : IGUI::ElementCallbackInit, IGUI::ElementCallbackKeyPress, IGUI::ElementCallbackMouseClick
{
    Rectangle@                 Bounds;
    int                        Value;
    int                        MaxValue;
    string@                    Pic;
    IGUIElementOpt@            Options;
    bool                       Enabled;
    uint                       Color;
    UpAndDownButton@           BtnUp;
    UpAndDownButton@           BtnDown;
    INumericUpAndDownCallback@ ValueChangedCallbak;

    NumericUpAndDown( int defaultValue, int maxValue, string@ pic, Rectangle & bounds, uint color )
    {
        @Bounds = bounds.Copy();
        Bounds.Height = BTN_HEIGHT;           // высота должна поместить две кнопки
        Bounds.Region.Width -= 2 * BTN_WIDTH; // Отступ с правой стороны, чтобы поместить кнопки
        Value = defaultValue;
        MaxValue = maxValue;
        Color = color;
        if( valid( pic ) && pic != "" )
            Pic = pic;
        Rectangle rec( Bounds.X + Bounds.Width, Bounds.Y + 2, BTN_WIDTH, BTN_HEIGHT );
        @BtnUp = UpAndDownButton( BUTTON_TYPE_UP, this, rec.Copy() );
        rec.Location.X += BTN_WIDTH;
        @BtnDown = UpAndDownButton( BUTTON_TYPE_DOWN, this, rec.Copy() );
    }


    void OnInit()
    {
        @Options = GUI_GetElementOptions();
        Value = 0;
        DrawText();
    }

    void OnKeyPress( uint8 key, uint8 letter, bool& result )
    {
        string@ text = Options.GetText();
        if( !valid( text ) || text.length() == 0 || text == "" )
        {
            SetValue( 0 );
        }
        else
        {
            StrToInt( text, Value );
            SetValue( CLAMP( Value, 0, MaxValue ) );
        }
        DrawText();
        // if(key==DIK_RETURN || key==DIK_NUMPADENTER) Instance.ChangeChannel();

    }

    void OnMouseClick( int click )
    {
        if( click == MOUSE_CLICK_WHEEL_UP )
            ChangeValue( DIR_FORWARD * 10 );
        else if( click == MOUSE_CLICK_WHEEL_DOWN )
            ChangeValue( DIR_BACK * 10 );
    }

    void ChangeEnabled( bool enable )
    {
        Enabled = enable;
        DrawText();
    }

    void SetValue( int value )
    {
        Value = value;
        if( valid( ValueChangedCallbak ) )
            ValueChangedCallbak.OnNumericValueChanged( value );
    }

    void SetValue( int maxValue, int addValue )
    {
        MaxValue = maxValue;
        Value = 0;
        ChangeValue( addValue );
    }

    void ChangeValue( int addValue )
    {
        if( Value + addValue >= 0 && Value + addValue <= MaxValue )
            Value += addValue;
        else if( Value + addValue < 0 )
            Value = 0;
        else if( Value + addValue > MaxValue )
            Value = MaxValue;
        DrawText();
        if( valid( ValueChangedCallbak ) )
            ValueChangedCallbak.OnNumericValueChanged( Value );
    }

    void DrawText()
    {
        if( valid( Options ) )
            Options
            .Text( "" + Value, FONT_NUM, 0, COLOR_WHITE, FT_NOBREAK_LINE )
            .TextInput( Enabled, int(MaxValue / 10) + 1, COLOR_WHITE );
    }

    void Init( int screen )
    {
        GUI_AddScreenElement( screen, Pic,  Bounds.X, Bounds.Y )
        .Position( Bounds.X, Bounds.Y, Bounds.Width, Bounds.Height )
        .CallbackKeyPress( this )
        .CallbackMouseClick( this )
        .CallbackInit( this );
        BtnUp.Init( screen );
        BtnDown.Init( screen );
        DrawText();
    }

}
// Кнопки вверх/Вниз
class UpAndDownButton : IGUI::ElementCallbackMouseClick
{
    int               Type;
    NumericUpAndDown@ Control;
    Rectangle@        Bounds;

    UpAndDownButton( int type, NumericUpAndDown & control, Rectangle & bounds )
    {
        Type = type;
        @Control = control;
        @Bounds = bounds;
    }

    void OnMouseClick( int click )
    {
        if( click == MOUSE_CLICK_LEFT && valid( Control ) )
            Control.ChangeValue( Type );
    }

    void Init( int screen )
    {
        GUI_AddScreenElement( screen, Type == BUTTON_TYPE_UP ? "UPARWOFF.FRM" : "DNARWOFF.FRM",  Bounds.X, Bounds.Y )
        .DownPic( Type == BUTTON_TYPE_UP ? "UPARWON.FRM" : "DNARWON.FRM" )
        .CallbackMouseClick( this );
    }

}

#endif // __CLIENT_NumericUpAndDown__
