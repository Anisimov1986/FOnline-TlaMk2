// Author: Tab10id
// #define __DEBUG__

#include "_macros.fos"
#include "_msgstr.fos"
#include "_animation.fos"
#include "stdlib_h.fos"

#ifdef __DEBUG__
# define LogEx                             # (error) Log( error )
#endif
#ifndef __DEBUG__
# define LogEx                             # ( error )
#endif

#define STR_ITEM_NAME                      # (itemPid) ( itemPid * 100 )

#define MAX_RESOURCES_COUNT_PER_SCENERY    ( 20 )
#define TIME_FOR_RESOURCES_COUNT_RESP      ( 60 * 60 * 6 )
#define RESOURCES_COUNT_RESP_COUNT         ( 2 )
#define DEFAULT_TIMEOUT                    ( REAL_MINUTE( 10 ) )
#define OUTDOORSMAN_TIMEOUT                # (cr) ( cr.Timeout[ TO_SK_OUTDOORSMAN ] + __FullSecond + ( DEFAULT_TIMEOUT / cr.Skill[ SK_OUTDOORSMAN ] ) )
#define OUTDOORSMAN_SUPERSLEDGE_TIMEOUT    # (cr) ( cr.Timeout[ TO_SK_OUTDOORSMAN ] + __FullSecond + ( DEFAULT_TIMEOUT / ( cr.Skill[ SK_OUTDOORSMAN ] * 3 / 2 ) ) )
#define SCIENCE_SUPERTOOLKIT_TIMEOUT       # (cr) ( cr.Timeout[ TO_SK_SCIENCE ] + __FullSecond + ( DEFAULT_TIMEOUT * 3 / ( cr.Skill[ SK_SCIENCE ] ) ) )

#define STR_NO_RESOURCE                    ( 3700 )
#define STR_WEIGHT_TOO_HEAVY               ( 3701 )
#define STR_ITEMS_ADDED                    ( 3702 )
#define STR_ITEM_ADDED                     ( 3703 )
#define STR_WOOD_ADDED                     ( 3704 )
#define STR_TYPE_COUNT                     ( 3705 )
#define STR_TYPE_KG                        ( 3706 )
#define STR_NO_AMMIAK                      ( 3707 )
#define STR_AMMIAK_ADDED                   ( 3708 )
#define STR_V15_ADDED                      ( 3710 )
#define STR_ELECTRONIC_ADDED               ( 3711 )
#define STR_RAGS_MK2_ADDED                 ( 3715 )
#define STR_METAL_TRASH_MK2_ADDED          ( 3718 )
#define STR_PUMP_PARTS_MK2_ADDED           ( 3719 )
#define STR_FIREWOOD_MK2_ADDED             ( 3720 )
#define STR_TUBE_MK2_ADDED                 ( 3721 )
#define STR_V15_COMPUTER_PART_MK2_ADDED    ( 3722 )
#define STR_ELECTRONIC_WASTE_MK2_ADDED     ( 3723 )
#define STR_MINERAL_MK2_ADDED              ( 3724 )
#define STR_METAL_ORE_MK2_ADDED            ( 3725 )
#define STR_FRUIT_MK2_ADDED                ( 3726 )
#define STR_CHEMICALS_MK2_ADDED            ( 3729 )

#define EXP_FOR_ORE                        ( 200 )
#define EXP_FOR_MINERAL                    ( 100 )
// #define EXP_FOR_ELECTRONIC (100)
#define EXP_FOR_FRUIT                      ( 10 )
#define EXP_FOR_METAL                      ( 30 )
#define EXP_FOR_POLE                       ( 50 )
#define EXP_FOR_TUBE                       ( 50 )
#define EXP_FOR_FLINT                      ( 100 )
#define EXP_FOR_URAN                       ( 90 )
#define EXP_FOR_STEEL                      ( 80 )
#define EXP_FOR_CHEMICALS                  ( 40 )
#define EXP_FOR_WATER                      ( 40 )
#define EXP_FOR_FRUIT_MK2                  ( 200 )
#define EXP_FOR_CHEMICALS_MK2              ( 600 )
#define EXP_FOR_RAGS_MK2                   ( 400 )
#define EXP_FOR_METAL_TRASH_MK2            ( 400 )
#define EXP_FOR_PUMP_PARTS_MK2             ( 400 )
#define EXP_FOR_FIREWOOD_MK2               ( 400 )
#define EXP_FOR_TUBE_MK2                   ( 400 )
// #define EXP_FOR_V15_COMPUTER_PART_MK2 (0)
// #define EXP_FOR_ELECTRONIC_WASTE_MK2 (0)
#define EXP_FOR_MINERAL_MK2                ( 400 )
#define EXP_FOR_ORE_MK2                    ( 500 )

import void InjureCritter( Critter& cr, uint dmg, uint dmgType, uint8 dir, uint attackerId, uint forceFlags ) from "combat";
import uint GetNearFullSecond( uint16 year, uint16 month, uint16 day, uint16 hour, uint16 minute, uint16 second ) from "time";


// КЉласс стандартной обработки
ToolDefault defTool;

// КЉлассы рассширенной обработки условий и результатов
ToolAxe                     toolAxe;
ToolSuperSledge             toolSuperSledge;
ToolGiveExpForOre           toolGiveExpForOre;
ToolGiveExpForMineral       toolGiveExpForMineral;
ToolGiveExpForPole          toolGiveExpForPole;
ToolGiveExpForMetal         toolGiveExpForMetal;
ToolGiveExpForMetalTrashMk2 toolGiveExpForMetalTrashMk2;
ToolGiveExpForPumpPartsMk2  toolGiveExpForPumpPartsMk2;
ToolGiveExpForTube          toolGiveExpForTube;
ToolGiveExpForFlint         toolGiveExpForFlint;
ToolGiveExpForFruit         toolGiveExpForFruit;
ToolGiveExpForFruitMk2      toolGiveExpForFruitMk2;
ToolGiveExpForChemMk2       toolGiveExpForChemMk2;
// ToolGiveExpForElectronic toolGiveExpForElectronic;
ToolGiveExpForSteel         toolGiveExpForSteel;
ToolShowInfoInWeight        toolShowInfoInWeight;
ToolSuperToolKit            toolSuperToolKit;
ToolGiveExpForUran          toolGiveExpForUran;
ToolGiveExpForChemicals     toolGiveExpForChemicals;
ToolGiveExpForWater         toolGiveExpForWater;
ToolGiveExpForRagsMk2       toolGiveExpForRagsMk2;
ToolGiveExpForFirewoodMk2   toolGiveExpForFirewoodMk2;
ToolGiveExpForTubeMk2       toolGiveExpForTubeMk2;
// ToolGiveExpForV15ComputerPartsMk2 toolGiveExpForV15ComputerPartsMk2;
// ToolGiveExpForElectronicWasteMk2 toolGiveExpForElectronicWasteMk2;
ToolGiveExpForMineralMk2 toolGiveExpForMineralMk2;
ToolGiveExpForOreMk2     toolGiveExpForOreMk2;
ToolBottle               toolBottle;
ToolSentryBotParts       toolSentryBotParts;


#include "resources_h.fos"

void SetToolsExt()
{
    Tools[ 0 ].SetCallbackDemand( toolAxe, PID_AXE )
    .SetCallbackAddExp( toolGiveExpForPole, PID_SHARPENED_POLE )
    .SetCallbackResult( toolAxe, PID_FIREWOOD )
    .SetCallbackAddExp( toolGiveExpForFirewoodMk2, PID_FIREWOOD_MK2 );
    Tools[ 1 ].SetCallbackSetTimeouts( toolSuperSledge, PID_SUPER_SLEDGE )
    .SetCallbackAddExp( toolGiveExpForFlint, PID_FLINT )
    .SetCallbackAddExp( toolGiveExpForMineral, PID_MINERAL )
    .SetCallbackResult( toolShowInfoInWeight, PID_MINERAL )
    .SetCallbackResult( toolShowInfoInWeight, PID_MINERAL_MK2 )
    .SetCallbackAddExp( toolGiveExpForMineralMk2, PID_MINERAL_MK2 );
    Tools[ 2 ].SetCallbackSetTimeouts( toolSuperSledge, PID_SUPER_SLEDGE )
    .SetCallbackAddExp( toolGiveExpForOre, PID_METAL_ORE )
    .SetCallbackAddExp( toolGiveExpForMineral, PID_MINERAL )
    .SetCallbackResult( toolShowInfoInWeight, PID_MINERAL )
    .SetCallbackResult( toolShowInfoInWeight, PID_METAL_ORE )
    .SetCallbackResult( toolShowInfoInWeight, PID_MINERAL_MK2 )
    .SetCallbackAddExp( toolGiveExpForOreMk2, PID_METAL_ORE_MK2 )
    .SetCallbackAddExp( toolGiveExpForMineralMk2, PID_MINERAL_MK2 )
    .SetCallbackResult( toolShowInfoInWeight, PID_METAL_ORE_MK2 )
    .SetCallbackResult( toolShowInfoInWeight, PID_MINERAL_MK2 );
    Tools[ 3 ].SetCallbackAddExp( toolGiveExpForMetal, PID_METAL_TRASH )
    .SetCallbackAddExp( toolGiveExpForMetalTrashMk2, PID_METAL_TRASH_MK2 )
    .SetCallbackAddExp( toolGiveExpForPumpPartsMk2, PID_PUMP_PARTS_MK2 );
    Tools[ 4 ].SetCallbackAddExp( toolGiveExpForTube, PID_TUBE )
    .SetCallbackAddExp( toolGiveExpForTubeMk2, PID_TUBE_MK2 );
//	Tools[5].SetCallbackSetTimeouts(toolSuperToolKit,PID_SUPER_TOOL_KIT)
    //		.SetCallbackDemand(toolSuperToolKit,PID_SUPER_TOOL_KIT)
    //		.SetCallbackResult(toolSuperToolKit,PID_V15_COMPUTER_PART)
//			.SetCallbackResult(toolSuperToolKit,PID_ELECTRONIC_WASTE)
//			.SetCallbackAddExp(toolGiveExpForElectronic,PID_V15_COMPUTER_PART)
//			.SetCallbackAddExp(toolGiveExpForV15ComputerPartsMk2,PID_V15_COMPUTER_PART_MK2)
//			.SetCallbackAddExp(toolGiveExpForElectronic,PID_ELECTRONIC_WASTE)
//			.SetCallbackAddExp(toolGiveExpForElectronicWasteMk2,PID_ELECTRONIC_WASTE_MK2);
    Tools[ 6 ].SetCallbackAddExp( toolGiveExpForFruit, PID_MUTATED_FRUIT )
    .SetCallbackAddExp( toolGiveExpForFruitMk2, PID_MUTATED_FRUIT_MK2 );
    Tools[ 7 ].SetCallbackAddExp( toolGiveExpForUran, PID_URANIUM_ORE );
    Tools[ 8 ].SetCallbackAddExp( toolGiveExpForPumpPartsMk2, PID_PUMP_PARTS_MK2 );
    Tools[ 9 ].SetCallbackAddExp( toolGiveExpForRagsMk2, PID_RAGS_MK2 );
    Tools[ 10 ].SetCallbackAddExp( toolGiveExpForSteel, PID_STEEL );
    Tools[ 11 ].SetCallbackAddExp( toolGiveExpForChemicals, PID_CHEMICALS )
    .SetCallbackAddExp( toolGiveExpForChemMk2, PID_CHEMICALS_MK2 );
    Tools[ 12 ].SetCallbackAddExp( toolGiveExpForWater, PID_BOTTLE_FULL );
    Tools[ 13 ].SetCallbackDemand( toolBottle, PID_BOTTLE_EMPTY )
    .SetCallbackResult( toolBottle, PID_BOTTLE_AMMIAK )
    .SetCallbackSetTimeouts( toolBottle, PID_BOTTLE_EMPTY );
    Tools[ 20 ].SetCallbackResult( ToolBrahminSecondResult(), PID_MEAT );
    Tools[ 21 ].SetCallbackSetTimeouts( toolSentryBotParts )
    .SetCallbackGetTimeouts( toolSentryBotParts );
    Tools[ 22 ].SetCallbackSetTimeouts( toolSentryBotParts )
    .SetCallbackGetTimeouts( toolSentryBotParts );


}

void _ToolInit( Item& item, bool firstTime )
{
    // item.SetEvent(ITEM_EVENT_USE,"_ToolUse");
}

bool _ToolUse( Item& item, Critter& cr, Critter@ onCritter, Item@ onItem, Scenery@ onScenery )
{
    int  pid = item.GetProtoId();
    int  onObj;
    int  bt = -1;
    uint resourceCount;
    if( valid( onItem ) )
    {
        onObj = onItem.GetProtoId();
    }
    else
    {
        if( valid( onScenery ) )
        {
            onObj = onScenery.ProtoId;
        }
        else if( valid( onCritter ) )
        {
            if( !onCritter.IsDead() )
                return false;

            onObj = onCritter.GetProtoId();
            bt = onCritter.Stat[ ST_BODY_TYPE ];
        }
        else
        {
            return false;
        }
    }
    CTool@ tool = GetTool( pid, onObj, bt );
    if( valid( tool ) )
    {
        uint toolIdx = tool.GetToolIdx( pid );
        if( not ( tool.CallbackGetTimeouts is null ) )
        {
            bool noTimeouts = tool.CallbackGetTimeouts.OnGetTimeouts( cr, pid );
            if( not noTimeouts )
            {
                return true;
            }
        }
        if( not CritterCanGetMoreItems( cr ) )
        {
            return true;
        }
        AnimateCritter( cr, tool.Anim1[ toolIdx ], tool.Anim2[ toolIdx ] );
        int mapId = cr.GetMapId();
        LogEx( "Tool used" );
        if( valid( onScenery ) )
        {
            resourceCount = GetSceneryResourcesCount( mapId, onScenery );
            if( resourceCount == 0 )
            {
                cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NO_RESOURCE );
                return true;
            }
        }

        if( tool.Param.length() > 0 )
        {
            bool isParam = false;

            for( uint i = 0, iEnd = tool.Param.length(); i < iEnd; i++ )
            {
                if( tool.Param[ i ] >= 0 )
                {
                    if( cr.Param[ tool.Param[ i ] ] >= tool.ParamValue[ i ] )
                    {
                        isParam = true;
                        break;
                    }
                }
                else
                {
                    isParam = true;
                    break;
                }
            }

            if( !isParam )
                return true;
        }
        int16 newItemIdx = tool.GetNewItemIdx( cr, toolIdx );

        if( valid( onCritter ) && valid( onCritter.GetMap() ) )
        {
            onCritter.ModeBase[ MODE_NO_SEE ] = -1;
            onCritter.RefreshVisible();
            array< Item@ > items;
            onCritter.GetItems( -1, items );
            MoveItems( items, onCritter.GetMap(), onCritter.HexX, onCritter.HexY );
        }

        if( newItemIdx != -1 )
        {
            if( tool.NewItemsPids[ newItemIdx ] > 0 )
            {
                uint itemCount = Random( tool.MinCount[ newItemIdx ], tool.MaxCount[ newItemIdx ] );
                if( itemCount > 0 )
                {
                    if( valid( onScenery ) )
                    {
                        if( resourceCount < itemCount )
                        {
                            itemCount = resourceCount;
                        }
                        resourceCount -= itemCount;
                        SetSceneryResourcesCount( resourceCount, mapId, onScenery );
                    }
                    if( itemCount > 0 )
                        cr.AddItem( tool.NewItemsPids[ newItemIdx ], itemCount );
                }
                if( not ( tool.CallbackResult[ newItemIdx ] is null ) )
                {
                    itemCount += tool.CallbackResult[ newItemIdx ].OnResult( cr, onItem, onScenery, pid, itemCount, tool.NewItemsPids[ newItemIdx ] );
                }
                if( not ( tool.CallbackSetTimeouts[ toolIdx ] is null ) )
                {
                    tool.CallbackSetTimeouts[ toolIdx ].OnSetTimeouts( cr, pid, itemCount, tool.NewItemsPids[ newItemIdx ] );
                }
                if( not ( tool.CallbackAddExp[ newItemIdx ] is null ) )
                {
                    tool.CallbackAddExp[ newItemIdx ].OnAddExp( cr, pid, itemCount, tool.NewItemsPids[ newItemIdx ] );
                }
                return true;
            }
            else
            {
                return false;
            }
        }
        else
        {
            return false;
        }
    }
    else
    {
        LogEx( "Wrong tool using" );
    }
    return false;
}
bool CritterCanGetMoreItems( Critter& player )
{
    if( ( player.Stat[ ST_CARRY_WEIGHT ] - player.ItemsWeight() ) < 0 )
    {
        player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_WEIGHT_TOO_HEAVY );
        return false;
    }
    return true;
}

uint GetSceneryResourcesCount( int mapId, Scenery& scenery )
{
    uint[] adResourceCount;
    uint resourceCount = 0;
    if( IsAnyData( "Resources_" + mapId + "_" + scenery.HexX + "_" + scenery.HexY + "_" + scenery.ProtoId ) )
    {
        if( GetAnyData( "Resources_" + mapId + "_" + scenery.HexX + "_" + scenery.HexY + "_" + scenery.ProtoId, adResourceCount ) )
        {
            resourceCount = adResourceCount[ 0 ];
        }
    }
    else
    {
        uint[] anyData;
        uint maxResCount = GetMaxResourceCount( scenery.ProtoId );
        anyData.insertLast( maxResCount );
        if( not SetAnyData( "Resources_" + mapId + "_" + scenery.HexX + "_" + scenery.HexY + "_" + scenery.ProtoId, anyData ) )
        {
            Log( "AnyData not created" );
        }
        uint[] forTE;
        forTE.insertLast( mapId );
        forTE.insertLast( scenery.HexX );
        forTE.insertLast( scenery.HexY );
        forTE.insertLast( scenery.ProtoId );
        CreateTimeEvent( __FullSecond + TIME_FOR_RESOURCES_COUNT_RESP, "_AddResourcesCount", forTE, true );
        resourceCount = maxResCount;
    }
    return resourceCount;
}

void SetSceneryResourcesCount( uint resourceCount, int mapId, Scenery& scenery )
{
    uint[] anyData;
    anyData.insertLast( resourceCount );
    if( not SetAnyData( "Resources_" + mapId + "_" + scenery.HexX + "_" + scenery.HexY + "_" + scenery.ProtoId, anyData ) )
    {
        Log( "AnyData not created" );
    }
}

CTool@ GetTool( int sourcePid )
{
    for( uint i = 0, iMax = Tools.length(); i < iMax; i++ )
    {
        for( int16 k = 0, kMax = int( Tools[ i ].SourcePids.length() ); k < kMax; k++ )
        {
            if( Tools[ i ].SourcePids[ k ] == sourcePid )
            {
                return Tools[ i ];
            }
        }
    }
    return null;
}

uint _AddResourcesCount( uint[] @ values )
{
    uint[] adResourceCount;
    if( IsAnyData( "Resources_" + values[ 0 ] + "_" + values[ 1 ] + "_" + values[ 2 ] + "_" + values[ 3 ] ) )
    {
        if( GetAnyData( "Resources_" + values[ 0 ] + "_" + values[ 1 ] + "_" + values[ 2 ] + "_" + values[ 3 ], adResourceCount ) )
        {
            adResourceCount[ 0 ] += RESOURCES_COUNT_RESP_COUNT;
            if( adResourceCount[ 0 ] < GetMaxResourceCount( values[ 3 ] ) )
            {
                if( not SetAnyData( "Resources_" + values[ 0 ] + "_" + values[ 1 ] + "_" + values[ 2 ] + "_" + values[ 3 ], adResourceCount ) )
                {
                    Log( "AnyData not created" );
                }
            }
            else
            {
                EraseAnyData( "Resources_" + values[ 0 ] + "_" + values[ 1 ] + "_" + values[ 2 ] + "_" + values[ 3 ] );
                return 0;
            }
        }
        return TIME_FOR_RESOURCES_COUNT_RESP;
    }
    else
    {
        return 0;
    }
}

void AnimateCritter( Critter& cr, uint anim1, uint anim2 )
{
    if( anim1 != 0 or anim2 != 0 )
    {
        cr.Animate( anim1, anim2, null, true, true );
    }
}

uint GetMaxResourceCount( int scProto )
{
    CTool@ tool = GetTool( scProto );
    {
        uint count = tool.SourceCount[ 0 ];
        if( count != 0 )
        {
            return count;
        }
    }
    return MAX_RESOURCES_COUNT_PER_SCENERY;
}

class ToolDefault : IResourceDemand, IResourceResult, IResourceGetTimeouts, IResourceSetTimeouts, IResourceAddExp
{
    uint OnResult( Critter& master, Item@ onItem, Scenery@ onScenery, int toolPid, uint count, int newItemsPid )
    {
        string lexem = "$itemname" + "@msg ITEM " + STR_ITEM_NAME( newItemsPid ) + "@";
        if( count > 1 )
        {
            lexem += "$count" + count + "$type" + "@msg text " + STR_TYPE_COUNT + "@";
            master.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_ITEMS_ADDED, lexem );
        }
        else
        {
            if( count == 1 )
            {
                master.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_ITEM_ADDED, lexem );
            }
        }
        return 0;
    }
    bool OnDemand( Critter& master, int toolPid )
    {
        return true;
    }
    bool OnGetTimeouts( Critter& master, int toolPid )
    {
        if( master.Timeout[ TO_SK_OUTDOORSMAN ] > 0 )
        {
            master.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_WEARINESS );
            return false;
        }
        return true;
    }
    void OnSetTimeouts( Critter& master, int toolPid, uint count, int newItemsPid )
    {
        master.TimeoutBase[ TO_SK_OUTDOORSMAN ] = OUTDOORSMAN_TIMEOUT( master );
    }

    void OnAddExp( Critter& master, int toolPid, uint count, int newItemsPid )
    {
        // do nothing
    }
}



// Tools

class ToolBottle : IResourceDemand, IResourceResult, IResourceSetTimeouts
{
    bool OnDemand( Critter& master, int toolPid )
    {
        GameVar@ qVar = GetLocalVar( LVAR_q_mod_farrel_ammiak, master.Id );
        if( valid( qVar ) && qVar > 0 )
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    uint OnResult( Critter& master, Item@ onItem, Scenery@ onScenery, int toolPid, uint count, int newItemsPid )
    {
        uint[] adResourceCount;
        uint itemCount = 1;
        uint resourceCount = 1;
        if( valid( onItem ) )
        {
            if( IsAnyData( "Resources_" + onItem.MapId + "_" + onItem.HexX + "_" + onItem.HexY + "_" + onItem.GetProtoId() ) )
            {
                if( GetAnyData( "Resources_" + onItem.MapId + "_" + onItem.HexX + "_" + onItem.HexY + "_" + onItem.GetProtoId(), adResourceCount ) )
                {
                    resourceCount = adResourceCount[ 0 ];
                }
            }
            if( resourceCount == 0 )
            {
                master.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NO_AMMIAK );
                return 0;
            }
            uint[] anyData;
            resourceCount = 0;
            anyData.insertLast( resourceCount );
            if( not SetAnyData( "Resources_" + onItem.MapId + "_" + onItem.HexX + "_" + onItem.HexY + "_" + onItem.GetProtoId(), anyData ) )
            {
                Log( "res: AnyData not created" );
            }
            else
            {
                uint[] forTE;
                forTE.insertLast( onItem.MapId );
                forTE.insertLast( onItem.HexX );
                forTE.insertLast( onItem.HexY );
                forTE.insertLast( onItem.GetProtoId() );
                CreateTimeEvent( __FullSecond + TIME_FOR_RESOURCES_COUNT_RESP * 5, "_AddResourcesCount", forTE, true );
            }
            Item@ tool = master.GetItem( toolPid, -1 );
            if( ( Random( 1, 6 ) + int(master.Stat[ ST_LUCK ] / 4) ) > 5 && valid( tool ) )
            {
                master.AddItem( PID_BOTTLE_AMMIAK, 1 );
                master.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_AMMIAK_ADDED );
                _SubItem( tool, 1 );
            }
            else
            {
                master.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NO_AMMIAK );
            }
        }
        return 0;
    }

    void OnSetTimeouts( Critter& master, int toolPid, uint count, int newItemsPid )
    {}
}

class ToolAxe : IResourceDemand, IResourceResult
{
    bool OnDemand( Critter& master, int toolPid )
    {
        if( Random( 0, 99 ) < ( 50 + ( master.StatBase[ ST_AGILITY ] * 5 ) ) )
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    uint OnResult( Critter& master, Item@ onItem, Scenery@ onScenery, int toolPid, uint count, int newItemsPid )
    {
        uint[] adResourceCount;
        uint resourceCount = GetMaxResourceCount( onScenery.ProtoId );
        uint maxCount = master.Skill[ SK_OUTDOORSMAN ] / 80;
        if( maxCount == 0 )
        {
            maxCount = 1;
        }
        uint itemCount = Random( 1, maxCount );
        int  mapId = master.GetMapId();
        if( valid( onScenery ) )
        {
            if( IsAnyData( "Resources_" + mapId + "_" + onScenery.HexX + "_" + onScenery.HexY + "_" + onScenery.ProtoId ) )
            {
                if( GetAnyData( "Resources_" + mapId + "_" + onScenery.HexX + "_" + onScenery.HexY + "_" + onScenery.ProtoId, adResourceCount ) )
                {
                    resourceCount = adResourceCount[ 0 ];
                }
            }
            if( resourceCount < itemCount )
            {
                itemCount = resourceCount;
            }
        }
        if( ( resourceCount == 0 ) and ( count == 0 ) )
        {
            master.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NO_RESOURCE );
            return 0;
        }
        else
        {
            resourceCount -= itemCount;
            if( ( count + itemCount ) > 0 )
            {
                master.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_WOOD_ADDED );
            }
        }
        if( valid( onScenery ) )
        {
            uint[] anyData;
            anyData.insertLast( resourceCount );
            if( not SetAnyData( "Resources_" + mapId + "_" + onScenery.HexX + "_" + onScenery.HexY + "_" + onScenery.ProtoId, anyData ) )
            {
                Log( "AnyData not created" );
            }
        }
        if( itemCount > 0 )
            master.AddItem( PID_FIREWOOD, itemCount );
        return itemCount;
    }
}

class ToolGiveExpForFirewoodMk2 : IResourceAddExp
{
    void OnAddExp( Critter& master, int toolPid, uint count, int newItemsPid )
    {
        master.StatBase[ ST_EXPERIENCE ] += EXP_FOR_FIREWOOD_MK2;
        master.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_FIREWOOD_MK2_ADDED );
    }
}

class ToolSuperSledge : IResourceSetTimeouts
{
    void OnSetTimeouts( Critter& master, int toolPid, uint count, int newItemsPid )
    {
        master.TimeoutBase[ TO_SK_OUTDOORSMAN ] = OUTDOORSMAN_SUPERSLEDGE_TIMEOUT( master );
    }
}

class ToolSuperToolKit : IResourceSetTimeouts, IResourceGetTimeouts
{
    void OnSetTimeouts( Critter& master, int toolPid, uint count, int newItemsPid )
    {
        master.TimeoutBase[ TO_SK_SCIENCE ] = SCIENCE_SUPERTOOLKIT_TIMEOUT( master );
    }

    bool OnGetTimeouts( Critter& master, int toolPid )
    {
        if( master.Timeout[ TO_SK_SCIENCE ] > 0 )
        {
            master.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_WEARINESS );
            return false;
        }
        return true;
    }
}

class ToolGiveExpForOre : IResourceAddExp
{
    void OnAddExp( Critter& master, int toolPid, uint count, int newItemsPid )
    {
        master.StatBase[ ST_EXPERIENCE ] += EXP_FOR_ORE;
    }
}

class ToolGiveExpForOreMk2 : IResourceAddExp
{
    void OnAddExp( Critter& master, int toolPid, uint count, int newItemsPid )
    {
        master.StatBase[ ST_EXPERIENCE ] += EXP_FOR_ORE_MK2;
        master.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_METAL_ORE_MK2_ADDED );
    }
}

class ToolGiveExpForPole : IResourceAddExp
{
    void OnAddExp( Critter& master, int toolPid, uint count, int newItemsPid )
    {
        master.StatBase[ ST_EXPERIENCE ] += EXP_FOR_POLE;
    }
}

class ToolGiveExpForMetal : IResourceAddExp
{
    void OnAddExp( Critter& master, int toolPid, uint count, int newItemsPid )
    {
        master.StatBase[ ST_EXPERIENCE ] += EXP_FOR_METAL;
    }
}

class ToolGiveExpForMetalTrashMk2 : IResourceAddExp
{
    void OnAddExp( Critter& master, int toolPid, uint count, int newItemsPid )
    {
        master.StatBase[ ST_EXPERIENCE ] += EXP_FOR_METAL_TRASH_MK2;
        master.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_METAL_TRASH_MK2_ADDED );
    }
}

class ToolGiveExpForPumpPartsMk2 : IResourceAddExp
{
    void OnAddExp( Critter& master, int toolPid, uint count, int newItemsPid )
    {
        master.StatBase[ ST_EXPERIENCE ] += EXP_FOR_PUMP_PARTS_MK2;
        master.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_PUMP_PARTS_MK2_ADDED );
    }
}

class ToolGiveExpForFruit : IResourceAddExp
{
    void OnAddExp( Critter& master, int toolPid, uint count, int newItemsPid )
    {
        master.StatBase[ ST_EXPERIENCE ] += EXP_FOR_FRUIT;
    }
}

class ToolGiveExpForFruitMk2 : IResourceAddExp
{
    void OnAddExp( Critter& master, int toolPid, uint count, int newItemsPid )
    {
        master.StatBase[ ST_EXPERIENCE ] += EXP_FOR_FRUIT_MK2;
        master.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_FRUIT_MK2_ADDED );
    }
}

class ToolGiveExpForMineral : IResourceAddExp
{
    void OnAddExp( Critter& master, int toolPid, uint count, int newItemsPid )
    {
        master.StatBase[ ST_EXPERIENCE ] += EXP_FOR_MINERAL;
    }
}

class ToolGiveExpForMineralMk2 : IResourceAddExp
{
    void OnAddExp( Critter& master, int toolPid, uint count, int newItemsPid )
    {
        master.StatBase[ ST_EXPERIENCE ] += EXP_FOR_MINERAL_MK2;
        master.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_MINERAL_MK2_ADDED );
    }
}

class ToolGiveExpForFlint : IResourceAddExp
{
    void OnAddExp( Critter& master, int toolPid, uint count, int newItemsPid )
    {
        master.StatBase[ ST_EXPERIENCE ] += EXP_FOR_FLINT;
    }
}

class ToolGiveExpForTube : IResourceAddExp
{
    void OnAddExp( Critter& master, int toolPid, uint count, int newItemsPid )
    {
        master.StatBase[ ST_EXPERIENCE ] += EXP_FOR_TUBE;
    }
}
/*
   class ToolGiveExpForElectronic : IResourceAddExp
   {
        void OnAddExp(Critter& master, int toolPid, uint count, int newItemsPid)
        {
                master.StatBase[ST_EXPERIENCE]+=EXP_FOR_ELECTRONIC;
        }
   }
 */
class ToolGiveExpForUran : IResourceAddExp
{
    void OnAddExp( Critter& master, int toolPid, uint count, int newItemsPid )
    {
        master.StatBase[ ST_EXPERIENCE ] += EXP_FOR_URAN;
    }
}

class ToolGiveExpForSteel : IResourceAddExp
{
    void OnAddExp( Critter& master, int toolPid, uint count, int newItemsPid )
    {
        master.StatBase[ ST_EXPERIENCE ] += EXP_FOR_STEEL;
    }
}



class ToolGiveExpForChemicals : IResourceAddExp
{
    void OnAddExp( Critter& master, int toolPid, uint count, int newItemsPid )
    {
        master.StatBase[ ST_EXPERIENCE ] += EXP_FOR_CHEMICALS;
        master.DeleteItem( PID_BOTTLE_GLASS, 1 );
    }
}

class ToolGiveExpForChemMk2 : IResourceAddExp
{
    void OnAddExp( Critter& master, int toolPid, uint count, int newItemsPid )
    {
        master.StatBase[ ST_EXPERIENCE ] += EXP_FOR_CHEMICALS_MK2;
        master.DeleteItem( PID_BOTTLE_GLASS, 1 );
    }
}

class ToolGiveExpForWater : IResourceAddExp
{
    void OnAddExp( Critter& master, int toolPid, uint count, int newItemsPid )
    {
        master.StatBase[ ST_EXPERIENCE ] += EXP_FOR_WATER;
        master.DeleteItem( PID_BOTTLE_EMPTY, 1 );
    }
}

class ToolGiveExpForRagsMk2 : IResourceAddExp
{
    void OnAddExp( Critter& master, int toolPid, uint count, int newItemsPid )
    {
        master.StatBase[ ST_EXPERIENCE ] += EXP_FOR_RAGS_MK2;
        master.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_RAGS_MK2_ADDED );
    }
}

class ToolGiveExpForTubeMk2 : IResourceAddExp
{
    void OnAddExp( Critter& master, int toolPid, uint count, int newItemsPid )
    {
        master.StatBase[ ST_EXPERIENCE ] += EXP_FOR_TUBE_MK2;
        master.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_TUBE_MK2_ADDED );
    }
}

/*
   class ToolGiveExpForV15ComputerPartsMk2 : IResourceAddExp
   {
        void OnAddExp(Critter& master, int toolPid, uint count, int newItemsPid)
        {
                master.StatBase[ST_EXPERIENCE]+=EXP_FOR_V15_COMPUTER_PART_MK2;
                master.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, STR_V15_COMPUTER_PART_MK2_ADDED);
        }
   }

   class ToolGiveExpForElectronicWasteMk2 : IResourceAddExp
   {
        void OnAddExp(Critter& master, int toolPid, uint count, int newItemsPid)
        {
                master.StatBase[ST_EXPERIENCE]+=EXP_FOR_ELECTRONIC_WASTE_MK2;
                master.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, STR_ELECTRONIC_WASTE_MK2_ADDED);
        }
   }
 */

class ToolShowInfoInWeight : IResourceResult
{
    uint OnResult( Critter& master, Item@ onItem, Scenery@ onScenery, int toolPid, uint count, int newItemsPid )
    {
        string lexem = "$itemname" + "@msg ITEM " + STR_ITEM_NAME( newItemsPid ) + "@";
        if( count > 0 )
        {
            const ProtoItem@ newItemProto = GetProtoItem( newItemsPid );
            if( valid( newItemProto ) )
            {
                uint itemweight = newItemProto.Weight * count / 1000;
                lexem += "$count" + itemweight + "$type" + "@msg text " + STR_TYPE_KG + "@";
                master.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_ITEMS_ADDED, lexem );
            }
        }
        return 0;
    }
}

class ToolBrahminSecondResult : IResourceResult
{
    uint OnResult( Critter& master, Item@ onItem, Scenery@ onScenery, int toolPid, uint count, int newItemsPid )
    {
        string lexem = "$itemname" + "@msg ITEM " + STR_ITEM_NAME( newItemsPid ) + "@";
        if( count > 1 )
        {
            lexem += "$count" + count + "$type" + "@msg text " + STR_TYPE_COUNT + "@";
            master.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_ITEMS_ADDED, lexem );
        }
        else
        {
            if( count == 1 )
            {
                master.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_ITEM_ADDED, lexem );
            }
        }

        Map@ map = master.GetMap();

        if( master.Skill[ SK_OUTDOORSMAN ] >= 60 && ( toolPid == PID_COMBAT_KNIFE || toolPid == PID_LIL_JESUS_WEAPON ) )
        {
            master.AddItem( PID_INTESTINES, 1 );
            lexem = "$itemname" + "@msg ITEM " + STR_ITEM_NAME( PID_INTESTINES ) + "@";
            master.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_ITEM_ADDED, lexem );
        }
        if( ( master.Perk[ PE_BRAMIN_SKINNING ] != 0 || master.Perk[ PE_HUNTER ] != 0 ) && valid( map ) && map.GetLocation().GetProtoId() != LOCATION_SpecialMadBrahminEncounter )
        {
            uint superPid = ( 8 > Random( 0, 99 ) ) ? PID_BRAHMIN_SKIN_MK2 : PID_BRAHMIN_SKIN;
            master.AddItem( superPid, 1 );

            lexem = "$itemname" + "@msg ITEM " + STR_ITEM_NAME( superPid ) + "@";
            master.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_ITEM_ADDED, lexem );

        }
        return 0;
    }
}

class ToolSentryBotParts : IResourceSetTimeouts, IResourceGetTimeouts
{
    void OnSetTimeouts( Critter& master, int toolPid, uint count, int newItemsPid )
    {
        master.TimeoutBase[ TO_SK_REPAIR ] = REPAIR_TIMEOUT( master );
    }

    bool OnGetTimeouts( Critter& master, int toolPid )
    {
        if( master.Timeout[ TO_SK_REPAIR ] > 0 )
        {
            return false;
        }
        return true;
    }
}
