// Autor: Cracker
// Mapper gui header
// Version: public: 1

#ifndef MAPPER_GUI
#define MAPPER_GUI

#ifndef _MAPPER_GUI
# define GUIimport                    # ( funcdecl )   import funcdecl from "mapper_gui";
#endif

namespace GUIOption
{

    #ifdef _MAPPER_GUI
    const uint LoopStep = 1;     // при 0 отключает динамические экраны и лупэвенты.
    const uint CheckDynamicScreenMs = 1;
    #endif
    #ifndef _MAPPER_GUI
    GUIimport( const uint __GetLoopStep() )
    GUIimport( const uint __GetCheckDynamicScreenMs() )

    const uint CheckSynamicScreenMs
    {
        get
        {
            return __GetCheckDynamicScreenMs();
        }
    }

    const uint LoopStep
    {
        get
        {
            return __GetLoopStep();
        }
    }
    #endif

}

#define SDKV357
#define FIX_LOAD_SPRITE

#ifdef SDKV357
# define SINFACE                      shared interface
#endif
#ifndef SDKV357
# define SINFACE                      interface
#endif

#define IS_COLLISION                  # ( x1, y1, x2, y2, w, h )( ( x1 ) >= ( x2 ) && ( x1 ) <= ( x2 ) + ( w ) && ( y1 ) >= ( y2 ) && ( y1 ) <= ( y2 ) + ( h ) )
#define IS_COLLISION_SCREEN           # ( x, y, screen )( IS_COLLISION( x, y, screen.MonitorX, screen.MonitorY, screen.Width, screen.Height ) )
#define IS_COLLISION_ELEMENT          # ( x, y, e, screen )( IS_COLLISION( x, y, screen.MonitorX + e.PosX, screen.MonitorY + e.PosY, e.Image.Width, e.Image.Height ) )
#define IS_COLLISION_SCROLL           # ( x, y, scroll, screen )( IS_COLLISION( x, y, screen.MonitorX + scroll.MonitorX, screen.MonitorY + scroll.MonitorY, scroll.Width, scroll.Height ) )
#define IS_COLLISION_MOUSE_ELEMENT    # ( e, screen )( IS_COLLISION_ELEMENT( __MouseX, __MouseY, e, screen ) )
#define IS_COLLISION_MOUSE_SCROLL     # ( scroll, screen )( IS_COLLISION_SCROLL( __MouseX, __MouseY, scroll, screen ) )
#define IS_COLLISION_MOUSE_SCREEN     # (screen)     ( IS_COLLISION_SCREEN( __MouseX, __MouseY, screen ) )

#define PICK_PATH_DEFAULT             int(PT_ART_INTRFACE)

#include "_macros.fos"
#include "_mapper_defines.fos"
#include "_colors.fos"

enum IfaceList
{
    MAPPER_IFACE_NONE,
    #include "mapper_interface_list.fos"
    MAPPER_IFACE_END
}

funcdef uint FuncDefLoop();

#ifndef _MAPPER_GUI

GUIimport( IGUIScreen@ GUI_CreateScreen( string@ sprName, uint index ) )
GUIimport( IGUIScreen@ GUI_ShowScreen( uint index ) )
GUIimport( IGUIScreen@ GUI_HideScreen( uint index ) )
GUIimport( bool        GUI_KeyPressText( uint8 key, string& text ) )
GUIimport( bool        GUI_IsKeyPress( uint8 key ) )
GUIimport( void        GUI_DeleteScreen( uint index ) )
GUIimport( bool        AddHotKey( ICallbacHotKey@ c, string@ txt, uint8 key ) )
GUIimport( bool        AddHotKey( ICallbacHotKey@ c, string@ txt, uint8 key, uint8 IsKey ) )

GUIimport( void AddPressKeyEvent( ICallbackKey@ c ) )
GUIimport( void AddMouseMoveEvent( ICallbackMouseMove@ c ) )
GUIimport( void AddDrawEvent( IEventDraw@ c ) )
GUIimport( void AddDrawMapEvent( IEventDrawMap@ c ) )
GUIimport( void AddMouseClickEvent( IEventClickMouse@ c ) )

// GUIimport( void AddLoopEvent( const uint&in firstCall, ICallbackLoop@ c, FuncDefLoop@ func ) )
GUIimport( void AddLoopEvent( const uint& in firstCall, ICallbackLoop@ c ) )

GUIimport( bool IsMonitorScreen( int x, int y ) )
#endif

SINFACE IEventDraw                              {
    void IDraw( uint layer );
}
SINFACE IEventDrawMap                   {
    void IDrawMap();
}
SINFACE IEventClickMouse                {
    bool IEClickMouse( int click, bool downClick );
}

SINFACE ICallbackClickMouse     {
    bool IClickMouse( int click, bool downClick );
}
SINFACE ICallbackDraw                   {
    void IDraw();
}

SINFACE ICallbackHide                   {
    void Hide();
}
SINFACE ICallbackInit                   {
    void Init( bool IsFirst );
}
SINFACE ICallbackKey                    {
    bool PressKey( uint8 key, bool IsDownKey );
}
SINFACE ICallbackMouseMove              {
    void IMouseMove( int x, int y );
}

SINFACE ICallbackDrawPos                {
    void IDraw( int posX, int posY, int endX, int endY );
}

SINFACE ICallbackIsActive               {
    bool IsActive();
}

SINFACE IGUIScreen
{
    IGUIScreen@ Move( bool move );
    IGUIScreen@ DownImage( string@ sprName );
    IGUIScreen@ AnimImage( bool IsDownImage, uint timeNextFrm );
    IGUIScreen@ Position( int x, int y );
    IGUIScreen@ AddText( string@ txt, int x, int y, int w, int h, uint c, int fo, int fl );
    IGUIScreen@ AddText( string@ txt, int x, int y, uint c, int fo, int fl );
    IGUIScreen@ DrawLayer( uint layer );

    IGUIElement@ AddElement( string@ ImageName );
    IGUIScroll@  AddScroll( int x, int y, int sizeX, int siseY );

    IGUIScreen@ CallbackKey( ICallbackKey@ c );
    IGUIScreen@ CallbackClickMouse( ICallbackClickMouse@ c );
    IGUIScreen@ CallbackDrawPos( ICallbackDrawPos@c );
    IGUIScreen@ CallbackDraw( ICallbackDraw@ c );
    IGUIScreen@ CallbackInit( ICallbackInit@ c );
    IGUIScreen@ CallbackHide( ICallbackHide@ c );
    IGUIScreen@ SetDynamic( ICallbackIsActive@ c );

    IGUIScreen@ SetSkipClick( bool IsClose );
    IGUIScreen@ EscClose( bool IsClose );
    IGUIScreen@ Resize( int endX, int endY, bool IsFull = true );
    IGUIScreen@ GetPos( int& X, int& Y );
    IGUIScreen@ ClickNoFocusClose( bool IsClose );
    IGUIScreen@ WarningScreen( bool IsWarning );
    // IGUIScreen@ GetElemets	                (IGUIElement@[] es);
    // IGUIScreen@ GetBlockElemets	        (IGUIElement@[] es);
}

SINFACE IGUIElement
{
    IGUIScreen@  GetScreen();
    IGUIScroll@  GetScroll();
    IGUIElement@ SetScrollChangeOff( int newValue, IGUIScroll@ Scroll = null );
    IGUIElement@ SetScrollFlag( int flag, IGUIScroll@ Scroll = null );
    IGUIElement@ AnimImage( bool IsDownImage, uint timeNextFrm );
    IGUIElement@ DownImage( string@ sprName );
    IGUIElement@ Position( int x, int y );
    IGUIElement@ AddText( string@ txt, int x, int y, int w, int h, uint c, int fo, int fl );
    IGUIElement@ AddText( string@ txt, int x, int y, uint c, int fo, int fl );
    IGUIElement@ ChangeText( string@ txt );
    IGUIElement@ Blocking( bool IsBlocking );
    IGUIElement@ RollOver( bool isRollOver );

    IGUIElement@ CallbackClickMouse( ICallbackClickMouse@ c );
    IGUIElement@ CallbackDraw( ICallbackDraw@ c );
    IGUIElement@ CallbackDrawPos( ICallbackDrawPos@c );

    IGUIElement@ GetPos( int& X, int& Y );

}

SINFACE IGUIScroll
{
    IGUIScreen@  GetScreen();
    IGUIScroll@  SetWheelScroll( uint pix );
    IGUIScroll@  SetBorderScroll( int minOffX, int minOffY, int maxOffX, int maxOffY );
    IGUIElement@ AddElement( string@ ImageName );
    IGUIScroll@  GetIndex( uint& index );
}

SINFACE ICallbacHotKey  {
    uint8 HotKey( bool IsDownKey );
}
SINFACE ICallbackLoop   {
    uint Loop();
}

class Sprite
{
    Sprite()
    {
        Id = 0;
        Width = 0;
        Height = 0;
        FrmCount = 0;
        IsAnimation = false;
        NextTick = 0;
        TimeTick = 0;
    }

    void Load( string& name, int path )
    {
        if( name.length() > 0 )
        {
            Id = LoadSprite( name, path );
            #ifndef FIX_LOAD_SPRITE
            LoadSprite( name, path );
            #endif
        }
        else
            Id = 0;
        RefreshData();
    }

    void Load( uint nameHash, uint8 dir )
    {
        Id = LoadSprite( nameHash, dir );
        #ifndef FIX_LOAD_SPRITE
        LoadSprite( nameHash, dir );
        #endif
        RefreshData();
    }

    void LoadByIni( string& iniKey, int path )
    {
        string@ name = GetIfaceIniStr( iniKey );
        if( @name != null && name.length() > 0 )
        {
            Id = LoadSprite( name, path );
            #ifndef FIX_LOAD_SPRITE
            LoadSprite( name, path );
            #endif
        }
        else
            Id = 0;
        RefreshData();
    }

    void Draw( int x, int y )
    {
        if( Id != 0 )
        {
            if( not IsAnimation )
            {
                DrawSprite( Id, -1, x, y, 0 );
            }
            else if( FrmCount > 1 )
            {
                uint tick = GetTick();
                if( tick >= NextTick )
                {
                    NextTick += TimeTick;
                }
                DrawSprite( Id, NextTick % FrmCount, x, y, 0 );
            }
        }
    }

    void SetAnimation( uint time )
    {
        TimeTick = time;
        IsAnimation = true;
    }

    private void RefreshData()
    {
        if( Id != 0 )
        {
            Width = GetSpriteWidth( Id, 0 );
            Height = GetSpriteHeight( Id, 0 );
            FrmCount = GetSpriteCount( Id );
            IsAnimation = false;
            NextTick = 0;
            TimeTick = 0;
        }
        else
        {
            Width = 0;
            Height = 0;
            FrmCount = 0;
            IsAnimation = false;
            NextTick = 0;
            TimeTick = 0;
        }
    }

    bool IsAnimation;
    uint NextTick;
    uint TimeTick;

    uint Id;
    int  Width;
    int  Height;
    uint FrmCount;
}

enum ScrollElementFlags
{
    SEF_NO_SCROLL = -1,
    SEF_NONE,
    SEF_DIR_X,
    SEF_DIR_Y,
    SEF_DIR_XY,
    SEF_END_ENUM
}
#endif
