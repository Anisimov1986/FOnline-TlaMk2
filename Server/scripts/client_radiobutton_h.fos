#ifndef __RADIOBUTTON__
#define __RADIOBUTTON__

#include "_client_defines.fos"
#include "client_gui_h.fos"
#include "_macros.fos"
#include "_colors.fos"
#include "client_rectangle_h.fos"

interface IRadioGroupCallback  {
    void OnRadioButtonChecked( int selectedValue );
}
interface IRadioButtonCheckedChangedCallback {
    void OnCheckedChanged( int value, bool checked );
}

class RadioButtonGroup
{
    RadioButton@[] Items;

    RadioButtonGroup()
    {}

    void AddButton( Rectangle& bounds, Size& sizePic, string label, bool checkedDefault, string picChecked, string picUnchecked, uint textColor, int checkedValue )
    {
        RadioButton@ button = RadioButton( bounds, sizePic, this, label, checkedDefault, picChecked, picUnchecked, textColor, checkedValue );
        Items.insertLast( @button );
    }

    void SetRadioButtonsCallBack( IRadioGroupCallback& callback )
    {
        for( uint i = 0, l = Items.length(); i < l; i++ )
            @Items[ i ].CallbackButtonChecked = callback;
    }

    void UncheckAll()
    {
        for( uint i = 0, l = Items.length(); i < l; i++ )
            Items[ i ].ChangeChecked( false );
    }

    int GetValue()
    {
        int value = 0;
        for( uint i = 0, l = Items.length(); i < l; i++ )
        {
            if( Items[ i ].Checked )
            {
                value = Items[ i ].CheckedValue;
                break;
            }
        }
        return value;
    }

    void Init( int screenIndex )
    {
        for( uint i = 0, l = Items.length(); i < l; i++ )
            Items[ i ].Init( screenIndex );
    }
}


class RadioButton : IGUI::ElementCallbackInit, IGUI::ElementCallbackMouseClick
{
    IGUIElementOpt@                     Options;
    Rectangle@                          Bounds;
    Size@                               PictureSize;
    RadioButtonGroup@                   Group;
    IRadioGroupCallback@                CallbackButtonChecked;
    string                              Label;
    bool                                Checked;
    bool                                CheckedDefault;
    int                                 CheckedValue;
    string                              PicChecked;
    string                              PicUnchecked;
    uint                                TextColor;
    bool                                PicAlignRight;
    IRadioButtonCheckedChangedCallback@ CheckedCallBack;

    RadioButton( Rectangle & bounds, Size & sizePic, RadioButtonGroup & group, string label, bool checkedDefault, string picChecked, string picUnchecked, uint textColor, int checkedValue )
    {
        @Bounds = bounds;
        @PictureSize = sizePic;
        @Group = group;
        Label = label;
        CheckedDefault = checkedDefault;
        PicChecked = picChecked;
        PicUnchecked = picUnchecked;
        TextColor = textColor;
        CheckedValue = checkedValue;
        PicAlignRight = false;
    }

    RadioButton( Rectangle & bounds, Size & sizePic, RadioButtonGroup@ group, string label, bool checkedDefault, string picChecked, string picUnchecked, uint textColor, int checkedValue, bool alignPicRight )
    {
        @Bounds = bounds;
        @PictureSize = sizePic;
        @Group = group;
        Label = label;
        CheckedDefault = checkedDefault;
        PicChecked = picChecked;
        PicUnchecked = picUnchecked;
        TextColor = textColor;
        CheckedValue = checkedValue;
        PicAlignRight = alignPicRight;
    }

    void Init( int screenIndex )
    {
        GUI_AddScreenElement( screenIndex, PicUnchecked, Bounds.X + ( PicAlignRight ? Bounds.Width - PictureSize.Width - 5 : 0 ), Bounds.Y )
        .Position( Bounds.X + ( PicAlignRight ? Bounds.Width - PictureSize.Width - 5 : 0 ), Bounds.Y, PictureSize.Width, PictureSize.Height )
        .CallbackMouseClick( this )
        .CallbackInit( this );
        GUI_AddScreenElement( screenIndex, null, Bounds.X + ( PicAlignRight ? 0 : PictureSize.Width + 5 ), Bounds.Y )
        .Position( Bounds.X + ( PicAlignRight ? 0 : PictureSize.Width + 5 ), Bounds.Y, Bounds.Width - PictureSize.Width - 5, Bounds.Height )
        .CallbackMouseClick( this )
        .Text( Label, FONT_FALLOUT, TextColor, TextColor, 0 );
    }

    void OnInit()
    {
        @Options = GUI_GetElementOptions();
        ChangeChecked( CheckedDefault );
    }

    void OnMouseClick( int click )
    {
        if( click == MOUSE_CLICK_LEFT )
        {
            if( valid( Group ) )
                Group.UncheckAll();
            ChangeChecked( !Checked );
        }
    }

    void ChangeChecked( bool checked )
    {
        Checked = checked;
        if( valid( CheckedCallBack ) )
        {
            CheckedCallBack.OnCheckedChanged( CheckedValue, checked );
        }
        if( valid( Options ) )
        {
            if( checked )
            {
                Options.Picture( PicChecked );
                if( valid( CallbackButtonChecked ) )
                    CallbackButtonChecked.OnRadioButtonChecked( CheckedValue );
            }
            else
                Options.Picture( PicUnchecked );
        }
    }

    void SetCheckedCallback( IRadioButtonCheckedChangedCallback& callback )
    {
        @CheckedCallBack = callback;
    }
}

#endif // __RADIOBUTTON__
