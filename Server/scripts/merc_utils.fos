// Merc Utils
// For use with rifleman17's mercs.fos module.
// Author: kamex

#include "_msgstr.fos"

uint16 GetLength( uint16 hX, uint16 hY, uint16 HX, uint16 HY )
{
    return uint16( sqrt( POW2( hX - HX ) + POW2( hY - HY ) ) );
}

#define MAX_MERC        ( 5 )

#include "_npc_pids.fos"
#include "_ai.fos"
#define DLG_ID          ( 21002 )
#define  ITEM_WEAPON    ( 3 )
#include "combat_h.fos"

uint[] unallowed_locations = { 1, 2, 3, 4, 5, 6, 7, 9, 10, 13, 14, 16, 17, 22 };       // Ћокации на которых мерки не будут атаковать.



const uint16[] slave_list =
{
    202, 203, 204, 205, 206, 207, 208, 210, 63, 64, 67, 68, 53, 54, 65, 66, 114, 219, 17, 22, 27,
    28, 217, 218, 19, 20, 50, 51, 63, 64, 65, 66, 236, 237, 508, 509, 510, 511, 512, 513, 514, 515
};

bool _CanBeEnslaved( Critter& crit )  // check if crit pid is correct
{

    if( crit.IsPlayer() || IsMerc( crit ) || crit.IsDead() )
        return false;

    int  bt = crit.Stat[ ST_BODY_TYPE ];
    bool animal = ( bt == BT_BRAHMIN || bt == BT_DOG );

    Map@ map = crit.GetMap();
    if( !valid( map ) )
        return false;
    Location@ loc = map.GetLocation();
    if( !valid( loc ) )
        return false;
    if( !loc.AutoGarbage )
        return false;
    uint locPid = loc.GetProtoId();
    if( ( locPid < LOCATION_DesertEncounter1 || locPid > LOCATION_OceanEncounter3 ) &&
        ( locPid < LOCATION_e_desertj_road_9 || locPid > LOCATION_e_desert_juno_road_19 ) )
    {
        Log( "wrong loc" );
        return false;
    }
    for( uint i = 0, iMax = slave_list.length(); i < iMax; i++ )
        if( crit.GetProtoId() == slave_list[ i ] )
            return true;

    // Log("wrong pid:"+crit.GetProtoId());
    return animal;
}

int count_mercs( Critter& player )
{

    Critter@[] mercs;
    uint count = 0;

    if( !valid( player ) )
        return 11;
    GetPlayerMercs( player, mercs );
    for( int i = 0, iMax = mercs.length(); i < iMax; i++ )
        if( valid( mercs[ i ] ) && !mercs[ i ].IsDead() )
            count++;

//	Log("Mercs count:"+count);
    return count;

}


void _RopeInit( Item& item, bool firstTime )
{
    // item.SetEvent(ITEM_EVENT_USE ,"_UsedOnSlave");  /// register use event
}


void drop_events( Critter@ npc )
{
    npc.SetScript( "" );
    npc.SetEvent( CRITTER_EVENT_MESSAGE, ""    );
    npc.SetEvent( CRITTER_EVENT_DEAD, ""       );
    npc.SetEvent( CRITTER_EVENT_SMTH_DEAD, ""   );
    npc.SetEvent( CRITTER_EVENT_SMTH_USE_SKILL, "" );
    npc.SetEvent( CRITTER_EVENT_PLANE_END, ""   );
    npc.SetEvent( CRITTER_EVENT_STEALING, ""   );
    npc.SetEvent( CRITTER_EVENT_HIDE_CRITTER, "" );
    npc.SetEvent( CRITTER_EVENT_SMTH_USE_ITEM, "" );
    npc.SetEvent( CRITTER_EVENT_SMTH_DROP_ITEM, "" );
}

bool CanGetSlave( Critter& crit )
{
    return ( crit.Stat[ ST_STRENGTH ] / 2 + 1 ) > count_mercs( crit );
}

bool _UsedOnSlave( Item& item, Critter& crit, Critter@ onCritter, Item@ onItem, Scenery@ onScenery )
{
    if( _CanBeEnslaved( onCritter ) && ( crit.Stat[ ST_STRENGTH ] / 2 + 1 ) > count_mercs( crit ) )
    {
        if( item.GetProtoId() == PID_ROPE && !onCritter.IsKnockout() )
            return false;
        if( crit.Merc[ MASTER_COUNT_MERC ] < MAX_MERC )
        {
            crit.DeleteItem( item.GetProtoId(), 1 );
            onCritter.ParamBase[ ST_CURRENT_HP ] = onCritter.Param[ ST_MAX_LIFE ];
            merc2plr( crit, onCritter );
            // crit.SayMsg(SAY_NETMSG,TEXTMSG_TEXT,STR_ENSLAVED);
            EraseAnyData( "mob_in_enc" + onCritter.Id );
            return true;
        }
    }
    return false;
}

void get_best_weapon( Critter@ cr )
{
    cr.ModeBase[ MODE_NO_FAVORITE_ITEM ] = 0;
    Item@[] items;

    cr.GetItemsByType( ITEM_WEAPON, items );

    for( uint i = 0, iMax = items.length(); i < iMax; i++ )
        if( valid( items[ i ] ) && cr.IsAnim1( items[ i ].Proto.Weapon_Anim1 ) )        // animation check thnx 2 Cracker :3
        {
            cr.MoveItem( items[ i ].Id, 1, SLOT_HAND1 );
            reload_weapon( cr, items[ i ] );
			#ifndef __NO_FAVORIT_ITEMS
            cr.SetFavoriteItem( SLOT_HAND1, items[ i ].GetProtoId() );
			#endif
            cr.StatBase[ ST_LAST_WEAPON_ID ] = items[ i ].Id;
            return;
        }

}

bool reload_weapon( Critter@ cr, Item@ weapon )
{
    Item@[] items;
    cr.GetItemsByType( ITEM_TYPE_AMMO, items );
    if( !valid( weapon ) )
        return false;

    for( uint i = 0, iMax = items.length(); i < iMax; i++ )
        if( valid( items[ i ] ) && weapon.Proto.Weapon_Caliber == items[ i ].Proto.Ammo_Caliber )
        {
            uint count = MIN( items[ i ].GetCount(), weapon.Proto.Weapon_MaxAmmoCount - weapon.AmmoCount );
            weapon.AmmoCount += count;
            weapon.AmmoPid = items[ i ].GetProtoId();
            _SubItem( items[ i ], count );
            // Log("reloaded weapon!");
            weapon.Update();
            cr.Action( ACTION_RELOAD_WEAPON, 0, weapon );
            return true;
        }

    return false;


}

void put_down_weapon( Critter@ cr )
{
    Item@[] items;
    cr.GetItems( SLOT_HAND1, items );

    for( uint i = 0, iMax = items.length(); i < iMax; i++ )
        if( valid( items[ i ] ) )
            cr.MoveItem( items[ i ].Id, items[ i ].GetCount(), SLOT_INV );
    cr.StatBase[ ST_LAST_WEAPON_ID ] = -1;

    cr.ModeBase[ MODE_NO_FAVORITE_ITEM ] = 1;
}

void check_doorDist( Critter& cr )
{
    Map@ map = cr.GetMap();
    if( !valid( map ) )
        return;


    Item@[] doors;
    map.GetItemsByType( ITEM_TYPE_DOOR, doors );



    uint16 mindist = 4;

    uint16 mhexX;
    uint16 mhexY;

    for( uint i = 0, iMax = doors.length(); i < iMax; i++ )
        if( valid( doors[ i ] ) )
        {
            if( mindist > GetLength( doors[ i ].HexX, doors[ i ].HexY, cr.HexX, cr.HexY ) )
            {
                mindist = GetLength( doors[ i ].HexX, doors[ i ].HexY, cr.HexX, cr.HexY );
                mhexX = doors[ i ].HexX;
                mhexY = doors[ i ].HexY;
            }
        }

    if( mindist > 0 && mindist < 2 )
    {
        cr.MercBase[ MERC_WAIT_FOR_MASTER ] = 0;
        // cr.SayMsg(SAY_NORM_ON_HEAD,TEXTMSG_COMBAT,STR_PROTEST);

    }


}

int _PlaneBegin( Critter& cr, NpcPlane& plane, int reason, Critter@ someCr, Item@ someItem )    // обработчкик планов.
{

    if( plane.Type == AI_PLANE_ATTACK || plane.Type == AI_PLANE_WALK )
    {

        Map@ map = cr.GetMap();
        if( !valid( map ) )
            return PLANE_DISCARD;
        Location@ loc = map.GetLocation();
        if( !valid( loc ) )
            return PLANE_DISCARD;
        uint locPid = loc.GetProtoId();



        // Log("ќбрабатываем план:"+plane.Type);

        if( plane.Type == AI_PLANE_ATTACK )
        {

            // Critter @[] Group;
            // Critter@ Leader=GetCritter (cr.MasterId);
            Critter@ Attacked = GetCritter( plane.Attack_TargId );

            if( !valid( Attacked ) )
                return PLANE_RUN_GLOBAL;

            // не атакуем если запрещено.
            //	if	(cr.MercBase[MERC_ASSIST_MASTER]<1 && cr.MercBase[MERC_DEFEND_MASTER]<1) return PLANE_DISCARD;

            if( d_NpcIsPlayerMerc( Attacked, cr ) )                     // не атакуем хоз€ина.
                return PLANE_DISCARD;

            /*for(uint i=0, iMax=unallowed_locations.length(); i<iMax; i++)
               if(locPid==unallowed_locations[i])
               {
                    return PLANE_DISCARD;		// не атакуем в городах.
               }*/
            // TabaK. Убрал заглушку. Гварды справятся, а возможности режет.

            // TabaK. И это убрал - любой может зацепиться и раб не станет его атаковать.
            /*if(valid(Leader))
               {
                    Leader.GetFollowGroup(FIND_LIFE,Group);
                    for(uint i=0, iMax=Group.length(); i<iMax; i++)		// не атакуем группу хоз€ина.
                            if(Attacked.Id==Group[i].Id)
                                    return PLANE_DISCARD;
               }*/
        }
    }
    return PLANE_RUN_GLOBAL;
}

void unsafe_cmd( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Critter@[] mercs;
    Map@ map = player.GetMap();
    if( !validEngineObject( map ) )
        return;
    Critter@ crt = map.GetCritter( param0, param1 );
    bool     hasmerc = false;
    if( !validEngineObject( crt ) )
        return;

    GetPlayerMercs( player, mercs );
    for( int i = 0, iMax = mercs.length(); i < iMax; i++ )
        if( validEngineObject( mercs[ i ] ) && !mercs[ i ].IsDead() )
        {
            hasmerc = true;
            break;
        }
    if( hasmerc && !player.IsDead() )
        player.RunClientScript( "client_main@ShowMercScreen", 0, 0, 0, null, null );
}


void unsafe_MercCmd( Critter& player, int hx, int hy, int action, string@ param3, int[] @ ids )
{
    Critter@[] critters;
    Map@     map = player.GetMap();
    Critter@ crt = map.GetCritter( hx, hy );
    uint     id = valid( crt ) ? crt.Id : 0;

    NpcPlane@[] planes;

    if( @map == null )
        return;

    if( valid( ids ) && ids.length() > 0 )
    {
        for( uint n = 0; n < ids.length(); n++ )
        {
            Critter@ cr = GetCritter( ids[ n ] );
            if( valid( cr ) && cr.IsNpc() && uint( cr.Merc[ MERC_MASTER_ID ] ) == player.Id )
            {
                critters.insertLast( @cr );
            }
        }
    }
    else
        GetPlayerMercs( player, critters );

    int reason = action == 1 ? 0 : 1;
    if( action > 1 )
        MarkTarget( player, 0, 2, 0, null, ids );
    else
        MarkTarget( player, id, reason, hx | ( hy << 16 ), null, ids );

    for( int i = 0, iMax = critters.length(); i < iMax; i++ )
    {
        if( @critters[ i ] == null || critters[ i ].IsPlayer() )
            continue;
        switch( action )
        {
        case 0:
            if( valid( crt ) )
            {
                AddAttackPlane( critters[ i ], AI_PLANE_ATTACK_PRIORITY, crt );
                player.EventAttack( crt );
                critters[ i ].EventAttack( crt );
            }
            break;
        case 1:
            critters[ i ].DropPlanes();
            critters[ i ].MercBase[ MERC_WAIT_FOR_MASTER ] = 2;
            AddWalkPlane( critters[ i ], AI_PLANE_WALK_PRIORITY, hx, hy, GetDir( critters[ i ], player ), true, 1 );
            break;
        case 2:
            critters[ i ].DropPlanes();
            critters[ i ].MercBase[ MERC_WAIT_FOR_MASTER ] = 0;
            critters[ i ].ClearEnemyStack();
            break;
        default:
            break;
        }
    }

}

/* For use in dialogs / ƒл€ диалогов */
// результаты / results

void r_DoNotHelp( Critter& master, Critter@ slave )
{
    slave.MercBase[ MERC_ASSIST_MASTER ] = 0;
    slave.MercBase[ MERC_DEFEND_MASTER ] = 0;
}


void r_AssistMaster( Critter& master, Critter@ slave )
{
    slave.MercBase[ MERC_ASSIST_MASTER ] = 1;
}

void r_DefendMaster( Critter& master, Critter@ slave )
{
    slave.MercBase[ MERC_DEFEND_MASTER ] = 1;
}

void r_EnableBarter( Critter& player, Critter @ slave )
{
    slave.ModeBase[ MODE_NO_BARTER ] = 0;
}

void r_DisableBarter( Critter& player, Critter @ slave )
{
    slave.ModeBase[ MODE_NO_BARTER ] = 1;
}

void r_IncBSkill( Critter& master, Critter@ slave )
{
    if( slave.Skill[ SK_BARTER ] < 300 )
        slave.SkillBase[ SK_BARTER ] += 50;
}

void r_DecBSkill( Critter& master, Critter@ slave )
{
    if( slave.Skill[ SK_BARTER ] > 50 )
        slave.SkillBase[ SK_BARTER ] -= 50;
}


void r_ShowInv( Critter& player, Critter@ npc )
{
    if( valid( npc ) )
        player.ShowContainer( npc, null, TRANSFER_FAR_CRIT );
}

void r_HideWeapon( Critter& player, Critter@ npc )
{
    put_down_weapon( npc );
}

void r_DrawWeapon( Critter& player, Critter@ npc )
{
    get_best_weapon( @npc );
}

void r_GiveMerc( Critter& player, Critter@ npc )
{
    player.ShowScreen( SCREEN_SAY, 0, "give_merc" );
    player.SayMsg( SAY_SAY_TITLE, TEXTMSG_TEXT, 104072 );
    npc.MercBase[ MERC_GIVEN ] = 1;
}

// услови€ // demand
bool d_Armed( Critter& crit, Critter@ slave ) // inversion // инверси€
{
    Item@[] items;
    if( slave.GetItems( SLOT_HAND1, items ) > 0 )
        return true;
    else
        return false;
}

bool d_UnArmed( Critter& crit, Critter@ slave ) // inversion // инверси€
{
    Item@[] items;
    if( slave.GetItems( SLOT_HAND1, items ) < 1 )
        return true;
    else
        return false;
}

bool d_NotFollowing( Critter& crit, Critter@ slave ) // inversion // инверси€
{
    if( slave.Merc[ MERC_WAIT_FOR_MASTER ] == 1 )
        return true;
    return false;
}

bool d_Following( Critter& crit, Critter@ slave ) // inversion // инверси€
{
    if( slave.Merc[ MERC_WAIT_FOR_MASTER ] == 0 || slave.Merc[ MERC_WAIT_FOR_MASTER ] == 2 )
        return true;
    return false;
}

bool d_NotDefendingMasted( Critter& crit, Critter@ slave ) // inversion // инверси€
{
    if( !( slave.Merc[ MERC_DEFEND_MASTER ] > 0 ) )
        return true;
    return false;
}

bool d_NotAssistingMasted( Critter& crit, Critter@ slave ) // inversion // инверси€
{
    if( !( slave.Merc[ MERC_ASSIST_MASTER ] > 0 ) )
        return true;
    return false;
}

bool d_DefendingorAssisting( Critter& crit, Critter@ slave ) // inversion // инверси€
{
    if( slave.Merc[ MERC_DEFEND_MASTER ] == 1 || slave.Merc[ MERC_ASSIST_MASTER ] == 1 )
        return true;
    return false;
}

bool d_CanTrade( Critter& crit, Critter@ slave ) // check if container spawned // проверка создан ли контейнер
{
    if( !valid( crit ) )
        return false;
    if( slave.Mode[ MODE_NO_BARTER ] == 0 )
        return true;
    return false;
}

bool d_CanNotTrade( Critter& crit, Critter@ slave ) // inversion // инверси€
{
    if( !valid( crit ) )
        return false;
    if( slave.Mode[ MODE_NO_BARTER ] == 1 )
        return true;
    return false;
}

void give_merc( Critter& cr, uint answerI, string& answerS )
{
    Critter@[] mercs;
    GetPlayerMercs( cr, mercs );
    Critter@ crit = GetPlayer( answerS );
    uint     give_count = 0;

    if( answerS.length() > 2 && answerS.length() < 20 && valid( crit ) && valid( cr ) && !crit.IsDead() && crit.IsPlayer() && ( crit.Stat[ ST_STRENGTH ] / 2 + 1 ) > count_mercs( crit ) && crit.Merc[ MASTER_COUNT_MERC ] < MAX_MERC )
    {
        for( int i = 0, iMax = mercs.length(); i < iMax; i++ )
        {
            if( !valid( mercs[ i ] ) || mercs[ i ].GetMapId() != crit.GetMapId() || mercs[ i ].IsDead() )
                mercs[ i ].MercBase[ MERC_GIVEN ] = 0;
            else
                give_count++;
        }
    }
    else
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, 104073 );
        for( int i = 0, iMax = mercs.length(); i < iMax; i++ )
            if( valid( mercs[ i ] ) )
                mercs[ i ].MercBase[ MERC_GIVEN ] = 0;
        return;
    }

    if( give_count < 1 )
        return;

    for( int i = 0, iMax = mercs.length(); i < iMax; i++ )
        if( valid( mercs[ i ] ) && !mercs[ i ].IsDead() && mercs[ i ].Merc[ MERC_GIVEN ] == 1 && ( crit.Stat[ ST_STRENGTH ] / 2 + 1 ) > count_mercs( crit ) )
        {
            merc2plr( crit, mercs[ i ] );
            mercs[ i ].MercBase[ MERC_GIVEN ] = 0;
        }
}

bool merc2plr( Critter& crit, Critter@ onCritter )
{
    if( !valid( onCritter ) )
        return false;

    if( onCritter.Id == crit.Id )
    {
        Log( "Wrong mercenary master... Merc creation failed" );
        return false;
    }


    onCritter.SetMaster = crit;
    if( uint( onCritter.Merc[ MERC_MASTER_ID ] ) == crit.Id )
    {
        int  bt = onCritter.Stat[ ST_BODY_TYPE ];
        bool animal = ( bt == BT_BRAHMIN || bt == BT_DOG );
        onCritter.MercBase[ MERC_TYPE ] = MERC_FOLLOWER_HARMLESS;
        onCritter.MercBase[ MERC_CANCEL_ON_ATTACK ] = ( _MercCancelOnMasterAttack( MERC_FOLLOWER_HARMLESS ) > 0 ) ? 1 : 0;
        onCritter.MercBase[ MERC_LOSE_DIST ] = _MercLoseDist( MERC_FOLLOWER_HARMLESS );
        onCritter.MercBase[ MERC_MASTER_DIST ] = MMDistShort;
        onCritter.MercBase[ MERC_DEFEND_MASTER ] = ( _MercDefendMaster( MERC_FOLLOWER_HARMLESS ) > 0 ) ? 1 : 0;
        onCritter.MercBase[ MERC_ASSIST_MASTER ] = ( _MercAssistMaster( MERC_FOLLOWER_HARMLESS ) > 0 ) ? 1 : 0;
        onCritter.MercBase[ MERC_CANCEL_TIME ] = __FullSecond + FIRE_TIME;
        onCritter.StatBase[ ST_TEAM_ID ] = crit.StatBase[ ST_TEAM_ID ];

        drop_events( onCritter );
        if( animal )
        {
            crit.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, 100014, "$name" + onCritter.GetProtoId() * 10 );
        }
        else
            crit.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_SLAVE_GIVEN );
        Merc2Player( crit, onCritter, MERC_FOLLOWER_HARMLESS );

        onCritter.DropPlanes();
        onCritter.ClearEnemyStack();
        onCritter.StatBase[ ST_TEAM_ID ] = crit.StatBase[ ST_TEAM_ID ];
        onCritter.StatBase[ ST_FACTION ] = crit.StatBase[ ST_FACTION ];
        if( !animal )
        {
            onCritter.StatBase[ ST_DIALOG_ID ] = DLG_ID;
            onCritter.MercBase[ MERC_IS_SLAVE ] = 1;
        }
        onCritter.MercBase[ MERC_WAIT_FOR_MASTER ] = 0;
        onCritter.MercBase[ MERC_GIVEN ] = 0;
        onCritter.MercBase[ MERC_ALWAYS_RUN ] = 1;
        onCritter.SetScript( "merc@_mercInit" );
        return true;
    }
    return false;
}

void _mercInit( Critter& merc, bool firstTime )
{
    int  bt = merc.Stat[ ST_BODY_TYPE ];
    bool animal = ( bt == BT_BRAHMIN || bt == BT_DOG );
    merc.SetEvent( CRITTER_EVENT_IDLE, "merc@e_MercIdle" );   // ќб€зательный скрипт. ¬ нем контролируетс€ положение мерка относительно игрока
    merc.SetEvent( CRITTER_EVENT_PLANE_BEGIN, "merc@_PlaneBegin" );
    merc.SetEvent( CRITTER_EVENT_SMTH_DEAD, "merc@e_MercSmthDead" );
    merc.SetEvent( CRITTER_EVENT_ATTACK, "merc@e_MercAttack" );
    merc.SetEvent( CRITTER_EVENT_ATTACKED, "merc@e_MercAttacked" );
    merc.SetEvent( CRITTER_EVENT_DEAD, "merc@e_MercDead" );
    merc.SetEvent( CRITTER_EVENT_SMTH_ATTACKED, "merc@e_MercSmthAttacked" );
    merc.SetEvent( CRITTER_EVENT_GLOBAL_PROCESS, "merc@_MercGlobalProcess" );
    merc.SetEvent( CRITTER_EVENT_HIDE_CRITTER, "merc@_MercHideCritter" );
    merc.SetEvent( CRITTER_EVENT_FINISH, "merc@_DeleteMerc" );

    if( merc.MercBase[ MERC_WAIT_FOR_MASTER ] == 1 )
    {
        merc.ModeBase[ MODE_GECK ] = 0;
        merc.MercBase[ MERC_CANCEL_ON_GLOBAL ] = 1;
    }
    else
    {
        merc.MercBase[ MERC_CANCEL_ON_GLOBAL ] = 0;
        merc.ModeBase[ MODE_GECK ] = 1;
    }

    merc.StatBase[ ST_REPLICATION_TIME ] = -1;
    merc.ModeBase[ MODE_GECK ] = 0;
    merc.ModeBase[ MODE_NO_ENEMY_STACK ] = 1;
    merc.ModeBase[ MODE_NO_BARTER ]  = 1;
    merc.ModeBase[ MODE_NO_HOME ] = 1;
    if( !animal )
    {
        merc.MercBase[ MERC_IS_SLAVE ] = 1;
        merc.StatBase[ ST_AI_ID ] = AIPACKET_GENERIC_GUARDS;
    }
    merc.ModeBase[ MODE_NO_FAVORITE_ITEM ] = 1;
}

void _DeleteMerc( Critter& cr, bool deleted )
{
    if( deleted )
    {
        mercDelete( cr );
    }
}

#include "_offplayer.fos"
void mercDelete( Critter& merc )
{
    uint     id = uint( merc.Merc[ MERC_MASTER_ID ] );
    Critter@ master = GetCritter( id );
    if( valid( master ) )
    {
        master.DeleteMerc( merc );
        if( merc.Merc[ MERC_IS_SLAVE ] != 0 )
            master.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, 104074 );
    }
}

/*  Debug */
// ~run merc Merc2 id 0 0
void Merc2( Critter& cr, int mercId, int ld, int )
{
    Critter @ merc = GetCritter( mercId );
    if( valid( merc ) )
        merc2plr( cr, merc );
}
/* debug end */

bool LocIsMercWait( uint pid )
{
    if( pid >= LOCATION_SpecialFirstSpecial && pid <= LOCATION_Quest_Hub_Lab )
        return false;
    return true;
}

/*
   void SetName(Critter& cr,int id,int, int)
   {

        cr.NameStr="ЋќЋќ„ ј!!";

   }*/
