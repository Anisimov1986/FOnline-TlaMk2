// Author rifleman17
// Событие ластстенд арена "Испытание кровью"
// Чтобы отключить арену, нужно установить глобальной переменной GVAR_laststand_arena_active(23) значение 0
// Для того, чтобы раз в чат выдавать на 0 канале рекламу арены, GVAR_laststand_arena_announce должно быть = 1
#include "_macros.fos"
#include "entire.fos"



#define BRACKET_LOW_FROM       ( 15 )  // Нижняя граница брекета для нубов
#define BRACKET_HIGH_FROM      ( 35 )  // Нижняя граница брекета для отцов

#define LOCATION_LASTSTAND1    ( 360 ) // Первая локация для арены

#define WORLD_X                ( 925 )
#define WORLD_Y                ( 925 )

// #define ARENA_BONUS           (10)


#define ARENA_CHANNEL          ( 22 )     // Номер радиоканала, на котором идут сообщения по арене

#define MSG_LOWLWL             ( 150200 ) // Слишком низкий уровень. На арену допускаются персонажи 15 уровня и выше.
#define MSG_NOWINNER           ( 150201 ) // Время истекло. Арена закончена. Победителей нет.
#define MSG_ITEMSTAKEN         ( 150202 ) // Вещи, которые были в вашем рюкзаке, вы сможете забрать в банке Нью-Рено.
#define MSG_ARENA              ( 150203 ) // Внимание! Начался бой на арене семьи Бишопов! Бой продолжается до последнего, оставшегося в живых! Пусть победит сильнейший!
#define MSG_ARENABEGIN         ( 150204 ) // Бой начался! Останьтесь единственным выжившим на этой карте, чтобы заработать кредиты! Оружие и броню ищите поблизости. Удачи.
#define MSG_WIN                ( 150205 ) // Бой на арене Бишопов завершен! Победитель @lex winner@
#define MSG_BONUS              ( 150206 ) // Вы победили на арене! Начислено кредитов: @lex bonus@.
#define MSG_INVITED            ( 150207 ) // Ваша заявка на участие в поединке "Остаться в живых" принята! При начале поединка, если будет достаточное количество участников, вы будете перенесены на локацию арены. Все вещи персонажа будут перемещены в банк Нью-Рено.
#define MSG_INFO               ( 150208 ) // Семья Бишопов приглашает уверенных в своих силах бойцов принять участие в групповом поединке "Остаться в живых!" Подробности узнаете на канале @lex channel@! Пусть победит сильнейший!
#define MSG_INFO2              ( 150209 ) // Запись на следующую арену "Остаться в живых" открыта! Чтобы подать заявку на участие, отправьте сообщение с помощью рации на @lex channel@ канале. Текст сообщения должен начинаться с кодовой фразы INVITE ME (в верхнем регистре).
#define MSG_INFO3              ( 150210 ) // В момент начала поединка вы будете перемещены на арену в Нью-Рено. Все ваши вещи будут сохранены в целости и безопасности в местном банке.
#define MSG_INFO4              ( 150211 ) // Задача поединка - ВЫЖИТЬ! Сражение на арене длится 7 минут. Если к этому времени на арене выживает только один, ему начисляется награда в количестве @lex bonus@ кредитов.
#define MSG_ALREADYINVITED     ( 150212 ) // Вы уже записались на арену. Начало боя: @lex time@.
#define MSG_TOOSTRONG          ( 150213 ) // Вы слишком сильны. Это не оставляет шанса на победу остальным.
#define MSG_INFO5              ( 150214 ) // Зарегистрирован новый участник: @lex name@. (@lex level@)
#define MSG_ARENATIMEOUT       ( 150215 ) // В настоящее время бои на арене не проводятся. Время начала следующей серии боев: @lex time@.
#define MSG_NEXTARENA          ( 150216 ) // Время начала следующего боя на арене: @lex time@.
#define MSG_NOAREA_TOPLACE_CAR( 150217 )  // Невозможно найти свободное место для транспортного средства. Попробуйте в другой раз.
#define MSG_ADDED_CREDITS      ( 150218 ) // Получено кредитов: @lex value@
#define MSG_WRONG_LOCATION     ( 150219 ) // Из этой локации невозможен перенос на арену.

// #define LASTSTAND_TIME #(locPid)       (REAL_MINUTE(15)) // Время, которое длится одно БГ

#define CAN_TRANSIT_TOARENA    # (locPid) ( locPid != LOCATION_Novato )

import Item@ GetBankContainer( Map@ map ) from "Mk2";
import void  DropPoison( Critter& cr ) from "Mk2";
import void  respItem( Map& map, Item@[] containers, int entire, bool deleteOldItems ) from "farm_location";
import bool  GetFreeHex( Map& map, uint radius, uint16& hx, uint16& hy ) from "caravan";

int ARENA_BONUS( int locPid )
{
    switch( locPid )
    {
    case LOCATION_LS1:
        return 11;
    case LOCATION_LS4:
        return 8;
    default:
        return 5;
    }
    return 5;
}
int LASTSTAND_TIME( int locPid )
{
    switch( locPid )
    {
    case LOCATION_LS1:
        return REAL_MINUTE( 15 );
    case LOCATION_LS4:
        return REAL_MINUTE( 11 );
    default:
        REAL_MINUTE( 7 );
    }
    return REAL_MINUTE( 7 );
}
int TimeNextArena = 0; // Время следующей арены.

// Проверка реального времени, попадает ли текущее серверное время в диапазон
bool IsTimeValidForArena()
{
    // Предлагаю сделать 14-15, 17-18, 21-22, 00-01
    uint16[] time = { 0, 0, 0, 0, 0, 0, 0, 0 };
    GetTime( time[ 0 ], time[ 1 ], time[ 2 ], time[ 3 ], time[ 4 ], time[ 5 ], time[ 6 ], time[ 7 ] );
    // _2013_8_25_0_1_6_17_766
    // 25 08 2013 01 06 18
    uint16 hour = time[ 4 ];
    // Log("cur hour " + hour);
    return ( hour == 14 || hour == 17 || hour == 21 || hour == 0 || hour == 24 );
}

uint e_ArenaAnnounce( uint[] @ values )
{
    GameVar@ active = GetGlobalVar( GVAR_laststand_arena_active );
    GameVar@ annonce = GetGlobalVar( GVAR_laststand_arena_announce );
    if( valid( active ) && ( active > 0 ) && valid( annonce ) && ( annonce > 0 ) && IsTimeValidForArena() )
    {
        Critter@[] players;
        if( GetAllPlayers( players ) > 0 )
        {
            GameVar@ qVar;
            for( int i = 0, l = players.length(); i < l; i++ )
            {
                Critter@ p = players[ i ];
                if( valid( p ) )
                {
                    @qVar = GetLocalVar( LVAR_q_nr_laststand_arena, p.Id );
                    if( valid( qVar ) && qVar == 0 )
                        qVar = 1;
                }
            }
        }
        RadioMessageMsg( 0, TEXTMSG_TEXT, MSG_INFO, "$channel" + ARENA_CHANNEL );
    }
    return 0;
}

bool ServerMessageSent = false;


uint e_Arena( uint[] @ values )
{
    GameVar@ active = GetGlobalVar( GVAR_laststand_arena_active );
    if( valid( active ) && active > 0 && IsTimeValidForArena() )
    {

        RadioMessageMsg( ARENA_CHANNEL, TEXTMSG_TEXT, MSG_INFO2, "$channel" + ARENA_CHANNEL );
        RadioMessageMsg( ARENA_CHANNEL, TEXTMSG_TEXT, MSG_INFO3 );
        RadioMessageMsg( ARENA_CHANNEL, TEXTMSG_TEXT, MSG_INFO4, "$bonus" + "5..11" );
        ListenChannel();
        RunArena();
        if( !ServerMessageSent )
        {
            ServerMessageSent = true;
            Critter@[] players;
            if( GetAllPlayers( players ) > 0 )
            {
                for( int i = 0, l = players.length(); i < l; i++ )
                {
                    Critter@ p = players[ i ];
                    if( valid( p ) && p.Stat[ ST_LEVEL ] > 15 )
                    {
						if( p.GetLanguage() == 0 )
							p.RunClientScript( "Mk2@ListingPlayers::SetMessage", 0, 0, 0, "Серия боев на арене \"Остаться в живых\" открыта! Отправьте INVITE ME на 22 радиоканале. ", null );
                        else 
							p.RunClientScript( "Mk2@ListingPlayers::SetMessage", 0, 0, 0, "Last Man Standing fights have begun! Send INVITE ME to 22 radio channel.", null );
                    }
                }
            }
        }

    }
    else
    {
        if( ServerMessageSent )
        {
            ServerMessageSent = false;
            Critter@[] players;
            if( GetAllPlayers( players ) > 0 )
            {
                for( int i = 0, l = players.length(); i < l; i++ )
                {
                    Critter@ p = players[ i ];
                    if( valid( p ) )
                        p.RunClientScript( "client_main@_message", 0, 0, 0, "gl", null );
                }
            }
        }
        orders.resize( 0 );
    }
    return 0;
}
// Таблица с Id заявок
uint16[] orders;

// TODO: выбор различных локаций, взависимости от числа участников
int GetArenaLocationProto( uint playersCount )
{
    if( playersCount <= 15 )
        return LOCATION_LS2;
    if( playersCount < 25 )
        return LOCATION_LS4;

    return LOCATION_LS1;
}



string GetTimeLexems()
{
    if( !IsTimeValidForArena() )
    {
        uint16[] time   = { 0, 0, 0, 0, 0, 0, 0, 0 },
        limits = { 0, 14, 17, 21, 24 };
        GetTime( time[ 0 ], time[ 1 ], time[ 2 ], time[ 3 ], time[ 4 ], time[ 5 ], time[ 6 ], time[ 7 ] );
        // (hour == 14 || hour == 17 || hour == 21 || hour == 0 || hour == 24);

        uint16 nextLimit = time[ 4 ];
        for( uint i = 0, l = limits.length(); i < l; i++ )
            if( time[ 4 ] < limits[ i ] )
            {
                nextLimit = limits[ i ];
                break;
            }

        // если минуты != 0, час сокращаем
        if( time[ 5 ] != 0 )
            time[ 4 ]++;

        // Log("next hour " + (nextLimit - time[4]) + "; minute" + (60-time[5]));
        int nextTime = REAL_HOUR( nextLimit - time[ 4 ] ) + REAL_MINUTE( 60 - time[ 5 ] );
        TimeNextArena = __FullSecond + nextTime;
        // _2013_8_25_0_1_6_17_766
        // 2013 08 25 Воскр 01 06 18

    }
    if( TimeNextArena < int(__FullSecond) )
        return "$timeN/A";
    uint16 year = 0;
    uint16 month = 0;
    uint16 dayOfWeek = 0;
    uint16 day = 0;
    uint16 hour = 0;
    uint16 minute = 0;
    uint16 second = 0;
    GetGameTime( TimeNextArena, year, month, day, dayOfWeek, hour, minute, second );
    return "$time" + ( month > 9 ? ( "" + month ) : ( "0" + month ) ) + "." + day + " " + ( hour > 9 ? ( "" + hour ) : ( "0" + hour ) ) + ":" + ( minute > 9 ? ( "" + minute ) : ( "0" + minute ) );
}

// Запуск двух арен для нубов и для отцов
void RunArena()
{
    uint[]  playersLow,      // счетчик доступных заявок от нубов
    playersHigh;             // счетчик доступных заявок от отцов
    int level;
    TimeNextArena = __FullSecond + REAL_MINUTE( 10 );
    for( uint i = 0, l = orders.length(); i < l; i++ )
    {
        Critter@ p = GetCritter( orders[ i ] );
        if( valid( p ) && p.IsPlayer() && p.IsLife() && ( valid( p.GetMap() ) || p.GetItemsByType( ITEM_TYPE_CAR, null ) == 0 ) )  // водители машин на глобале исключены
        {
            if( valid( p.GetMap() ) )
            {
                Location@ loc = p.GetMap().GetLocation();
                if( valid( loc ) && !CAN_TRANSIT_TOARENA( loc.GetProtoId() ) )
                {
                    p.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, MSG_WRONG_LOCATION );
                    continue;
                }
            }
            if( p.Skill[ SK_UNARMED ] < 200 && p.Stat[ ST_MAX_LIFE ] < 700 )
            {
                level = p.Stat[ ST_LEVEL ];
                if( level >= BRACKET_HIGH_FROM )
                {
                    playersHigh.insertLast( p.Id );
                }
                else if( level >= BRACKET_LOW_FROM )
                {
                    playersLow.insertLast( p.Id );
                }
            }
            else
                p.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, MSG_TOOSTRONG );
        }
    }
    int       locPid = 0;
    uint      locId = 0;
    Location@ loc;
    if( playersLow.length() > 1 )
    {
        locPid = GetArenaLocationProto( playersLow.length() );
        locId = CreateLocation( locPid, WORLD_X, WORLD_Y, null );
        if( locId > 0 )
        {
            @loc = GetLocation( locId );
            if( valid( loc ) )
            {
                loc.AutoGarbage = false;
                loc.Visible = false;

                int  timeEvent = CreateTimeEvent( __FullSecond + LASTSTAND_TIME( locPid ), "e_DeleteLocation", locId, true );
                Entire[] entires;
                Map@ map = loc.GetMapByIndex( 0 );
                if( valid( map ) )
                {
                    map.SetData( 17, timeEvent );                  // запоминается номер таймэвента
                    ParseEntires( map, entires, 0 );
                    if( entires.length() > 0 )
                    {
                        uint   position = Random( 0, entires.length() - 1 );
                        uint16 x = 0;
                        uint16 y = 0;
                        for( uint i = 0, l = playersLow.length(); i < l; i++ )
                        {
                            if( position >= entires.length() )
                                position = 0;
                            x = entires[ position ].HexX;
                            y = entires[ position ].HexY;
                            position++;
                            if( GetFreeHex( map, 4, x, y ) )
                            {
                                Critter@ cr = GetCritter( playersLow[ i ] );
                                if( valid( cr ) )
                                {
                                    SaveItemsToBank( cr );
                                    cr.TransitToMap( map.Id, x, y, Random( 0, 5 ) );
                                    cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, MSG_ARENABEGIN );
                                }
                            }
                        }
                    }
                }
                RadioMessageMsg( ARENA_CHANNEL, TEXTMSG_TEXT, MSG_ARENA );
            }
        }
    }

    if( playersHigh.length() > 1 )
    {
        locPid = GetArenaLocationProto( playersHigh.length() );
        locId = CreateLocation( locPid, WORLD_X, WORLD_Y, null );
        if( locId > 0 )
        {
            @loc = GetLocation( locId );
            if( valid( loc ) )
            {
                loc.AutoGarbage = false;
                loc.Visible = false;
                int  timeEvent = CreateTimeEvent( __FullSecond + LASTSTAND_TIME( locPid ), "e_DeleteLocation", locId, true );
                Entire[] entires;
                Map@ map = loc.GetMapByIndex( 0 );
                if( valid( map ) )
                {
                    map.SetData( 17, timeEvent );                  // запоминается номер таймэвента
                    ParseEntires( map, entires, 0 );
                    if( entires.length() > 0 )
                    {
                        int    position = Random( 0, entires.length() - 1 );
                        uint16 x = 0;
                        uint16 y = 0;
                        for( int i = 0, l = playersHigh.length(); i < l; i++ )
                        {
                            position = Random( 0, entires.length() - 1 );
                            x = entires[ position ].HexX;
                            y = entires[ position ].HexY;
                            if( GetFreeHex( map, 4, x, y ) )
                            {
                                Critter@ cr = GetCritter( playersHigh[ i ] );
                                if( valid( cr ) )
                                {
                                    SaveItemsToBank( cr );
                                    cr.TransitToMap( map.Id, x, y, Random( 0, 5 ) );
                                    cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, MSG_ARENABEGIN );
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    orders.resize( 0 );
}


uint e_DeleteLocation( uint[] @ values )
{
    uint locId = values[ 0 ];
    if( locId > 0 )
    {
        Location@ loc = GetLocation( locId );
        if( valid( loc ) )
        {
            Critter@[] critters;
            for( uint i = 0, l = loc.GetMapCount(); i < l; i++ )
            {
                Map@ map = loc.GetMapByIndex( i );
                if( valid( map ) )
                {
                    map.GetCritters( 0, FIND_ALL | FIND_ALL, critters );
                    for( uint j = 0, k = critters.length(); j < k; j++ )
                    {
                        ClearItems( critters[ j ] );
                    }
                    // В два цикла, чтобы не было эксплоитов с группой (цепляться за мертвеца и выходить с арены с лутом)
                    for( uint j = 0, k = critters.length(); j < k; j++ )
                    {
                        KickPlayerFromArena( critters[ j ] );
                        Critter@ cr = critters[ j ];
                        if( valid( cr ) )
                            cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, MSG_NOWINNER );
                    }
                }
            }
        }
    }
    return 0;
}

void ClearItems( Critter@ cr )
{
    if( valid( cr ) )
    {
        Item@[] items;
        if( cr.GetItems( -1, items ) > 0 )
        {
            for( int i = 0, l = items.length(); i < l; i++ )
            {
                Item@ item = items[ i ];
                if( valid( item ) && item.GetProtoId() != PID_RADIO )
                {
                    DeleteItem( item );
                }
            }
        }
    }
}

void KickPlayerFromArena( Critter@ cr )
{
    if( valid( cr ) )
    {
        if( cr.IsDead() )
            cr.ToLife();
        DropPoison( cr );
        cr.StatBase[ ST_CURRENT_HP ] = cr.Stat[ ST_MAX_LIFE ];
        cr.TransitToGlobal( false );
    }
}

void SaveItemsToBank( Critter@ cr )
{
    Map@ map = GetMapByPid( MAP_repl_bank_newreno, 0 );
    if( valid( map ) )
    {
        Item@ container = GetBankContainer( map );
        if( valid( container ) )
        {
            Item@[] items;
            if( cr.GetItems( -1, items ) > 0 )
            {
                for( int i = 0, l = items.length(); i < l; i++ )
                {
                    if( items[ i ].GetProtoId() != PID_RADIO )
                        MoveItem( items[ i ], items[ i ].GetCount(), container, cr.Id );
                }

                cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, MSG_ITEMSTAKEN );
            }
        }
    }
}

// Скрипт карты

void _ArenaInit( Map& map, bool firstTime )
{
    if( !firstTime )
    {
        Location@ loc = map.GetLocation();
        if( valid( loc ) )
        {
            // Log("Autogarbage for arena location set on");
            loc.AutoGarbage = true;
        }

    }     // перестраховка от откатов. Чтобы карты арены не существовали неопределенное время
    map.SetEvent( MAP_EVENT_FINISH, "_ArenaFinish" );
    map.SetLoopTime( 0, 60000 );
    map.SetEvent( MAP_EVENT_LOOP_0, "_ArenaLoop_0" );
    map.SetEvent( MAP_EVENT_IN_CRITTER, "_ArenaInCritter" );
    map.SetEvent( MAP_EVENT_OUT_CRITTER, "_ArenaOutCritter" );
    map.SetEvent( MAP_EVENT_CRITTER_DEAD, "_ArenaCritterDead" );
    if( firstTime )
    {
        map.SetData( 0, __FullSecond );
        Item@[] containers;
        for( uint i = 0; i < 9; i++ )
        {
            respItem( map, containers, 130, true );
        }
    }
}

// MAP_EVENT_FINISH
void _ArenaFinish( Map& map, bool deleted )
{
    Critter@[] players;
    if( map.GetCritters( 0, FIND_ALL | FIND_ONLY_PLAYERS, players ) > 0 )
    {
        for( uint i = 0, l = players.length(); i < l; i++ )
        {
            Critter@ p = players[ i ];
            if( valid( p ) )
                KickPlayerFromArena( p );
        }
    }
}
// Завершение работы карты.
// MAP_EVENT_LOOP_X, где X от 0 до 4
void _ArenaLoop_0( Map& map )
{
    int time = map.GetData( 0 );
    int locPid = map.GetLocation().GetProtoId();
    if( time > 0 && ( int(__FullSecond) > ( time + LASTSTAND_TIME( locPid ) / 2 ) ) )
    {
        int timeout = time + LASTSTAND_TIME( locPid );
        Critter@[] crits;
        if( map.GetCritters( 0, FIND_LIFE | FIND_ALL, crits ) > 0 )
        {
            for( uint i = 0, l = crits.length(); i < l; i++ )
            {
                Critter@ cr = crits[ i ];
                if( valid( cr ) )
                {
                    if( cr.Mode[ MODE_HIDE ] > 0 )
                    {

                        cr.ModeBase[ MODE_HIDE ] = 0;
                        cr.TimeoutBase[ TO_SNEAK ] = timeout;
                    }
                }
            }
        }
        map.SetLoopTime( 0, 20000 );
    }
}
// Цикл X. Для изменения времени вызова используйте Map::SetLoopTime.
// MAP_EVENT_IN_CRITTER
void _ArenaInCritter( Map& map, Critter& cr )
{
    if( cr.IsNpc() && cr.Stat[ ST_BASE_CRTYPE ] != 24 )
    {
        ClearItems( cr );
        cr.ToDead( ANIM2_DEAD_PULSE_DUST, null );
    }
}
// При входе криттера на карту.
// MAP_EVENT_OUT_CRITTER
void _ArenaOutCritter( Map& map, Critter& cr )
{
    ClearItems( cr );
}
// При выходе криттера с карты.
// MAP_EVENT_CRITTER_DEAD
void _ArenaCritterDead( Map& map, Critter& cr, Critter@ killer )
{
    Critter@[] critters;
    if( valid( killer ) && killer.Id != cr.Id && killer.Stat[ ST_LEVEL ] >= 36 && cr.IsPlayer() )
    {
        GameVar @ kills = GetUnicumVar( UVAR_arena_kills_counter, killer.Id, cr.Id );
        if( valid( kills ) )
        {
            if( kills < 1 )
            {
                killer.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, MSG_ADDED_CREDITS, "$value" + 1 );
                killer.StatBase[ ST_ARENA_POINTS ]++;
            }
            kills = kills.GetValue() + 1;
        }
    }
    if( map.GetCritters( 0, FIND_LIFE | FIND_ONLY_PLAYERS, critters ) < 2 )
    {
        if( valid( killer ) && killer.IsPlayer() && cr.IsPlayer() )
        {
            RadioMessageMsg( ARENA_CHANNEL, TEXTMSG_TEXT, MSG_WIN, "$winner" + GetPlayerName( killer.Id ) );
            int bonus = ARENA_BONUS( map.GetLocation().GetProtoId() );
            if( killer.Stat[ ST_LEVEL ] < 36 )
                bonus = int(bonus / 2);
            killer.StatBase[ ST_ARENA_POINTS ] += bonus;
            killer.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, MSG_BONUS, "$bonus" + bonus );
        }
        Location@ loc = map.GetLocation();
        int       timeEvent = CreateTimeEvent( __FullSecond + REAL_SECOND( 15 ), "e_DeleteLocation", loc.Id, true );
    }
}
// Инвайт на арену

bool ListenersSet = false;

void ListenChannel()
{
    if( !ListenersSet )
    {
        GameVar@ active = GetGlobalVar( GVAR_laststand_arena_active );
        if( valid( active ) && active > 0 )
        {
            // Log("Monstrous Listener 4laststandarena was set. B aware 4multiple listeners! It can b 2 dageroussssz 4servar! PEACE, bro");
            AddTextListener( SAY_RADIO, "INVITE", ARENA_CHANNEL, "game_event_laststand_arena@listen_Arena" );
            ListenersSet = true;
        }
    }
}

void listen_Arena( Critter& player, string& text )
{
    if( player.Stat[ ST_LEVEL ] < BRACKET_LOW_FROM )
    {
        player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, MSG_LOWLWL );
        return;
    }
    if( !IsTimeValidForArena() )
    {
        string lex1 = GetTimeLexems();
        player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, MSG_ARENATIMEOUT, lex1 );
        return;
    }
    if( orders.find( player.Id ) < 0 )
    {
        orders.insertLast( player.Id );
        player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, MSG_INVITED );
        RadioMessageMsg( ARENA_CHANNEL, TEXTMSG_TEXT, MSG_INFO5, "$name" + GetPlayerName( player.Id ) + "$level" + player.Stat[ ST_LEVEL ] );
    }
    else
    {
        string lex = GetTimeLexems();
        player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, ( IsTimeValidForArena() ? MSG_ALREADYINVITED : MSG_ARENATIMEOUT ), lex );
    }
}


// Функции для диалога

void r_Order( Critter& player, Critter@ npc )
{
    if( player.Stat[ ST_LEVEL ] < BRACKET_LOW_FROM )
    {
        player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, MSG_LOWLWL );
        return;
    }
    if( !IsTimeValidForArena() )
    {
        string lex1 = GetTimeLexems();
        player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, MSG_ARENATIMEOUT, lex1 );
        return;
    }
    if( orders.find( player.Id ) < 0 )
    {
        orders.insertLast( player.Id );
        player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, MSG_INVITED );
        if( !valid( npc ) )
        {
            RadioMessageMsg( ARENA_CHANNEL, TEXTMSG_TEXT, MSG_INFO5, "$name" + GetPlayerName( player.Id ) + "$level" + player.Stat[ ST_LEVEL ] );

        }
    }
    else
    {
        string lex = GetTimeLexems();
        player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, ( IsTimeValidForArena() ? MSG_ALREADYINVITED : MSG_ARENATIMEOUT ), lex );
    }
}


void r_When( Critter& player, Critter@ npc )
{
    string lex = GetTimeLexems();
    player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, ( IsTimeValidForArena() ? MSG_ALREADYINVITED : MSG_ARENATIMEOUT ), lex );
}


// Продажа вертиберда за арена поинты
// На карте обязан быть 245 гекс
void r_SellVertibird( Critter& cr, Critter@ npc, int cost )
{
    GameVar@ sold = GetGlobalVar( GVAR_arena_bertibird_sold );
    Map@     map = cr.GetMap();
    if( valid( sold ) && sold == 0 && valid( map ) )
    {
        if( cr.Stat[ ST_ARENA_POINTS ] >= cost )
        {
            Entire[] entires;
            ParseEntires( map, entires, ENTIRE_BIG_CAR );
            uint16 hx, hy, entNum;
            for( int i = 0, iMax = entires.length(); i <= iMax; i++ )
            {
                if( i == iMax )
                {
                    cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, MSG_NOAREA_TOPLACE_CAR );
                    return;
                }
                Entire@ ent = entires[ i ];
                if( map.CheckPlaceForItem( ent.HexX, ent.HexY, PID_VERTIBIRD ) )
                {
                    hx = ent.HexX;
                    hy = ent.HexY;
                    entNum = ent.Number;
                    break;
                }
            }
            uint  keyId = Random( 10000, 50000 );
            Item@ car = map.AddItem( hx, hy, PID_VERTIBIRD, 1 );
            if( valid( car ) )
            {
                sold = 1;
                cr.StatBase[ ST_ARENA_POINTS ] -= cost;
                car.LockerId = keyId;
                car.LockerComplexity = Random( 50, 300 );
                car.Charge = car.Proto.Car_TankVolume;
                car.Deterioration = 0;
                car.Update();
                Item@ bag = car.GetChild( 0 );
                if( valid( bag ) )
                {
                    bag.LockerId = keyId;
                    bag.LockerComplexity = Random( 150, 300 );
                    bag.Update();
                }
                Item@ key = cr.AddItem( PID_KEY, 1 );
                if( valid( key ) )
                {
                    key.LockerId = keyId;
                    key.Update();
                }
            }
        }
    }
}


// Продажа мопеда за арена поинты
// На карте обязан быть 243 гекс
void r_SellBike( Critter& cr, Critter@ npc, int cost, int isPersonal )
{
    GameVar@ sold;
    if( isPersonal > 0 )
    {
        @sold = GetLocalVar( LVAR_arena_moped_sold, cr.Id );
    }
    else
    {
        @sold = GetLocalVar( LVAR_arena_super_moped_sold, cr.Id );
    }
    Map@ map = cr.GetMap();
    if( valid( sold ) && sold == 0 && valid( map ) )
    {
        if( cr.Stat[ ST_ARENA_POINTS ] >= cost )
        {
            Entire[] entires;
            ParseEntires( map, entires, ENTIRE_CAR );
            uint16 hx, hy, entNum;
            for( int i = 0, iMax = entires.length(); i <= iMax; i++ )
            {
                if( i == iMax )
                {
                    cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, MSG_NOAREA_TOPLACE_CAR );
                    return;
                }
                Entire@ ent = entires[ i ];
                if( map.CheckPlaceForItem( ent.HexX, ent.HexY, PID_BIKE ) )
                {
                    hx = ent.HexX;
                    hy = ent.HexY;
                    entNum = ent.Number;
                    break;
                }
            }

            uint keyId = Random( 10000, 50000 );
            if( isPersonal > 0 )
                keyId = _CritEyesDoorId( cr.Id );

            Item@ car = map.AddItem( hx, hy, PID_BIKE, 1 );
            if( valid( car ) )
            {
                sold = 1;
                if( isPersonal > 0 )
                    _CarSetNoLockpick( car );
                cr.StatBase[ ST_ARENA_POINTS ] -= cost;
                car.LockerId = keyId;
                car.LockerComplexity = ( isPersonal > 0 ? 1000 : Random( 150, 300 ) );
                car.Charge = car.Proto.Car_TankVolume;
                car.Deterioration = 0;
                car.Update();
                Item@ bag = car.GetChild( 0 );
                if( valid( bag ) )
                {
                    bag.LockerId = keyId;
                    bag.LockerComplexity = ( isPersonal > 0 ? 1000 : Random( 150, 300 ) );
                    bag.Update();
                }
                if( isPersonal == 0 )
                {
                    Item@ key = cr.AddItem( PID_KEY, 1 );
                    if( valid( key ) )
                    {
                        key.LockerId = keyId;
                        key.Update();
                    }
                }
            }
        }
    }
}
