// FOS Client
// Author: cvet
// Server and client stuff for radio

Sprite::Sprite TabPic;
int[]  Position;
int    StepX;
int    StepY;
bool   LevelUp;
int    CurTab;

void SetChosenTabLevelUp( bool enable ) // Export
{
    LevelUp = enable;
}

void ModuleInit()
{
    TabPic.LoadByIni( "ChosenTabPic", PT_ART_INTRFACE );
    Position = IniParser::GetIniValues2( "ChosenTab", null );
    StepX = IniParser::GetIniValue( "ChosenTabStepX", 0 );
    StepY = IniParser::GetIniValue( "ChosenTabStepY", 5 );
    if( StepX != 0 )
        StepX += TabPic.Width;
    if( StepY != 0 )
        StepY += TabPic.Height;
    LevelUp = false;
    CurTab = 0;
	::__EventRenderIface.Subscribe( @DrawChosenTabs );
}

bool DrawChosenTabs( uint layer ) // Export
{
	if( layer != 3 )
		return true;
    if( GUI_GetActiveMainScreen() != CLIENT_MAIN_SCREEN_GAME )
        return true;

    ::CritterCl@ chosen = ::GetChosen();
    if( not valid( chosen ) )
        return true;

    if( LevelUp && ( GUI_GetActiveMainScreen() != CLIENT_MAIN_SCREEN_GAME ||
                    GUI_GetActiveScreen() == CLIENT_SCREEN_CHARACTER || GUI_GetActiveScreen() == CLIENT_SCREEN_PERK ) )
        LevelUp = false;

    CurTab = 0;

    if( chosen.Mode[ MODE_HIDE ] != 0 )
        DrawTab( ::GetMsgStr( TEXTMSG_GAME, STR_HIDEMODE_TITLE ), COLOR_DGREEN );

    if( LevelUp )
        DrawTab( ::GetMsgStr( TEXTMSG_GAME, STR_LEVELUP_TITLE ), COLOR_DGREEN );

    if( chosen.IsOverweight() )
        DrawTab( ::GetMsgStr( TEXTMSG_GAME, STR_OVERWEIGHT_TITLE ), COLOR_DRED );

    if( chosen.Damage[ DAMAGE_POISONED ] != 0 )
        DrawTab( ::GetMsgStr( TEXTMSG_GAME, STR_POISONED_TITLE ), COLOR_DRED );

    if( chosen.Damage[ DAMAGE_RADIATED ] != 0 )
        DrawTab( ::GetMsgStr( TEXTMSG_GAME, STR_RADIATED_TITLE ), COLOR_DRED );

    if( chosen.IsInjured() )
        DrawTab( ::GetMsgStr( TEXTMSG_GAME, STR_INJURED_TITLE ), COLOR_DRED );

    if( chosen.IsAddicted() )
        DrawTab( ::GetMsgStr( TEXTMSG_GAME, STR_ADDICTED_TITLE ), COLOR_DRED );

    if( chosen.Timeout[ TO_TRANSFER ] > 0 )
        DrawTab( ::GetMsgStr( TEXTMSG_GAME, STR_TIMEOUT_TITLE ), chosen.Timeout[ TO_TRANSFER ] / 1000, COLOR_DRED );
		
	return true;
}

void DrawTab( ::string@ text, uint color )
{
    TabPic.Draw( Position[ 0 ] + CurTab * StepX, Position[ 1 ] + CurTab * StepY );
    ::DrawText( text, Position[ 0 ] + CurTab * StepX, Position[ 1 ] + CurTab * StepY, TabPic.Width, TabPic.Height, color, FONT_FALLOUT, FT_CENTERXY );
    CurTab++;
}

void DrawTab( ::string@ text, int value, uint color )
{
    text = ::ReplaceText( text, "VALUE", value );
    TabPic.Draw( Position[ 0 ] + CurTab * StepX, Position[ 1 ] + CurTab * StepY );
    ::DrawText( text, Position[ 0 ] + CurTab * StepX, Position[ 1 ] + CurTab * StepY, TabPic.Width, TabPic.Height, color, FONT_FALLOUT, FT_CENTERXY );
    CurTab++;
}
