// FOS Server Sort -1
// Author: cvet

// ************************************************************************/
// *                                                                      */
// ************************************************************************/
// GoldenGlobes::Define::
enum Define
{
	RecMaxTime = 10 * 60, // In game minutes
	ForceDialogRecSucc = 3,
	ForceDialogRecFail = 4
}

uint RecPlayerId = 0;
uint RecBeginTime = 0;
uint FuckCount = 0;

void CheckTime()
{
    if( RecPlayerId != 0 && ::__FullSecond - RecBeginTime > uint( GoldenGlobes::Define::RecMaxTime ) )
        EndRec();
}

bool RecInAir()
{
    CheckTime();
    return RecPlayerId != 0;
}

void BeginRec( ::Critter@ cr )
{
    RecPlayerId = cr.Id;
    RecBeginTime = ::__FullSecond;
    FuckCount = 0;
}

void EndRec()
{
    RecPlayerId = 0;
    RecBeginTime = 0;
    FuckCount = 0;
}

// ************************************************************************/
// * ::Scenery                                                              */
// ************************************************************************/

bool s_Camera( ::Critter& cr, ::Scenery& camera, int skill, ::Item@ item )
{
    return true;
}

bool s_Bed( ::Critter& cr, ::Scenery& bed, int skill, ::Item@ item )
{
    CheckTime();
    if( skill != -1 || valid( item ) )
        return true;
    if( cr.Id != RecPlayerId )
        return true;
    FuckCount++;
    cr.KarmaBase[ KARMA_PORN_STAR ] = 1;
    Effects::FlushScreen( cr, false, 3000 );
    Effects::FlushScreen( cr, true, 1000 );
    return true;
}

// ************************************************************************/
// * Demands                                                              */
// ************************************************************************/

bool d_IsCanRec( ::Critter& player, ::Critter@ npc, int val )
{
    CheckTime();
    return not RecInAir();
}

bool d_IsFucked( ::Critter& player, ::Critter@ npc, int val )
{
    CheckTime();
    return player.Id == RecPlayerId && FuckCount > 0;
}

bool d_IsRec( ::Critter& player, ::Critter@ npc, int val )
{
    CheckTime();
    return player.Id == RecPlayerId;
}

bool d_IsNotRec( ::Critter& player, ::Critter@ npc, int val )
{
    CheckTime();
    return player.Id != RecPlayerId;
}

// ************************************************************************/
// * Results                                                              */
// ************************************************************************/

uint r_TryRec( ::Critter& player, ::Critter@ npc, int val )
{
    if( not RecInAir() )
    {
        BeginRec( player );
        return GoldenGlobes::Define::ForceDialogRecSucc;
    }

    return GoldenGlobes::Define::ForceDialogRecFail;
}

void r_BeginRec( ::Critter& player, ::Critter@ npc, int val )
{
    BeginRec( player );
}

void r_EndRec( ::Critter& player, ::Critter@ npc, int val )
{
    EndRec();
}

// ************************************************************************/
// *                                                                      */
// ************************************************************************/
