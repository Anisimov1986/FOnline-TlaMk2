// FOS Server
// Дефолтные надстройки для MessagePacket

void Send( Mk2::MessagePacket@ message, int to, int findType = ( FIND_ALL|FIND_ONLY_NPC ) )
{
	if( valid(message) )
	{
		::Critter@ sender = message.Sender;
		if( validEngineObject(sender) )
		{
			{			
				::Map@ map = sender.GetMap();
				if(valid(map))
				{
					::array<::Critter@> critters = {};
					uint len = 0;
					
					switch( to )
					{
						case MESSAGE_TO_WHO_SEES_ME:
						{
							len = sender.GetCritters ( true, findType, critters );
						} break;
						
						case MESSAGE_TO_I_SEE:
						{
							len = sender.GetCritters ( false, findType, critters );
						} break;
						
						case MESSAGE_TO_ALL_ON_MAP:
						{
							len = map.GetCritters ( 0, findType, critters );
						} break;
						
						default: break;
					}
					
					if( len != 0 )
						do
						{
							if( !::__EventCritterMessage.Raise( critters[--len], message ) )
								return;
						}
						while( len != 0 );
				}
			}
		}
	}
}

void CritterSend( ::Critter& sender, int num, int val, int to, int findType = ( FIND_ALL|FIND_ONLY_NPC ) )
{
	Send( Messager::Messager( sender, num, val), to, findType );
}

class Messager : Mk2::MessagePacket
{
	Messager( ::Critter& sender, int mess, int val )
	{
		@ CritterSender = sender;
		Message = mess;
		Value = val;
		SenderId = sender.Id;
	}
	
	::Critter@ get_Sender()
	{
		return CritterSender;
	}
	
	int Value;
	int Message;
	uint SenderId;
	::Critter@ CritterSender;
}