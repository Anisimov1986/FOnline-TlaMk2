
// FOS Server Client
#define PTR_NULL (-1)

// message specs
// note: CMSG_AIMED_HIT must be CMSG_HIT+1, CMSG_CRIT_AIMED_HIT must be CMSG_CRIT_HIT+1
enum CMSG
{
    Miss                  =1,   // length 2: 1   WHO_ID
    CritMiss             =2,   // length 3: 2   WHO_ID  EFF
    CritMissDamage      =3,   // length 4: 3   WHO_ID  EFF     DAMAGE
    Hit                   =4,   // length 3: 4   WHO_ID  DAMAGE
    AimedHit             =5,   // length 4: 5   WHO_ID  LOC     DAMAGE
    CritHit              =6,   // length 5: 6   WHO_ID  DAMAGE  EFF     MESSAGE
    CritAimedHit        =7,   // length 6: 7   WHO_ID  LOC     DAMAGE  EFF      MESSAGE
    HitDead              =8,   // length 3: 8   WHO_ID  DAMAGE
    AimedHitDead        =9,   // length 4: 9   WHO_ID  LOC     DAMAGE
    CritHitDead         =10,  // length 4: 10  WHO_ID  DAMAGE  MESSAGE
    CritAimedHitDead   =11,  // length 5: 11  WHO_ID  LOC     DAMAGE  MESSAGE
    Oops                  =12,  // length 3: 12  WH1_ID  WH2_ID
    HitRandomly          =13,  // length 2: 13  WHO_ID
    MissLeon	           =14,  // length 2: 14  WHO_ID
    MissAc	           =15,  // length 2: 15  WHO_ID
    Combust			   =16  // length 2: 16  WHO_ID
}
#ifdef __SERVER

class CombatRes
{
  ::array<uint> Res;
  ::Critter@ Crit;
  int Left;
  int Right;
  
  CombatRes()
  {
    Res.resize(1);
    Res[0]=1; // This will hold length of the message for client (so it can verify the length)
    Left=PTR_NULL;
    Right=PTR_NULL;
  }
};

void AddEff(::Critter@ crit, ::array<uint> eff, ::array<CombatMsg::CombatRes>& combatResults)
{
  int ptr=0;
  
  // find or create the node:
  if(combatResults.length()==0)
  {
    combatResults.resize(1);
    @combatResults[0].Crit=crit;
  }
  
  while (combatResults[ptr].Crit.Id!=crit.Id)
  {
    if(crit.Id<combatResults[ptr].Crit.Id)
    {
      if(combatResults[ptr].Left !=PTR_NULL)
        ptr=combatResults[ptr].Left;
      else
      {
        uint last=combatResults.length();
        combatResults.resize(last+1);
        combatResults[ptr].Left=last;
        ptr=last;
        @combatResults[last].Crit=crit;
      }
    }
    else
    {
      if(combatResults[ptr].Right !=PTR_NULL)
        ptr=combatResults[ptr].Right;
      else
      {
        uint last=combatResults.length();
        combatResults.resize(last+1);
        combatResults[ptr].Right=last;
        ptr=last;
        @combatResults[last].Crit=crit;
      }
    }
  }
  
  // add the effect:
  uint len=eff.length();
  combatResults[ptr].Res.resize(combatResults[ptr].Res[0]+len);
  for(uint i=0;i<len;i++)
    combatResults[ptr].Res[i+combatResults[ptr].Res[0]]=eff[i];
    
  combatResults[ptr].Res[0]+=len;
}

void FlushResults(::array<CombatMsg::CombatRes>& combatResults, int ptr = 0)
{
  if(ptr==0)
    if(combatResults.length()==0)
      return;
  /*if (@combatResults[ptr].Crit==null)
  {
    Log("tree fail, ptr="+ptr+" in "+where);
    return false;
  }*/
  combatResults[ptr].Crit.SendCombatResult(combatResults[ptr].Res);

  /*if(combatResults[ptr].Left  !=PTR_NULL) 
    if (!runTree(combatResults, combatResults[ptr].Left, where)) return false;
  if(combatResults[ptr].Right !=PTR_NULL)
    if (!runTree(combatResults, combatResults[ptr].Right, where)) return false;*/
  if(combatResults[ptr].Left  !=PTR_NULL) 
    FlushResults(combatResults, combatResults[ptr].Left);
  if(combatResults[ptr].Right !=PTR_NULL)
    FlushResults(combatResults, combatResults[ptr].Right);
}
#endif