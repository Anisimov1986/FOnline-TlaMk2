// FOS Server
// Author: rifleman17
// Бартер с ограничениями. Нпц покупает или продает вещи только из ограниченного списка.

::string GetKey( ::Critter& cr ){ return "LBCritter_" + cr.Id; }
::string GetCritterKey( uint& id ){ return "LBCritter_" + id; }

class Pattern
{
    Pattern( ::Critter& cr ){ construct( GetKey( cr ) ); }
    Pattern( string@ key ){ construct( @key ); }
	
	private void construct( string@ key )
	{
        @this.Key = key;
        if( ::IsAnyData( Key ) )
            this.Load();	
	}
	
    ::string@ Key;       	 		// Код криттера, к которому применяются ограничения
    uint16[] AllowedPidsSale; // Коды предметов, которые НПЦ продает
    uint16[] AllowedPidsBuy;  // Коды предметов, которые НПЦ покупает

    bool Allowed( uint16 itemPid, bool isSale )
    {
        return ( isSale ? ( this.AllowedPidsSale.length() == 0 ||
                            this.AllowedPidsSale.find( itemPid ) >= 0 ) :
                 ( this.AllowedPidsBuy.length() == 0 ||
                   this.AllowedPidsBuy.find( itemPid ) >= 0 ) );
    }

    void Load()
    {
        Serializator::Serializator load;
        if( load.Load( Key ) )
        {
            load.Get( this.AllowedPidsSale );
            load.Get( this.AllowedPidsBuy );
        }
    }

    void Save()
    {
        Serializator::Serializator save;
        save.Set( this.AllowedPidsSale );
        save.Set( this.AllowedPidsBuy );
        save.Save( Key );
    }
}

void Save( uint crId, uint16[] sellLimits, uint16[] buyLimits )
{
    ThisModule::Pattern bl = ThisModule::Pattern( GetCritterKey( crId ) );
    if( ::IsAnyData( bl.Key ) )
        ::EraseAnyData( bl.Key );
    if( sellLimits.length() > 0 )
    {
        bl.AllowedPidsSale.resize( 0 );
        bl.AllowedPidsSale = sellLimits;
    }
    if( buyLimits.length() > 0 )
    {
        bl.AllowedPidsBuy.resize( 0 );
        bl.AllowedPidsBuy = buyLimits;
    }
    bl.Save();
}

bool Allowed( uint crId, ::Item@[]& buyItems,  ::Item@[]& saleItems )
{
    if( ::IsAnyData( GetCritterKey(crId) ) )
    {
        ThisModule::Pattern bl = ThisModule::Pattern( GetCritterKey( crId ) );
        for( uint i = 0, l = buyItems.length(); i < l; i++ )
        {
            ::Item@ item = buyItems[ i ];
            if( @item !is null && !bl.Allowed( item.GetProtoId(), false ) )
                return false;
        }
        for( uint i = 0, l = saleItems.length(); i < l; i++ )
        {
            ::Item@ item = saleItems[ i ];
            if( @item !is null && !bl.Allowed( item.GetProtoId(), false ) )
                return false;
        }
    }
    return true;
}
