// FOS Server
// Author: Ra
// MapWaste::Defines::WasteLevel1RespTime
// Пиды прототипов атакующих НПЦ

enum Defines
{
	NpcPidDog = 82,
	WasteRespTime = 1000*19*60,
	WasteLevel1RespTime = 1000*40*60
}

void _WasteEnterInit(::Map& map, bool firstTime)
{
	MapRadiation::Medium(map, firstTime);
	map.SetLoopTime(1,::Random(MapWaste::Defines::WasteRespTime-MapWaste::Defines::WasteRespTime*0.33, MapWaste::Defines::WasteRespTime+MapWaste::Defines::WasteRespTime*0.33));
	map.SetEvent(MAP_EVENT_LOOP_1,"MapWaste::_WasteEnterLoop1");
}

void WasteLvl1(::Map& map, bool firstTime)
{
	MapRadiation::High(map, firstTime);
	map.SetLoopTime(1,::Random(MapWaste::Defines::WasteLevel1RespTime-MapWaste::Defines::WasteLevel1RespTime*0.33, MapWaste::Defines::WasteLevel1RespTime+MapWaste::Defines::WasteLevel1RespTime*0.33));
	map.SetEvent(MAP_EVENT_LOOP_1,"MapWaste::_WasteLevel1Loop1");
}

void _WasteEnterLoop1(::Map& map)
{
	if(::Random(0,3)<3) map.SetRain(::Random(10,65));
	::array<::Item@> containers = {};
	::respItem(map, containers, 130, true);
	
	if(::Random(0,3) > 2)
	{
		::array<int> params = {};
		::array<::Critter@> attackingGroup=NpcMenegeLib::addGroupNpc(map, MapWaste::Defines::NpcPidDog, params, 50, 50, 102, 5, 1, "Mk2@Mob::_TempMobInit");
		NpcMenegeLib::GroupInit(attackingGroup);
		NpcMenegeLib::addEnemyGroupsNpc(map, attackingGroup);
	}
}

void _WasteLevel1Loop1(::Map& map)
{
	::array<::Item@> containers = {};
	::respItem(map, containers, 131, false);
}

// Разряд электричеством
void ElectroAttack(::Critter& cr, ::Scenery& trigger, bool entered, uint8 dir)
{
	::GameVar@ waste_elekro_timeout=::GetGlobalVar(GVAR_waste_elekro_timeout);
	if(valid(waste_elekro_timeout))
	{
		if(uint(waste_elekro_timeout.GetValue())<::__FullSecond) return;
		cr.GetMap().RunEffect(4008,cr.HexX,cr.HexY,0, EFFECT_INSTRUCTION_NONE);
		::InjureCritter(cr, ::Random(700, 900), DAMAGE_ELECTR, 0, 0);
		cr.GetMap().PlaySound("HFXXXXBH.ACM");
	}
}

bool s_ElectroAttack(::Critter& cr, ::Scenery& scen, int skill, ::Item@ item)
{
	if(skill==SK_REPAIR)
	{
		::GameVar@ waste_elekro_timeout=::GetGlobalVar(GVAR_waste_elekro_timeout);
		if(valid(waste_elekro_timeout))
		{
			if(uint(waste_elekro_timeout.GetValue())>::__FullSecond) return false;
			if(uint(cr.Timeout[TO_SK_REPAIR])>::__FullSecond) return false;
			if(::Random(0,200)>cr.Skill[SK_REPAIR])
			{
				cr.TimeoutBase[TO_SK_REPAIR]=REPAIR_TIMEOUT(cr);
				return false;
			}
			if( !valid(waste_elekro_timeout)) return false;
			waste_elekro_timeout=::__FullSecond+REAL_MINUTE(::Random(8,10));
			cr.SayMsg(SAY_NETMSG,TEXTMSG_GAME,STR_WASTE_START_GENERATOR);
			cr.TimeoutBase[TO_SK_REPAIR]=REPAIR_TIMEOUT(cr);
			cr.GetMap().PlaySound("COOLANT.ACM");
			return true;
		}
	}
	
	if(skill==SK_SCIENCE && cr.Skill[SK_SCIENCE]>112)
	{
		cr.SayMsg(SAY_NETMSG,TEXTMSG_GAME,STR_WASTE_INFO_GENERATOR);
		return true;
	}
		
	return false;
}