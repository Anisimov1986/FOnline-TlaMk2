// FOS Server
#ifndef __OFFCLIENT
#define __OFFCLIENT

shared class OffClient
{
	uint Id;
	::string Name;
	
	bool UnsetKnownLoc(uint locId){ return UnsetKnownLocation(Name, Id, locId);}
	
	bool SetKnownLoc(uint locId)
	{
		if(!valid(GetLocation(locId)) || IsKnownLoc(locId)) return false;
		return SetKnownLocation(Name, Id, locId);
	}
	
	bool ToGlobal()
	{
		return ToGlobalMap(Name, Id);
	}
	
	uint GetMapId()
	{
		return GetCurMap(Name, Id);
	}
	
	uint GetLocationId()
	{
		uint mapId=GetMapId();
		if(mapId==0) return 0;
		::Map@ map = ::GetMap(mapId);
		if(valid(map)) return map.GetLocation().Id;
		return 0;
	}
	
	int GetParam(uint index) { return GetParameter(Name, Id, index);}
	
	bool SetParam(uint index, int value){ return SetParameter(Name, Id, index, value);}
	
	bool IsKnownLoc(uint id)
	{
		return IsKnownLocation(Name, Id, id);
	}
	
	bool TransitToMap( ::Map& map, uint16 hexX, uint16 hexY)
	{
		::Location@ loc=map.GetLocation();
		if(!map.IsHexPassed(hexX, hexY)) return false;
		return Transit(Name,Id, map, map.GetProtoId(), hexX, hexY, loc.WorldX, loc.WorldY);
	}
}

OffClient@ GetOffClient(uint Id)
{
	if(valid(GetCritter(Id))) return null;
	OffClient client;
	string@ name=GetPlayerName(Id);
	if(valid(name) && name!="")
	{
		client.Id=Id;
		client.Name=name;
		return client;
	}
	return null;
}

OffClient@ GetOffClient(string@ name)
{
	if(@name==null) return null;
	if(valid(GetPlayer(name))) return null;
	OffClient client;
	uint id=GetPlayerId(name);
	if(id>0)
	{
		client.Id=id;
		client.Name=name;
		return client;
	}
	return null;
}

#endif //__OFFCLIENT
