// FOS Server
enum Define
{
	TeleportEntire = 42,
	ReferencePoint = 43
}

uint r_GetBeacon( ::Critter& player, ::Critter@ npc )
{
    uint id = player.GetMap().Id;
    if( valid( GetBeacon( id ) ) )
        return 6;
    ::Item@ item = player.AddItem( Content::Item::TELEPORT_BEACON, 1 );
    item.Val1 = int(id);
    return 4;
}

void r_RegetBeacon( ::Critter& player, ::Critter@ npc )
{
    uint  id = player.GetMap().Id;
    ::Item@ beacon = GetBeacon( id );
    if( valid( beacon ) )
        ::MoveItem( beacon, 1, player );
    else
    {
        ::Item@ item = player.AddItem( Content::Item::TELEPORT_BEACON, 1 );
        item.Val1 = int(id);
    }
}

::Item@ GetBeacon( uint id )
{
    ::Item@[] beacons;
    ::GetAllItems( Content::Item::TELEPORT_BEACON, beacons );
    for( uint n = 0; n < beacons.length(); n++ )
    {
        if( beacons[ n ].Val1 == int(id) )
            return beacons[ n ];
    }
    return null;
}

uint r_TryTeleport( ::Critter& player, ::Critter@ npc )
{
    ::Item@ beacon = GetBeacon( player.GetMap().Id );
    if( valid( beacon ) && beacon.Accessory == ACCESSORY_HEX )
    {
        uint16 x, y;
        ::Map@   tMap = beacon.GetMapPosition( x, y );
        if( !CheckMap( tMap ) )
            return 5;
        Teleport( player.GetMap() );
        return DIALOG_END;
    }
    return 5;
}

bool CheckMap( ::Map@ map )
{
    if( @map == null )
        return false;
    if( ReplicationBank::IsBank( map ) )
        return false;
    return true;
}

void Teleport( ::Map@ map )
{
    ::Item@  beacon = GetBeacon( map.Id );

    uint16 x = 0,
           y = 0,
           tx = 0,
           ty = 0,
           cx = 0,
           cy = 0;

    map.GetEntireCoords( Teleport::Define::ReferencePoint, 0, x, y );
    ::Map@ tMap = beacon.GetMapPosition( tx, ty );

    map.PlaySound( "ELECTRIC.ACM", x, y, 0 );

    Teleport::TeleportedObject[] objs;

    for( uint e = 0; e < map.CountEntire( Teleport::Define::TeleportEntire ); e++ )
    {
        map.GetEntireCoords( Teleport::Define::TeleportEntire, e, cx, cy );

        uint16 tcx = tx + uint( ( int(cx) - x ) ),
               tcy = ty + uint( int(cy) - y );

        ::Critter@ cr = map.GetCritter( cx, cy );

        if( valid( cr ) )
        {
            Teleport::TeleportedObject obj( cr, tMap.Id, tcx, tcy );
            obj.CheckSuccess( tx, ty );
            objs.insertLast( obj );
        }
        ::Item@[] items;
        if( map.GetItems( cx, cy, items ) > 0 )
        {
            Teleport::TeleportedObject obj( items, tMap.Id, tcx, tcy );
            obj.CheckSuccess( tx, ty );
            objs.insertLast( obj );
        }
    }

    for( uint n = 0; n < objs.length(); n++ )
    {
        objs[ n ].Apply();
    }

    tMap.PlaySound( "ELECTRIC.ACM", tx, ty, 0 );

    ::DeleteItem( beacon );
}

class TeleportedObject
{
    ::Critter@ Creature;
    ::Item@[] Items;
    uint16   X;
    uint16   Y;
    uint     MapId;
    bool     Successfull;

    TeleportedObject( ::Critter & cr, uint id, uint16 hx, uint16 hy )
    {
        MapId = id;
        @Creature = cr;
        X = hx;
        Y = hy;
        Successfull = true;
    }

    TeleportedObject( ::Item@[] it, uint id, uint16 hx, uint16 hy )
    {
        MapId = id;
        Items = it;
        X = hx;
        Y = hy;
        Successfull = true;
    }

    void CheckSuccess( uint16 cx, uint16 cy )
    {
        ::Map@ map = ::GetMap( MapId );
        if( @map == null )
            return;
        uint16 wx = X, wy = Y;
        map.GetHexCoordWall( cx, cy, wx, wy, 0, 0 );
        if( X != wx || Y != wy )
            Successfull = false;
    }

    void Apply()
    {
        if( valid( Creature ) )
        {
            ::Map@ map = Creature.GetMap();
            ::Map@ tMap = ::GetMap( MapId );
            if( @map == null || @tMap == null )
                return;
            map.RunEffect( Content::Item::EXPLODE_EMP, Creature.HexX, Creature.HexY, 0, EFFECT_INSTRUCTION_NONE );
            Creature.TransitToMap( MapId, X, Y, Creature.Dir );
            tMap.RunEffect( Content::Item::EXPLODE_EMP, X, Y, 0, EFFECT_INSTRUCTION_NONE );
            if( !Successfull )
            {
                Creature.ToDead( ANIM2_DEAD_PULSE_DUST, null );
            }
        }
        else
        {
            if( !Successfull )
            {
                ::DeleteItems( Items );
                return;
            }
            if( Items.length() < 1 || @Items[ 0 ] == null )
                return;
            uint16 hx = 0, hy = 0;
            ::Map@   map = Items[ 0 ].GetMapPosition( hx, hy );
            ::Map@   tMap = ::GetMap( MapId );
            if( @map == null || @tMap == null )
                return;
            map.RunEffect( Content::Item::EXPLODE_EMP, hx, hy, 0, EFFECT_INSTRUCTION_NONE );
            ::MoveItems( Items, tMap, X, Y );
            tMap.RunEffect( Content::Item::EXPLODE_EMP, X, Y, 0, EFFECT_INSTRUCTION_NONE );
        }
    }

}
