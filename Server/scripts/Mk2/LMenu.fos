// FOS Client

/*
LMenuTalkPic         = TALKN.FRM                # Изображение кнопки начала диалога
LMenuTalkPicDn       = TALKH.FRM                # Изображение нажатой кнопки начала диалога
LMenuLookPic         = LOOKN.FRM                # Изображение кнопки бинокля
LMenuLookPicDn       = LOOKH.FRM                # Изображение нажатой кнопки бинокля
LMenuCancelPic       = CANCELN.FRM              # Изображение кнопки закрытия меню
LMenuCancelPicDn     = CANCELH.FRM              # Изображение нажатой кнопки закрытия меню
LMenuUsePic          = USEGETN.FRM              # Изображение кнопки использования предмета
LMenuUsePicDn        = USEGETH.FRM              # Изображение нажатой кнопки использования предмета
LMenuRotatePic       = ROTATEN.FRM              # Изображение кнопки поворота персонажа
LMenuRotatePicDn     = ROTATEH.FRM              # Изображение нажатой кнопки поворота персонажа
LMenuGMFollowPic     = lmenu_gmfollow_up.png    # Изображение кнопки присоединения к группе
LMenuGMFollowPicDn   = lmenu_gmfollow_dn.png    # Изображение нажатой кнопки присоединения к группе
LMenuDropPic         = DROPN.FRM                # Изображение кнопки выбрасывания предмета
LMenuDropPicDn       = DROPH.FRM                # Изображение нажатой кнопки выбрасывания предмета
LMenuUnloadPic       = UNLOADN.FRM              # Изображение кнопки разрядки оружия
LMenuUnloadPicDn     = UNLOADH.FRM              # Изображение нажатой кнопки разрядки оружия
LMenuSortUpPic       = lmenu_sortup_up.png      # Изображение кнопки поднятия предмета наверх списка
LMenuSortUpPicDn     = lmenu_sortup_dn.png      # Изображение нажатой кнопки поднятия предмета наверх списка
LMenuSortDownPic     = lmenu_sortdown_up.png    # Изображение кнопки опускания предмета в конец списка
LMenuSortDownPicDn   = lmenu_sortdown_dn.png    # Изображение нажатой кнопки опускания предмета в конец списка
LMenuPickItemPic     = lmenu_pickitem_up.png    # Изображение кнопки поднятия предмета
LMenuPickItemPicDn   = lmenu_pickitem_dn.png    # Изображение нажатой кнопки поднятия предмета
LMenuPushPic         = PUSHN.FRM                # Изображение кнопки толкания
LMenuPushPicDn       = PUSHH.FRM                # Изображение нажатой кнопки толкания
LMenuBagPic          = INVENN.FRM               # Изображение кнопки использования предмета из инвентаря
LMenuBagPicDn        = INVENH.FRM               # Изображение нажатой кнопки использования предмета из инвентаря
LMenuSkillPic        = SKILLN.FRM               # Изображение кнопки использования умения
LMenuSkillPicDn      = SKILLH.FRM               # Изображение нажатой кнопки использования умения
LMenuBarterOpenPic   = lmenu_barter_open_up.png # Изображение кнопки начала открытого обмена между игроками
LMenuBarterOpenPicDn = lmenu_barter_open_dn.png # Изображение нажатой кнопки начала открытого обмена между игроками
LMenuBarterHidePic   = lmenu_barter_hide_up.png # Изображение кнопки начала скрытого обмена между игроками
LMenuBarterHidePicDn = lmenu_barter_hide_dn.png # Изображение нажатой кнопки начала скрытого обмена между игроками
LMenuGmapKickPic     = lmenu_gmap_kick_up.png   # Изображение кнопки отсоединения от группы
LMenuGmapKickPicDn   = lmenu_gmap_kick_dn.png   # Изображение нажатой кнопки отсоединения от группы
LMenuGmapRulePic     = lmenu_gmap_rule_up.png   # Изображение кнопки передачи управления группой
LMenuGmapRulePicDn   = lmenu_gmap_rule_dn.png   # Изображение нажатой кнопки передачи управления группой
LMenuVoteUpPic       = lmenu_voteup_up.png      # Изображение кнопки голосования "за"
LMenuVoteUpPicDn     = lmenu_voteup_dn.png      # Изображение нажатой кнопки голосования "за"
LMenuVoteDownPic     = lmenu_votedown_up.png    # Изображение кнопки голосования "против"
LMenuVoteDownPicDn   = lmenu_votedown_dn.png    # Изображение нажатой кнопки голосования "против"
LMenuNodeHeight      = 40                       # Высота кнопки
*/

namespace Option
{
	namespace GUI
	{
		uint NodeHeight = 40;
	}
}

enum Nodes
{
	Cancel,
	Use,
	Drop,
	Unload,
	Skill,
}

Instance Master;

funcdef void Result( LMenu::Instance@ , string& );

LMenu::Instance@ Prepare( LMenu::Result@ resut = null )
{	
	Master.List.resize( 0 );
	@Master.Result = resut;
	return @Master;
}

void ModuleInit(  )
{	
	GuiKit::Add( CLIENT_SCREEN_LMENU_MK2, @Master );
}

bool LoopHide( uint& loop )
{
	::HideScreen( CLIENT_SCREEN_LMENU_MK2, 0, 0, 0 );
	loop = 0;
	return true;
}

bool MouseUp( int click )
{
	::__EventLoop.Subscribe( @LoopHide, 1 );
	return true;
}

class Instance : GuiKit::GUIScreenPattern, IGUI::ListingElementOpt, IGUI::ScreenCallbackShow, IGUI::ScreenCallbackHide
{
	void OnShow( int p0, int p1, int p2 )
	{
		::__EventMouseUp.Subscribe( @MouseUp );
	}
	
	void OnHide( int p0, int p1, int p2 )
	{
		::__EventMouseUp.Unsubscribe( @MouseUp );	
	}

///////// ListingElementOpt /////////////////
	int get_Height( IGUIListingElement@ element ) override
	{
		return LMenu::Option::GUI::NodeHeight;
	}
	
	int get_Width( IGUIListingElement@ element ) override
	{
		return LMenu::Option::GUI::NodeHeight;		
	}
	
	void Shift( uint shift ) override {}
	bool get_Hide( IGUIListingElement@ element ) override { return false;	}

	::string@ get_Name( )
	{
		return "LMenu";
	}
	
	void Show( ::IGUIDescriptor@ owner )
	{
		@Owner = owner;
		uint count = List.length();
		int y = ::__MouseY;
		if( count * LMenu::Option::GUI::NodeHeight + y >= ::__ScreenHeight )
			y = ::__ScreenHeight - (count+1) * LMenu::Option::GUI::NodeHeight;
		OptionElement.Position( ::__MouseX, y, LMenu::Option::GUI::NodeHeight, ::__ScreenHeight );
		::ShowScreen( CLIENT_SCREEN_LMENU_MK2, 0, 0, 0 );
	}
	
	void Build( int screenIndex, ::IGUIScreenOpt@ opt )
	{
		@Option = opt;
		@NodeLib = dictionary();
		@List = array<IGUIListingElement@>();
		
		CreateNode( "Talk" );
		CreateNode( "Look" );
		CreateNode( "Cancel" );
		CreateNode( "Use" );
		CreateNode( "Rotate" );
		CreateNode( "SortUp" );
		CreateNode( "Drop" );
		CreateNode( "SortDown" );
		CreateNode( "PickItem" );
		CreateNode( "Push" );
		CreateNode( "Bag" );
		CreateNode( "Skill" );
		CreateNode( "BarterOpen" );
		CreateNode( "BarterHide" );
		CreateNode( "GMFollow" );
		CreateNode( "GmapKick" );
		CreateNode( "GmapRule" );
		CreateNode( "VoteUp" );
		CreateNode( "VoteDown" );
		CreateNode( "Unload" );
		
		opt.SetNoCollision( true )
			.Position( 0, 0 )
			.CallbackShow( @this )
			.CallbackHide( @this );

		@OptionElement = GUI_AddScreenElement( screenIndex, null, 0, 0 )
			.Position( 0, 0, LMenu::Option::GUI::NodeHeight, 600 )
			.Listing(@List)
			.ListingOption(@this)
			.ListingOffset( 0 )
			.ListingMouseChecked( false );
	}
	
	LMenu::Instance@ ShowNode( string& name )
	{
		LMenu::Node@ node;
		if( NodeLib.exists( name ) )
		{
			NodeLib.get( name, @node );
			node.Init( List.length() );
			List.insertLast( @node );
		}
		return this;
	}
	
	LMenu::Node@ CreateNode( LMenu::Node@ node )
	{
		NodeLib.set( node.Name,@node );
		return @node;
	}
	
	LMenu::Node@ CreateNode( string name )
	{
		return @CreateNode( LMenu::Node( name ) );
	}
	
	::IGUIDescriptor@ Owner;
	
	dictionary@ NodeLib;
	IGUIListingElement@[]@ List;
	IGUIScreenOpt@ Option;
	IGUIElementOpt@ OptionElement;
	LMenu::Result@ Result;
}

class Node : IGUIListingElement
{
	Node( string& name )
	{
		@Name = name;
		@spr = Sprite::Sprite( GetIfaceIniStr( "LMenu" + name + "Pic" ), PT_ART_INTRFACE );
		@sprdn = Sprite::Sprite( GetIfaceIniStr( "LMenu" + name + "PicDn" ), PT_ART_INTRFACE );
	}
	
	void Init( uint _index )
	{
		index = _index;
		focus = false;
	}

	void Draw( int x, int y, int w, int h, uint color )
	{
		if( focus ) sprdn.Draw( x, y, w, h, 0 );
		else spr.Draw( x, y, w, h, 0 );
	}
	
	void ClickUp( int click )
	{
		if( Master.Result !is null )
			Master.Result( @Master, Name );
	}
	
	void ClickDown( int click )
	{
	}
	
	void Focus( )
	{
		focus = true;
	}
	
	void LoseFocus( )
	{
		focus = false;	
	}
	
	void MouseMove( int x, int y )
	{
	
	}
	
	bool focus;
	
	uint index;
	Sprite::Sprite@ spr;
	Sprite::Sprite@ sprdn;
	string@ Name;
}