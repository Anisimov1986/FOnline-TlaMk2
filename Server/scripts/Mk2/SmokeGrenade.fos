// FOS Server Client
// Author: rifleman17
// SmokeGrenade

enum Define
{
	MaxStep = 5,
	SmokeToHitAttackerPenalty = 5,
	SmokeToHitTargetPenalty = 10,
	GasToHitAttackerPenalty = 15,
	GasToHitTargetPenalty = 5
}

#ifdef __CLIENT

uint GetSmokePenalty( ::CritterCl@ target, uint16 hexX, uint16 hexY )
{
    if( !valid( target ) && hexX == 0 && hexY == 0 )
        return 0;
    uint       penalty = 0;

    ::CritterCl@ chos = ::GetChosen();
    if( !valid( chos ) )
        return 0;
    if( valid( target ) )
    {
        hexX = target.HexX;
        hexY = target.HexY;
    }

    if( ::GetItemsHex( Content::Item::SMOKE, chos.HexX, chos.HexY ) > 0 )
        penalty += SmokeGrenade::Define::SmokeToHitAttackerPenalty;
    if( ::GetItemsHex( Content::Item::SMOKE, hexX, hexY ) > 0 )
        penalty += SmokeGrenade::Define::SmokeToHitTargetPenalty;
    if( ::GetItemsHex( Content::Item::MUSTARD_GAS, chos.HexX, chos.HexY ) > 0 )
        penalty += SmokeGrenade::Define::GasToHitAttackerPenalty;
    if( ::GetItemsHex( Content::Item::MUSTARD_GAS, hexX, hexY ) > 0 )
        penalty += SmokeGrenade::Define::GasToHitTargetPenalty;
    return penalty;
}

#endif
#ifdef __SERVER

uint GetSmokePenalty( ::Map& map, ::Critter& attacker, ::Critter@ target, uint16 hexX, uint16 hexY )
{
    if( !valid( target ) && hexX == 0 && hexY == 0 )
        return 0;

    if( valid( target ) )
    {
        hexX = target.HexX;
        hexY = target.HexY;
    }

    uint penalty = 0;

    if( valid( map.GetItem( attacker.HexX, attacker.HexY, Content::Item::SMOKE ) ) )
        penalty += SmokeGrenade::Define::SmokeToHitAttackerPenalty;
    if( valid( map.GetItem( hexX, hexY, Content::Item::SMOKE ) ) )
        penalty += SmokeGrenade::Define::SmokeToHitTargetPenalty;
    if( attacker.Stat[ ST_BODY_TYPE ] != BT_ROBOT && valid( map.GetItem( attacker.HexX, attacker.HexY, Content::Item::MUSTARD_GAS ) ) )
        penalty += SmokeGrenade::Define::GasToHitAttackerPenalty;
    if( valid( map.GetItem( hexX, hexY, Content::Item::MUSTARD_GAS ) ) )
        penalty += SmokeGrenade::Define::GasToHitTargetPenalty;
    return penalty;
}

void SmokeBlast( ::Map& map, uint16 hexX, uint16 hexY, uint16 smokePid, uint ownerId )
{
    uint[] values = { map.Id, hexX, hexY, 0, smokePid, ownerId };
    ::CreateTimeEvent( ::__FullSecond, "SmokeGrenade::e_SmokeBlast", values, false );
}

uint e_SmokeBlast( uint[] @ values )
{
    ::Map@   map = ::GetMap( values[ 0 ] );
    uint16 hexX = values[ 1 ];
    uint16 hexY = values[ 2 ];
    uint8  step = values[ 3 ];
    uint16 pid = values[ 4 ];
    uint   ownerId = values[ 5 ];
    if( step > SmokeGrenade::Define::MaxStep )
        return 0;
    uint[] smokeIds;
    map.PlaySound( "gas.wav", hexX, hexY, 25 );
	
    AddSmoke( map, hexX, hexY, true, pid, ownerId, smokeIds );

    for( uint curStep = 1; curStep < step; curStep++ )
    {
        hexX = values[ 1 ];
        hexY = values[ 2 ];
        map.MoveHexByDir( hexX, hexY, 4, curStep );
        for( uint i = 0; i < 6; i++ )
        {
            for( uint j = 0; j < curStep; j++ )
            {
                map.MoveHexByDir( hexX, hexY, i, 1 );
                AddSmoke( map, hexX, hexY, ( curStep + 2 > step ) || ( ( curStep + 3 > step ) && ::Random( 1, 2 ) == 1 ) || ::Random( 1, 3 ) == 1, pid, ownerId, smokeIds );
            }
        }
    }
    if( smokeIds.length() > 0 )
        ::CreateTimeEvent( ::__FullSecond + uint( REAL_SECOND( ::Random( 4, 6 ) ) * ( 20 - step ) ), "SmokeGrenade::e_DeleteSmokes", smokeIds, true );
    values[ 3 ]++;
    return 5;
}

uint e_DeleteSmokes( uint[] @ values )
{
    for( uint i = 0, l = values.length(); i < l; i++ )
    {
        if( values[ i ] == 0 )
            continue;
        ::Item@ item = ::GetItem( values[ i ] );
        if( valid( item ) )
            ::DeleteItem( item );
    }
    return 0;
}

uint e_DamageMustard( uint[] @ values )
{
    uint[] newValue = {};
    ::Map@     map = null;
    ::Critter@ cr = null;

    for( uint i = 0, l = values.length(); i < l; i++ )
    {
        if( values[ i ] == 0 )
            continue;

        ::Item@ item = ::GetItem( values[ i ] );

        if( valid( item ) )
        {
            if( item.Accessory == ACCESSORY_HEX )
            {
                @ map = ::GetMap( item.MapId );
                if( valid( map ) )
                {
                    @ cr = map.GetCritter( item.HexX, item.HexY );
                    if( valid( cr ) )
                    {
                        _MustardGasWalk( item, cr, true, 0 );
                    }
                }
            }
            newValue.insertLast( item.Id );
        }

    }

    if( newValue.length() != 0 )
    {
        values = newValue;
        return uint( REAL_SECOND( 1 ) );
    }

    return 0;
}

void _SmokeInit( ::Item& item, bool firstTime )
{
    if( !firstTime )
        ::DeleteItem( item );
    else
    {
        SETFLAG( item.Flags, ITEM_NO_BLOCK );
        SETFLAG( item.Flags, ITEM_SHOOT_THRU );
        if( item.GetProtoId() == Content::Item::MUSTARD_GAS )
        {
            item.SetEvent( ITEM_EVENT_WALK, "SmokeGrenade::_MustardGasWalk" );

            uint[] id = { item.Id };
            ::CreateTimeEvent( ::__FullSecond + uint( REAL_SECOND( 1 ) * 0.5 ), "SmokeGrenade::e_DamageMustard", id, true );

            uint16 hx = 0, hy = 0;
            ::Map@ map = item.GetMapPosition( hx, hy );
            if( valid( map ) )
            {
                ::Critter@ cr = map.GetCritter( hx, hy );
                if( valid( cr ) )
                {
                    _MustardGasWalk( item, cr, true, 0 );
                }
            }
        }
    }
}

void _MustardGasWalk( ::Item& mine, ::Critter& cr, bool entered, uint8 dir )
{
    if( entered )
    {
        if( ( cr.IsNpc() || cr.Mode[ MODE_NO_PVP ] == 0 ) )
            Poison::Affect( cr, ::Random( 3, 5 ) );
    }
}

void AddSmoke( ::Map@ map, uint16 hexX, uint16 hexY, bool place, int16 pid, int ownerId, uint[]& ids )
{
    ::Item@ old = map.GetItem( hexX, hexY, pid );
    if( valid( old ) )
        ::DeleteItem( old );
    if( valid( map ) && place && ( map.IsHexPassed( hexX, hexY ) || valid( map.GetCritter( hexX, hexY ) ) ) )
    {
        ::Item@ item = map.AddItem( hexX, hexY, pid, 1 );
        if( valid( item ) )
        {
            item.Val0 = ownerId;
            ids.insertLast( item.Id );
            item.SetScript( "SmokeGrenade::_SmokeInit" );
        }
    }
}

void SmokeBlast( ::Critter& cr, int pid, int, int )
{
    SmokeBlast( cr.GetMap(), cr.HexX, cr.HexY, uint16( pid ), cr.Id );
}
#endif
