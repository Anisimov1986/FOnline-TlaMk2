// FOS Mapper
// Autor Cracker
// Скрипт генерации карт.

//#Mk2@MapGeneration::registration
//#Mk2@MapGeneration::generation Wastland
//#Mk2@MapGeneration::draw

#include "_mapper_defines.fos"

#define CFG_FILE_NAME        "Generation.cfg"

CConfig@ Config = null;
GeneratedMap@ Generation = null;

int ScrollBlockPid = 4012;

// Класс гекса
class CHex
{
    CHex( uint16& x, uint16& y )
    {
        X = x;
        Y = y;
		
        Tile = 0;
        ObjectLength = 0;
        SectionIndex = 0;
    }

    void DrawTile( ::MapperMap& map, bool is_clear )
    {
		/*if( is_clear )
		{
			{
				MapperObject@[] objects;
				map.GetObjects( X, Y, 0, MAP_OBJECT_CRITTER, 0, objects );
				map.GetObjects( X, Y, 0, MAP_OBJECT_ITEM, 0, objects );
				map.GetObjects( X, Y, 0, MAP_OBJECT_SCENERY, 0, objects );
				DeleteObjects( objects );
			}
			
			{
				uint count = map.GetTilesCount( X, Y, true );
				while( count-- > 0 )	map.DeleteTile( X, Y, true, 0 );
				
				count = map.GetTilesCount( X, Y, false );
				while( count-- > 0 )	map.DeleteTile( X, Y, false, 0 );
			}
		}*/
	
        if( Tile != 0 )
            map.AddTile( X, Y, 0, 0, 0, false, Tile );
			
        for( uint i = 0; i < ObjectLength; i++ )
            map.AddObject( X, Y, ObjectType[ i ], ObjectPids[ i ] );
    }

    void AddObj( int& pid, const int type )
    {
		if( ObjectPids.find( pid ) == -1 )
		{
			ObjectLength++;
			ObjectPids.insertLast( pid );
			ObjectType.insertLast( type );
		}
    }

    bool IsFreeScenery( uint16[]& pids )
    {
        for( uint i = 0; i < ObjectLength; i++ )
            if( pids.find( ObjectPids[ i ] ) != -1 && ObjectType[ i ] == MAP_OBJECT_SCENERY )
                return false;
				
        return true;
    }

    uint 			Tile					= 0;
    uint			SectionIndex			= 0;
    uint16		X						= 0;
    uint16		Y						= 0;
	
	uint[] 		Tags;
	
    private uint  	 ObjectLength	= 0;
    private uint16[] ObjectPids;
    private int[] 	 ObjectType;
}

class CRandom
{
    int last;
	int begin;

    CRandom() { construct( ::Random( -2147483647 , 2147483646 ) ); }
    CRandom(int seed){ construct( seed ); }

	private void construct( int seed )
	{
		begin = last = seed;
	}
	
    int next(int min, int max)
	{
		last ^= (last << 21);
        last ^= (last >>> 35);
        last ^= (last << 4);
		return min + ( ( last < 0 ? -last : last ) %( max - min + 1) );
	}
	
	void drop( ){ last = begin; }
	
}

// Главный класс менеджмента генерации.
class GeneratedMap
{
    GeneratedMap( ::MapperMap& map, ThisModule::Type& type, ThisModule::CRandom& random ){ construct( map, type, random ); }
	
    private void construct( ::MapperMap& map, ThisModule::Type& type, ThisModule::CRandom& random  )
    {
        {
            Width = map.Width;
			Height = map.Height;
			
            // Определяем карту, заливая все поле главным тайлом.
			Hexs.resize( Width * Height );
            for( uint16 x = 0; x < Width; x++ )
                for( uint16 y = 0; y < Height; y++ )
                {
                    ThisModule::CHex@ hex = ThisModule::CHex( x, y );
                    if( y % 2 != 1 && x % 2 != 1 )
                        hex.Tile = type.Main.GetTile( random );
					
					@Hexs[ x + y * Width  ] = @hex;
                }

            // Расставляем блокираторы
            if( ::__MapHexagonal )
            {
				uint16 varx = Width * 0.5, vary = 0;
                ThisModule::CHex starth( varx, vary );
                ThisModule::CHex angle = starth;

                angle.AddObj( ScrollBlockPid, MAP_OBJECT_SCENERY );
                ThisModule::CHex block1 = angle;
                ScrollBlocker.insertLast( block1 );
                uint CountBlock = 0;
                for( ; angle.X > 0; CountBlock++ )
                {
                    ::MoveHexByDir( angle.X, angle.Y, 1, 1 );
                    ThisModule::CHex block1 = angle;
                    block1.AddObj( ScrollBlockPid, MAP_OBJECT_SCENERY );
                    ScrollBlocker.insertLast( block1 );
                }
                ThisModule::CHex angle1 = angle;
                angle = starth;
				varx = Width - 1;
				vary = Height - ( angle1.Y + 1 );
                for( ; angle.X < Width;)
                {
                    ::MoveHexByDir( angle.X, angle.Y, ::GetDirection( angle.X, angle.Y, varx, vary ), 1 );
                    ThisModule::CHex block1 = angle;
                    block1.AddObj( ScrollBlockPid, MAP_OBJECT_SCENERY );
                    ScrollBlocker.insertLast( block1 );
                }

                for( uint countBlock = 0; countBlock <= CountBlock; countBlock++ )
                {
                    ::MoveHexByDir( angle.X, angle.Y, 1, 1 );
                    ThisModule::CHex block1 = angle;
                    block1.AddObj( ScrollBlockPid, MAP_OBJECT_SCENERY );
                    ScrollBlocker.insertLast( block1 );
                }
                for( ; ::GetDistantion( angle.X, angle.Y, angle1.X, angle1.Y ) != 0;)
                {
                    ::MoveHexByDir( angle.X, angle.Y, ::GetDirection( angle.X, angle.Y, angle1.X, angle1.Y ), 1 );
                    ThisModule::CHex block1 = angle;
                    block1.AddObj( ScrollBlockPid, MAP_OBJECT_SCENERY );
                    ScrollBlocker.insertLast( block1 );
                }
            }
            else
            {
                for( uint16 x = Width * 0.5, y = 1; y < Height * 0.5; y++ )
                {
                    ThisModule::CHex block1( x, y );
                    block1.AddObj( ScrollBlockPid, MAP_OBJECT_SCENERY );
                    ScrollBlocker.insertLast( block1 );
                    x--;
                    ThisModule::CHex block2( x, y );
                    block2.AddObj( ScrollBlockPid, MAP_OBJECT_SCENERY );
                    ScrollBlocker.insertLast( block2 );
                }
                for( uint16 x = Width * 0.5, y = 1; y < Height * 0.5; y++ )
                {
                    ThisModule::CHex block1( x, y );
                    block1.AddObj( ScrollBlockPid, MAP_OBJECT_SCENERY );
                    ScrollBlocker.insertLast( block1 );
                    x++;
                    ThisModule::CHex block2( x, y );
                    block2.AddObj( ScrollBlockPid, MAP_OBJECT_SCENERY );
                    ScrollBlocker.insertLast( block2 );
                }
                for( uint16 y = Height, x = Width * 0.5; x < Width; x++ )
                {
                    ThisModule::CHex block1( x, y );
                    block1.AddObj( ScrollBlockPid, MAP_OBJECT_SCENERY );
                    ScrollBlocker.insertLast( block1 );
                    y--;
                    ThisModule::CHex block2( x, y );
                    block2.AddObj( ScrollBlockPid, MAP_OBJECT_SCENERY );
                    ScrollBlocker.insertLast( block2 );
                }
                for( uint16 y = Height * 0.5, x = 1; x < Width * 0.5; x++ )
                {
                    ThisModule::CHex block1( x, y );
                    block1.AddObj( ScrollBlockPid, MAP_OBJECT_SCENERY );
                    ScrollBlocker.insertLast( block1 );
                    y++;
                    ThisModule::CHex block2( x, y );
                    block2.AddObj( ScrollBlockPid, MAP_OBJECT_SCENERY );
                    ScrollBlocker.insertLast( block2 );
                }
            }
        }
    }
	
	void Generated( ::MapperMap& map, ThisModule::Type& type, ThisModule::CRandom& random )
	{
		for( uint s = 0, sm = type.Sections.length(); s < sm; s++ )
		{
			ThisModule::Section@ section = type.Sections[ s ];
			{
				for( uint i = 0, im = section.Count.Get( random ); i < im; i++ )
				{
					uint16 memX = random.next( 0, Width - 2 ), 
							 memY = random.next( 0, Height - 2 );
				   
					if( memX % 2 != 0 ) memX--;
					if( memY % 2 != 0 ) memY--;
					
					GetHex( memX, memY ).Tile = section.GetTile( random );
					ThisModule::CHex@[] Seedsi;
					int size = section.Size.Get( random );
					while( size-- != 0 )
					{
						{
							int rand = random.next( 0, 3 ); 
							switch( rand )
							{
							case 0: memX -= 2; break;
							case 1: memY += 2; break;
							case 2: memX += 2; break;
							case 3: memY -= 2; break;
							default: 			 break;
							}
						}
						if( memX >= ( Width ) || memY >= ( Height ) || memX == 0 || memY == 0 )
						{
							memX = random.next( 0, Width - 2 );
							memY = random.next( 0, Height - 2 );
							if( memX % 2 == 1 )
								memX--;
							if( memY % 2 == 1 )
								memY--;
						}
						
						if( GetHex( memX, memY ).SectionIndex == 0 )
						{
							ThisModule::CHex@ hex = @GetHex( memX, memY );
							Seedsi.insertLast( @hex );
							hex.Tile = section.GetTile( random );
							hex.SectionIndex = s;
						}
					}
					// Заполняем гексы Сида Сценери.
					for( uint isc = 0, iscm = section.objects.length(); isc < iscm; isc++ )
					{
						ThisModule::object@ scenery = section.objects[ isc ];
						if( (@scenery is null) || scenery.CountPids == 0 )
							continue;
							
						for( uint j = 0, jm = Seedsi.length(); j < jm; j += scenery.Distance.Get( random ) )
						{
							ThisModule::CHex@ hex = Seedsi[ j ];
							if( IsHexFree( hex.X, hex.Y, scenery.Distance.Get( random ), @scenery ) )
							{
								hex.AddObj( scenery.Get( random ), MAP_OBJECT_SCENERY );
								Seedsi.removeAt( j-- );
								jm--;
							}
						}
					}
				}
			}
		}
	}
	
    void DrawMap( ::MapperMap& map)
    {
		Log( Hexs.length() ); // Без этой херни повторная отрисовка затягивается, надо разобраться.
		{
			// Log( "Draw tiles ");
			for( uint i = 0, max = Hexs.length(); i < max; i++ )
			{
				
				// Log( " " + i );
				Hexs[ i ].DrawTile( map, true );
				
			}		
			// Log( "Finish ");
		}
		
        for( uint b = 0, maxB = ScrollBlocker.length(); b < maxB; b++ )
            ScrollBlocker[ b ].DrawTile( map, false );
    }

    bool IsHexFree( uint16& x, uint16& y, uint radius, ThisModule::object@ scenery )
    {
        for( uint16 ix = x - radius, ixm = radius + x + 1; ix < ixm; ix++ )
            for( uint16 iy = y - radius, iym = radius + y + 1; iy < iym; iy++ )
                if( !GetHex( ix < Width ? ix : x, iy < Height ? iy : y ).IsFreeScenery( scenery.ListPids ) )
                    return false;
        return true;
    }

	ThisModule::CHex@ GetHex( uint16& x, uint16& y )
	{
		return @Hexs[ x + y * Width  ];
	}
	
    ThisModule::CHex@[] ScrollBlocker;
    ThisModule::CHex@[] Hexs;
	
    private uint16     	Width 		= 0;
    private uint16     	Height 	= 0;
}

class Type
{
    Type( ThisModule::Section@[] sections, ::string& name )
    {
		Name = name;
		NameHash = ::GetStrHash( Name );

        for( uint i = 0, im = sections.length(); i < im; i++ )
        {
			ThisModule::Section@ section = @sections[i];
			if( section.Name == "Main" )
				@Main = @section;
			else
			{
				Sections.insertLast( @section );
			}
        }
    }
	
	::string Name;
	uint	 NameHash;
	
    ThisModule::Section@ Main;
    ThisModule::Section@[] Sections;
}

class Section
{
    Section( ::string& name )
    {
		objects.resize( 0 );
		Tiles.resize( 0 );
		TileLength = 0;
		Name = name;
		NameHash = ::GetStrHash( Name );
    }

    void RefreshTiles( ::string@[] secondt, ::string@ name )
    {
        Tiles.resize( secondt.length() );
        for( uint i = 0, im = Tiles.length(); i < im; i++ )
            @Tiles[ i ] = ThisModule::ConfigValueHash( secondt[ i ] );
			
		TileLength = Tiles.length();
    }

    void RefreshScenery( ThisModule::object@[] scenery )
    {
        objects.resize( scenery.length() );
        for( uint i = 0, im = objects.length(); i < im; i++ )
            objects[ i ] = scenery[ i ];
    }

    void AddScenery( ThisModule::object@ scenery )
    {
        objects.insertLast( scenery );
    }
	
	uint GetTile( ThisModule::CRandom& random )
	{
		return Tiles[ random.next( 0, TileLength - 1 ) ].Get( random );
	}

	ThisModule::ConfigValue@ Count	= null;
	ThisModule::ConfigValue@ Size	= null;
    ThisModule::object@[] objects;
	
    private ThisModule::ConfigValue@[] Tiles;
	private uint TileLength = 0;
	
	::string Name 			= "";
	uint	 NameHash 	= 0;
}

class object
{
	object( ::string& name )
	{
		Name = name;
		NameHash = ::GetStrHash( Name );
	}

    void AddPid( ::string& value )
    {
		CountPids++;
		ThisModule::ConfigValueInteger pid( value );
		for( int i = pid.Min; i < pid.Max; i++ )
			ListPids.insertLast( i );
        Pids.insertLast( @pid );
    }
	
	int Get( ThisModule::CRandom& random )
	{
		return Pids[ random.next( 0 , CountPids - 1 ) ].Get( random );
	}
	
	bool exists( uint16 pid )
	{
		return ListPids.find( pid ) != -1;
	}
	
    void AddTags( )
    {
        
    }

	ThisModule::ConfigValue@   Distance	= null;
	uint 			  CountPids 	= 0;
    ThisModule::ConfigValue@[] Pids;
    uint16[] 		  ListPids;
	
	::string Name					= "";
	uint	 NameHash				= 0;
	
	ThisModule::ConfigValueHash@[] Tags;
	ThisModule::ConfigValueHash@[] BlockTags;	
}

interface ConfigValue
{
	void Set( ::string&in value );
	int Get( ThisModule::CRandom& random );
}

class ConfigValueHash : ThisModule::ConfigValue
{
	ConfigValueHash( ::string& value )
	{
		Set( value );
	}

	int Get( ThisModule::CRandom& random ) override
	{
		if( Last == -1 )
			return 0;
		return HashList[random.next( 0, Last )];
	}
	
	void Set( ::string&in value ) override
	{
		int range0 = ::findFirst( value, "<" );
		::string@[] values = {};
		if( range0 == -1 )
			values.insertLast( value );
		else 
		{
			int range1 = -1;
			
			values.insertLast( ::substring( value, 0, range0 ) );
			
			while( range0 != -1 )
			{
				range1 = ::findFirst( value, ">", range0 );
				ThisModule::ConfigValueInteger range( ::substring( value, range0 + 1, range1 - range0 - 1 ) );

				for( uint i = 0, im = values.length(); i < im; i++ )
				{
					for( int v = range.Min + 1, count = range.Max + 1; v < count; v++ )
						values.insertLast( values[i] + "" + v );					
					values[i] += range.Min;
				}

				range0 = ::findFirst( value, "<", range1 );
				::string end = ::substring( value, range1 + 1, range0 - 1 );
				for( uint i = 0, im = values.length(); i < im; i++ )
					values[i] += end;
			}
		}

        HashList.resize( values.length() );
        for( uint i = 0, im = HashList.length(); i < im; i++ )
		{
			uint hash = ::GetStrHash( values[ i ] );
			if( hash != 0 )
				HashList[ i ] = hash;
			else
			{
				i--;
				HashList.resize( --im );
			}
		}
		Last = HashList.length() - 1;
	}

	int Last = -1;
	int[] HashList;
}

class ConfigValueInteger : ThisModule::ConfigValue
{
	ConfigValueInteger( ::string& value )
	{
		Set( value );
	}

	int Get( ThisModule::CRandom& random ) override
	{			
		if( Min == Max )
			return Min;
		return random.next( Min, Max );
	}
	
	void Set( ::string&in value ) override
	{
		::string@[] values = ::splitEx( value, "-" );
		if( 1 <= values.length() )
		{
			::StrToInt( values[0], Min );
			if( 2 == values.length() )
				::StrToInt( values[1], Max );
			else Max = Min;
		}
	}

	int Min = 0;
	int Max = 0;
}

class CConfig
{
	bool Read( )
	{		
		::file f;
		@Text = null;
		Carriage = 0;
		Block = 0;
		if( f.open( CFG_FILE_NAME, "r" ) != -1 )
		{
			@Text = "";
			f.readString( uint( f.getSize() ), Text );
			f.close();
			ReplaceTextEx( "\n", " " );
			ReplaceTextEx( "\t", " " );
			ReplaceText( "{", " { " );
			ReplaceText( "}", " } " );
			ReplaceTextEx( " ", " " );
			file w;
			if( w.open( "log.gen", "w" ) != -1 )
			{
				w.writeString( Text );
				w.close();
			}
			CountLetters = Text.length();
			return true;
		}
		return false;
	}
	
	void ReplaceText( ::string&in delimiter, ::string&in j ){ @Text = @::join( ::split( Text, delimiter ), j ); }
	void ReplaceTextEx( ::string&in delimiter, ::string&in j ){ @Text = @::join( ::splitEx( Text, delimiter ), j ); }
	
	// Word
	
	int NextWord( )
	{
		@Word = "";
		if( CountLetters <= Carriage )
			return -1;
			
		int last = Carriage,
			 carr = ::findFirstOf ( Text, " {}", last );
		
		::string letter = ::substring ( Text, carr, 1 );
		
		if( letter == "{" )
		{
			Carriage = ++carr;
			return ++Block;
		}
		if( letter == "}" )
		{
			Carriage = ++carr;
			return --Block;
		}
		
		Carriage = carr;
		@Word = ::substring ( Text, last, Carriage - last);
		Carriage+=1;
		
		if( Word == "" )
			return NextWord( );
		return Block;
	}
	
	uint Carriage;
	uint CountLetters;

	::string@ Text;
	::string@ Word;
	
	int Block;
	
	void AddType( ::string@ name )
	{
		TypeLibrary.set( name, TypesName.length() );
		TypesName.insertLast( name );
	}
	
    CConfig()
    {
        if( Read( ) )
        {
			while( NextWord( ) >= 0 )
			{
				if( Word == "Types" )
				{
					int currentBlock = 1 + Block;
					while( NextWord( ) == currentBlock )
						AddType( Word );
				}
				else
				{
					if( !TypeLibrary.exists( Word ) )
					{
						AddType( Word );
					}
					
					::string typeName = Word;
					
					::string@[] maineAdress;
                    ThisModule::Section@[] secs;
					
					int currentBlock = 1 + Block;
					while( NextWord( ) >= currentBlock )
					{
						if( Word == "Section" )
						{
							NextWord( );
							ThisModule::Section section( Word );
							
							int nsblock = 1 + Block;
							while( NextWord( ) >= nsblock )
							{
								if( Word == "Count" )
								{
									int block = 1 + Block;
									while( NextWord( ) >= block )
										@section.Count = ThisModule::ConfigValueInteger( Word );
								}
								else if( Word == "Size" )
								{
									int block = 1 + Block;
									while( NextWord( ) >= block )
										@section.Size = ThisModule::ConfigValueInteger( Word );
								}
								else if( Word == "Tiles" )
								{
									// default
									NextWord( );
									::string name = Word;
	
									::string@[] secondAdress;
									int block = 1 + Block;
									while( NextWord( ) >= block )
									{
										if( Word != " " && Word != "" )
										{
											::string word = "art/tiles/" + Word;
											secondAdress.insertLast( @word );
										}
									}
									
									section.RefreshTiles( secondAdress, name );
								}
								else if( Word == "Object" )
								{
									NextWord( );
									::string name = Word;
									
									ThisModule::object scseed( name );
									int sblock = 1 + Block;
									
									while( NextWord( ) >= sblock )
									{
										if( Word == "Distance" )
										{
											int block = 1 + Block;
											while( NextWord( ) >= block )
												@scseed.Distance = ThisModule::ConfigValueInteger( Word );
										}
										else if( Word == "Pids" )
										{
											int block = 1 + Block;
											while( NextWord( ) >= block )
											{
												if( Word != " " && Word != "" )
													scseed.AddPid( Word );
											}
										}
									}
									section.AddScenery( scseed );
								}
							}
							secs.insertLast( section );
						}
					}
					TypeSeed.insertLast( ThisModule::Type( secs, typeName ) );
				}
			}
        }
        else
            ::Message( "Файл генерации отсутствует." );
    }

    ::string@[] TypesName;
    ::dictionary TypeLibrary;
    ThisModule::Type@[] TypeSeed;
}

::string GenerationMap( ::string str )
{
    if( @Config !is null )
    {
		if( Config.TypeLibrary.exists( str ) )
		{
			uint type = 0;
			Config.TypeLibrary.get( str, type );
			return GenerationMap( type );
        }
        return "Библиотека типов не найдена.";
    }
    return "В памяти нету готовых конфигураций.";
}

::string GenerationMap( int type )
{
    if( @Config !is null )
    {
        if( @Config.TypeLibrary !is null )
        {
            if( Config.TypesName.length() > uint( type ) )
            {
                ::MapperMap@ map = GetActiveMap();
                if( @map is null )
                    return "Для генерации маски необходима карта.";
				ThisModule::CRandom random();
				ThisModule::Type@ seed = Config.TypeSeed[type];
                @Generation = GeneratedMap( map, seed, random );
				uint st = ::GetTick();
				Generation.Generated( map, seed, random );
                return "Маска карты сгенерированна по типу <" + Config.TypesName[type] + "> " + ( ( ::GetTick() - st ) * 0.001 ) + "s";
            }
            else
                return "Типа с номером " + type + " не существует в конфигурации.";
        }
        return "Библиотека типов не найдена.";
    }
    else
        return "В памяти нету готовых конфигураций.";
}

::string DrawMap()
{
    if( @Generation !is null )
    {
		::MapperMap@ m = GetActiveMap();
		if( @m is null )
			return "Для генерации маски необходима карта.";
			
        uint st = ::GetTick();
        Generation.DrawMap( m );
        return "Сгенерированная карта удачно отрисована. " + ( ( ::GetTick() - st ) * 0.001 ) + "s";
    }
    else
        return "В памяти нету сгенерированных масок.";
}

::string generation( ::string str )
{
    int type = 0;
    if( ::StrToInt( str, type ) )
        return GenerationMap( type );
    return GenerationMap( str );
}

void ModuleInit( )
{
	Message( registration() );
}

::string registration( ::string )
{
    return registration();
}

::string draw( ::string )
{
    return DrawMap();
}

::string registration()
{
    @Config = CConfig();
    return "Собраны наборы: " + ::join( Config.TypesName, "; " );
}

::MapperMap@ GetActiveMap()
{
    ::MapperMap@[] maps;
    int cur = ::GetLoadedMaps( maps );
    if( cur == -1 )
        return null;
    return maps[ cur ];
}
