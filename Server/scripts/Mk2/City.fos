// FOS Server
// city

// Временое событие разрешения ношения оружия.

// Определение зданий
// Гекс находится на территории здания.
bool CritterInHouse(::Critter& cr)
{
	if (!validEngineObject(cr)) return false;
	::array<::Scenery@> scs = {};
	if(cr.GetMap().GetSceneries(cr.HexX, cr.HexY, scs)==0) 
		return false; 
	for(uint i=0; i<=scs.length();i++)
		if(ZONE_HOUSE_HEX(scs[i].ProtoId)) return true;
	
	return false;
}

bool HexInHouse( ::Map& map, uint16 hexX, uint16 hexY)
{
	::array<::Scenery@> scs = {};
	if(validEngineObject(map) && map.GetSceneries(hexX, hexY, scs)!=0)
		for(uint i=0; i<=scs.length();i++)
			if(ZONE_HOUSE_HEX(scs[i].ProtoId)) 
				return true;
	return false;
}

// Гекс находится на территории определенного здания.
bool CritterInHouse(::Critter& cr, uint8& typeZone)
{
	if (!validEngineObject(cr) || !validEngineObject(cr.GetMap())) return false;
	::array<::Scenery@> scs = {};
	if(cr.GetMap().GetSceneries(cr.HexX, cr.HexY, scs)==0) return false; 
	for(uint i=0; i<=scs.length();i++)
	{
		if(ZONE_HOUSE_HEX(scs[i].ProtoId)) 
		{
			switch (scs[i].ProtoId)
			{
				case	HEX_PID_HOUSE_SHOP: typeZone=HEX_ZONE_HOUSE_SHOP;
					break;
				case	HEX_PID_HOUSE_BAR:	typeZone=HEX_ZONE_HOUSE_BAR;
					break;
				case	HEX_PID_HOUSE_BANK:	typeZone=HEX_ZONE_HOUSE_BANK;
					break;
				case	HEX_PID_HOUSE_RESIDENTIAL:	typeZone=HEX_ZONE_HOUSE_RESIDENTIAL;
					break;
				default: continue; 
			}
			return true;
		}
	}
	return false;
}

void Test( ::Critter& c, int a, int, int)
{
	if(a==1)
	{
		CritterInHouse(c);
	}
	else if(a==2)
	{
		uint8 TZ=0;
		CritterInHouse(c,TZ);
		::string message = "";
		switch (TZ)
		{
			case 0: message="Нет";
					break;
			case 1: message="Магазин";
					break;
			case 2: message="Бар";
					break;
			case 3: message="Банк";
					break;
			case 4: message="Жилой";
					break;
			default: break;
		}
		Log(message);
		c.Say( SAY_NETMSG, message); 
	}
}

bool CritterInProtectZone( ::Critter& guard, ::Critter& cr)
{
	if (!validEngineObject(guard) || !validEngineObject(cr)) return false;
	uint8 	typeZoneGuard=0,
			typeZoneCr=0;
	if(CritterInHouse(guard, typeZoneGuard) && CritterInHouse(cr, typeZoneCr)) 
	{
		if(typeZoneGuard==typeZoneCr)
		{
			if(cr.GetMap().Id==guard.GetMap().Id)
			{
				uint16 len= ::GetDistantion(guard.HexX, guard.HexY, cr.HexX, cr.HexY);
				
				for(uint i=0; i<=len; i++)
				{
					uint16 hexX=cr.HexX; uint16 hexY=cr.HexY;
					cr.GetMap().MoveHexByDir(hexX, hexY, ::GetDirection(cr.HexX, cr.HexY, hexX, hexY), i+1);
					if (!HexInHouse(cr.GetMap(),hexX, hexY)) return false;
				}
				return true;
			}
		}
	}
	return false;	
	
}

void Test2( ::Critter& cr, int ID,int,int)
{
	Log( "" + CritterInProtectZone(cr, ::GetCritter(ID)));
}

// ~run Mk2 City::Test2 id 0 0 
