// FOS Server Client
// Author: marvi

#ifdef __SERVER
enum Define
{
// dialogs
	Dialog = 110,
	DialogTreasure = 127,
	
// dialog string numbers
    StrNumScream                =  1 ,
    StrNumSteal                 =  2 ,
    StrNumStealInjure          =  3 ,

// ghost states
    GhostAlive                  =  0 ,
    GhostDead                   =  1 
}

/*
   ::Critter initialization
 */
void _GhostInit( ::Critter& ghost, bool firstTime )
{
    if( firstTime )
    {
        // set max possible HP
        ghost.StatBase[ ST_MAX_LIFE ] = 9999;
        ghost.StatBase[ ST_CURRENT_HP ] = 9999;
        // and armor class
        ghost.StatBase[ ST_ARMOR_CLASS ] = 90;
    }

    // syncronize ghost actual state with var value
    if( ghost.Cond == COND_DEAD && GetGhostIsDead() == DenGhost::Define::GhostAlive )
    {
        ghost.ToLife();
    }
    else if( ghost.Cond != COND_DEAD && GetGhostIsDead() == DenGhost::Define::GhostDead )
    {
        ghost.ToDead( ANIM2_DEAD_BURN_RUN, null );
    }
	
	::__EventCritterAttacked.SubscribeToCritter( @_GhostAttacked, @ghost );
	::__EventCritterDead.SubscribeToCritter( @_GhostDead, @ghost );
	::__EventCritterRespawn.SubscribeToCritter( @_GhostRespawn, @ghost );
	::__EventCritterStealing.SubscribeToCritter( @_GhostStealing, @ghost );
	::__EventCritterShowMe.SubscribeToCritter( @_GhostShowMe, @ghost );
	//::__EventCritterShowMe.Subscribe( @_GhostShowMe );
}

bool _GhostShowMe( ::Critter@, ::Critter@ )
{
    uint16 year = 0, month = 0, day_of_week = 0, day = 0, hour = 0, minute = 0, second = 0;
    ::GetGameTime( ::__FullSecond, year, month, day, day_of_week, hour, minute, second );
	bool show = hour > 0 && hour < 4;
	return show;
}
//
// Event Handlers
//

bool _GhostAttacked( ::Critter@ ghost, ::Critter@ attacker )
{
    // regenerate HP
    ghost.StatBase[ ST_CURRENT_HP ] = ghost.Stat[ ST_MAX_LIFE ];

    // scream to scary player
    ghost.SayMsg( SAY_SHOUT_ON_HEAD, TEXTMSG_DLG,
                  DLGSTR( DenGhost::Define::Dialog, DenGhost::Define::StrNumScream ) );

    // do nothing after attack
    return true;
}

bool _GhostDead( ::Critter@ ghost, ::Critter@ killeer )
{
    // ghost killed not through quest dialog
    if( GetGhostIsDead() != DenGhost::Define::GhostDead )
    {
        // ressurect ghost
        ::CreateTimeEvent( ::__FullSecond + 60, "DenGhost::e_RessurectGhost", ghost.Id, false );
    }
	return true;
}

bool _GhostRespawn( ::Critter@ )
{
    SetGhostIsDead( DenGhost::Define::GhostAlive );
	return true;
}

/*
   Handles stealing from ghost.
   Stealing attempt fails in any case with a chance for player to cripple right hand.
 */
bool _GhostStealing( ::Critter@ ghost, ::Critter@ thief, bool& success, ::Item@ item, uint count )
{
    if( thief.IsPlayer() )
    {
        int injureHandChance = 20,
             injureHandRoll = ::Random( 1, 100 );

        if( injureHandRoll <= injureHandChance )
        {
            thief.DamageBase[ DAMAGE_RIGHT_ARM ] = 1;
            thief.SayMsg( SAY_NETMSG, TEXTMSG_DLG,
                             DLGSTR( DenGhost::Define::Dialog, DenGhost::Define::StrNumStealInjure ) );
        }
        else
        {
            thief.SayMsg( SAY_NETMSG, TEXTMSG_DLG,
                             DLGSTR( DenGhost::Define::Dialog, DenGhost::Define::StrNumSteal ) );
        }
    }
	return true;
}

//
// Dialog
//

/*
   Instantly kills ghost
 */
void r_KillGhost( ::Critter& player, ::Critter@ ghost, int val )
{
    // confirm that ghost killed through quest dialog
    SetGhostIsDead( DenGhost::Define::GhostDead );
    // kill ghost
    ghost.ToDead( ANIM2_DEAD_BURN_RUN, null );
    // run new dialog through time event
    ::CreateTimeEvent( ::__FullSecond + 60, "DenGhost::e_RunTreasureDialog", player.Id, false );
}

//
// Time Event Handlers
//

/*
   Ressurects ghost
 */
uint e_RessurectGhost( uint[] @ values )
{
    ::Critter@ ghost = ::GetCritter( values[ 0 ] );
    if( !valid( ghost ) )
    {
        return 0;
    }

    // try to ressurect ghost
    if( ghost.ToLife() )
    {
        return 0;
    }
    else
    {
        // restart event
        return 2 * 60;
    }
}

/*
   Runs dialog about cursed treasure
 */
uint e_RunTreasureDialog( uint[] @ values )
{
    ::Critter@ player = ::GetCritter( values[ 0 ] );
    if( !valid( player ) )
    {
        return 0;
    }

    ::Mk2RunDialog( player, DenGhost::Define::DialogTreasure, player.GetMap(), player.HexX, player.HexY, false );

    return 0;
}

//
// Helper functions
//

/*
   Gets variable 'den_ghost_is_dead'
 */
int GetGhostIsDead()
{
    ::GameVar@ isDead = ::GetGlobalVar( GVAR_den_ghost_is_dead );
    if( !valid( isDead ) )
        return -1;
    return isDead.GetValue();
}

/*
   Sets variable 'den_ghost_is_dead'
 */
void SetGhostIsDead( int value )
{
    ::GameVar@ isDead = ::GetGlobalVar( GVAR_den_ghost_is_dead );
    if( !valid( isDead ) )
        return;
    isDead = value;
}

#endif

#ifdef __CLIENT

void ModuleInit( )
{
	::__EventInCritter.Subscribe( InGhost );
}

bool InGhost( ::CritterCl@ cr )
{
	if( cr.Pid == NPC_PID_ToughGhoul )
	{
		uint16 year = 0, month = 0, day_of_week = 0, day = 0, hour = 0, minute = 0, second = 0;
		::GetGameTime( ::__FullSecond, year, month, day, day_of_week, hour, minute, second );
		bool show = hour > 0 && hour < 4;
		if( show )
			::SetEffect( EFFECT_2D_CRITTER, cr.Id, "Ghost" );
		else
			cr.SetVisible ( false );
	}
	return true;
}

#endif
