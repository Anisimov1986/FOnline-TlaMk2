// FOS Server
// Avanpost::


enum Defines
{
	MsgProtocolActiveId = 100012
}

void r_SetTracker( ::Critter& master, ::Critter@ )
{
	::Map@ map = master.GetMap();
	if(validEngineObject(map))
	{
		::Location@ loc = map.GetLocation();
		if(validEngineObject(loc))
		{
			int trackId=int(loc.GetProtoId()-300);
			master.Say(SAY_NETMSG, "trackId =" + trackId );
			SetTracker(master, trackId);
		}
	}
}

void _TurretInit( ::Critter& turret, bool )
{
#ifndef __NO_FAVORIT_ITEMS
	turret.SetFavoriteItem(SLOT_HAND1, Content::Item::DUAL_MINIGUN);
#endif
	turret.ModeBase[MODE_UNLIMITED_AMMO]=1;
	::__EventCritterShow.SubscribeToCritter( @_CheckEnemy, turret );
}

bool _CheckEnemy( ::Critter@ turret, ::Critter@ showCr)
{
	if( turret.GetProtoId() == showCr.GetProtoId() ) return true;
	if(turret.Stat[ST_FACTION]==0)
	{
		turret.AddEnemyInStack(showCr.Id);
		NpcPlanes::AddAttackPlane(turret,0,showCr);
	}
	else if( turret.Stat[ST_FACTION] == -1 ) 
		return true;
	else
	{
		if(turret.Stat[ST_FACTION] == showCr.Stat[ST_FACTION]) 
			return true;
		::Fraction@ fr=Fractions::Get( turret.Stat[ST_FACTION] );
		if(!valid(fr)) 
			return true;
			
		for(uint n=0, nMax=fr.Allies.length(); n<nMax; n++)
			if( uint( showCr.Stat[ST_FACTION] ) == fr.Allies[n]) 
				return true;

		turret.SayMsg(SAY_NORM_ON_HEAD,TEXTMSG_TEXT,Avanpost::Defines::MsgProtocolActiveId);
		turret.AddEnemyInStack(showCr.Id);
		NpcPlanes::AddAttackPlane(turret,40,showCr);
	}
	return false;
}

bool s_Terminal( ::Critter& player, ::Scenery& terminal, int skill, ::Item@ item)
{
	if(player.IsPlayer() && skill==-1 && !validEngineObject(item)) 
		::Mk2RunDialog(player,6000, player.GetMap(), terminal.HexX,terminal.HexY,false);
	return true;
}

void r_ActSecurity( ::Critter& master, ::Critter@ )
{
	::array<::Critter@> turrets;
	::array<uint> enemies;
	::Critter@	cr=null,
				turret=null;
	::Map@ map = master.GetMap();
	if( validEngineObject( map ) )
		for(uint n=0, nMax=map.GetCritters(480, FIND_ALL, turrets); n<nMax; n++)
		{
			@ turret=turrets[n];
			if( validEngineObject( turret ) )
			{
				enemies.resize(0);
				turret.GetEnemyStack(enemies);
				for(uint m=0, mMax=enemies.length(); m<mMax;m++)
				{
					@ cr= ::GetCritter(enemies[m]);
					if(validEngineObject(cr)) 
						NpcPlanes::EraseAttackPlane(turret, cr);
				}
				turret.ClearEnemyStack();
				turret.StatBase[ST_FACTION]=master.Stat[ST_FACTION];
			}
		}
}

void r_DeactSecurity( ::Critter& master, ::Critter@ slave)
{
	::array<::Critter@> turrets;
	::Critter@	turret=null,
				cr=null;
	::array<uint> enemies;

	::Map@ map = master.GetMap();
	if( validEngineObject( map ) )
		for(uint n=0, nMax=map.GetCritters(480, FIND_ALL, turrets); n<nMax; n++)
		{
			@turret=turrets[n];
			if( validEngineObject( turret ) )
			{
				enemies.resize(0);
				turret.GetEnemyStack(enemies);
				for(uint m=0, mMax=enemies.length(); m<mMax;m++)
				{
					@cr= ::GetCritter(enemies[m]);
					if(validEngineObject(cr)) NpcPlanes::EraseAttackPlane(turret, cr);
				}
				turret.ClearEnemyStack();
				turret.StatBase[ST_FACTION]=-1;
			}
		}
}