// FOS Server 
#define ENTIRE_NUMBER_START (0) // Первый энтери будет это значение + ST_NPC_ROLE. 
#define ENTIRE_NUMBER_END   (10)	//Последний энтери будет это значение + ST_NPC_ROLE

#define MIN_RANDOM 		(5)  // Лучше не трогать. Не делать больше пяти(MAX_RANDOM)!
#define MAX_RANDOM		(5) // Менять чтобы изменять шанс того что нпц пойдет к следующей точки (чем выше, тем ниже шанс) Не делать меньше пяти(5)!

int MIN_RANDOM_DIST=(0); // Радиус гексов 
int MAX_RANDOM_DIST=(0); // от энтери

void _PatrolInit( ::Critter& mov, bool firstTime)
{
	mov.SetEvent(CRITTER_EVENT_IDLE, "Move::_Patrol");
}

void _Patrol(::Critter& cr)
{
	Patrol(cr,cr.StatBase[ST_NPC_PATROL_ID], MIN_RANDOM_DIST,MAX_RANDOM_DIST , ENTIRE_NUMBER_START, cr.Stat[ST_NPC_PATROL_NUMBER], MIN_RANDOM,MAX_RANDOM, 5, false, true);
}

void Patrol( ::Critter& cr,uint numberPatrol, int MinRandomDist, int MaxRandomDist , uint EntireNumberStart, uint EntireNumberEnd, int MinRandom, int MaxRandom, int NecessaryRandom, bool HouseMove, bool RandomDir)
{
	if(cr.Skill[SK_SNEAK]>=150) cr.ModeBase[MODE_HIDE]=1;
	uint npcRole=numberPatrol;
	if(::Random(MinRandom,MaxRandom)!=NecessaryRandom) return;
	::GameVar@ movGVq = ::GetLocalVar(LVAR_move_enteri,cr.Id);
	if( !valid(movGVq)) return;
	uint movGV=movGVq.GetValue();
	if(HouseMove)
	{
		movGV = ::Random(EntireNumberStart+npcRole,EntireNumberEnd+npcRole);
	}
	else 
	{ 
		if(movGV==0) 
			movGV=EntireNumberStart+npcRole;
		else if(movGV!=EntireNumberEnd+npcRole)
			movGV+=1;
		else 
			movGV=EntireNumberStart+npcRole;
	}
	
	uint LastEntiry=movGVq.GetValue(); 
	movGVq=movGV;
 
	uint16 hx=0, hy=0, LEhx=0, LEhy=0;
  
	if (!Entires::GetEntireFreeHex(cr.GetMap(),movGV,hx,hy))
	{
		Entires::GetEntireFreeHex(cr.GetMap(),npcRole,hx,hy);
		movGVq=npcRole;
	}	
	Entires::GetEntireFreeHex(cr.GetMap(),LastEntiry,LEhx,LEhy);
	uint16 hX=hx+::Random(MinRandomDist,MaxRandomDist);
	uint16 hY=hy+::Random(MinRandomDist,MaxRandomDist);
    cr.SetHomePos(hX,hY,RandomDir==true?::Random(0,5):(::GetDirection(hX,hY, LEhx,LEhy)));
}

// Autor Tab10id
// Tab10id begin_ 

#define WALK_PERIOD (REAL_SECOND( ::Random(8,18)))
#define MAXDIST (8) // Максимальное расстояние от HomePos
#define MAXDISTEXT (3) // Максимальное расстояние, на которое может отойти криттер за один раз
#define MAXTRY (10) // Количество попыток найти новую точку назначения

void _CritInit( ::Critter& crit, bool firstTime)
{
	uint8 run=0;
	InitWalkRandom(crit, run);
	crit.ModeBase[MODE_NO_HOME]=1; // Отменяем возвращение игрока на HomePos
	crit.SetEvent(CRITTER_EVENT_TALK,"Move::_NpcTalk"); // Обрабатываем попытку игрока заговорить с нпц
	crit.SetEvent(CRITTER_EVENT_PLANE_END,"Move::_PlaneEnd"); // Создаем новое событие для передвижения нпц (нпц дошел до точки назначения)
	crit.SetEvent(CRITTER_EVENT_RESPAWN,"Move::_InitWalk"); // Возобновляем движение после респа
	crit.SetEvent(CRITTER_EVENT_DEAD,"Move::_OnDead"); // Отменяем попытку передвижения, в случае смерти нпц
}

void InitWalkRandom( ::Critter& crit, uint8 run)
{
	if(!crit.IsLife())
		return;
		
	EraseTE(crit);
	crit.AddTimeEvent("Move::cte_WalkRandom",WALK_PERIOD,CTE_WALK_RANDOM,run);
}

uint cte_WalkRandom( ::Critter& crit, int identifier, int& run, int& )
{
	int incr=0; // Для избегания зацикливания в случае заблокированного пути
	if (!validEngineObject(crit))
		return 0;

	if(crit.IsDead())
	{
		return 0;
	}
	
	::Map@ map=crit.GetMap();
	if (!validEngineObject(map))
		return 0;
	
	
	uint homeM=0;
	uint16 x = 0, y = 0, homeX=0, homeY=0;
	uint8 homeD=0, dir = 0;
	//uint&inout, uint16&inout, uint16&inout, uint8&inout
	crit.GetHomePos(homeM,homeX,homeY,homeD);	
	if ((int(crit.HexX)<int(homeX)-MAXDIST) or (int(crit.HexX)>int(homeX)+MAXDIST) or (int(crit.HexY)<int(homeY)-MAXDIST) or (int(crit.HexY)>int(homeY)+MAXDIST))
	{
		crit.ModeBase[MODE_NO_HOME]=0; // Заставляем нпц вернуться на HomePos, если он каким-то образом отошел от нее далеко (например, в результате атаки)
	}
	else
	{
		do
		{
			do
			{
				x=crit.HexX+::Random(-MAXDISTEXT,MAXDISTEXT);
			}
			while((x>homeX+MAXDIST) or (x<homeX-MAXDIST));
			
			do
			{
				y=crit.HexY+::Random(-MAXDISTEXT,MAXDISTEXT);
			}
			while((y>homeY+MAXDIST) or (y<homeY-MAXDIST));
			
			incr++;
		}
		while(((map.GetPathLength(crit.HexX,crit.HexY,x,y,0)==0) or (map.GetPathLength(crit.HexX,crit.HexY,x,y,0)>MAXDISTEXT)) and (incr<MAXTRY)); // Пытаемся найти новую точку назначения
		
		if(incr<MAXTRY)
		{
			dir=::GetDirection(crit.HexX,crit.HexY,x,y);
			NpcPlanes::AddWalkPlane(crit, AI_PLANE_WALK_PRIORITY, x, y, dir, run==1, 0);
		}
		else
			StartWalkRandom(crit);
	}
	return 0;
}

bool _NpcTalk( ::Critter& crit, ::Critter& player, bool attach, uint talkCount)
{
	if(attach)
	{
		CancelWalkRandom(crit); // Отменяем все планы на передвижения
		crit.SetDir(::GetDirection(crit.HexX,crit.HexY,player.HexX,player.HexY)); // Поворачиваемся лицом к игроку
	}
	else
		StartWalkRandom(crit); // Возобновляем движение
	return true;
}

void StartWalkRandom( ::Critter& crit)
{
	if(crit.Mode[MODE_NO_HOME]==0)
		crit.ModeBase[MODE_NO_HOME]=1;
		
	InitWalkRandom(crit, 0);
}

void CancelWalkRandom( ::Critter& crit)
{
	_NpcEraseAllPlanesWalk(crit);
	EraseTE(crit);
}

int _PlaneEnd( ::Critter& crit, ::NpcPlane& plane, int reason, ::Critter@ someCr, ::Item@ someItem)
{
	StartWalkRandom(crit); // Возобновляем движение
	return PLANE_RUN_GLOBAL;
}

void _InitWalk( ::Critter& crit)
{
	InitWalkRandom(crit, 0); // Возобновляем движение
}

void _OnDead( ::Critter& crit, ::Critter@ killer)
{
	EraseTE(crit);
}

void EraseTE( ::Critter& crit)
{
	crit.EraseTimeEvents(CTE_WALK_RANDOM);
}
// _end Tab10id 