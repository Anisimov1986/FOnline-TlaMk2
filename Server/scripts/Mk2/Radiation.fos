// FOS Server
// Author: cvet
// Original Fallout2 system

#define RADIATION_STAGES           (6)
#define RADIATION_STATS            (8)
#define RADIATION_DURATION         (10080*60)
#define RADIATION_DAMAGE_VALUE     (66)
#define RADIATION_HIGH_DOSE        (66)
#define RADIATION_DEAD_DOSE        (1800)

#define STR_RADIATION_STAGE #(stage) (12799+(stage))
#define STR_RADIATION_DIE            (12806)
#define STR_RADIATION_HIGH_DOSE      (12807)

const ::array<int> Effects={
						        1,  100,  200,  400,  600, 1000, /*stages values*/
                ST_STRENGTH,    0,    0,    0,    2,    4,    6, /*stats amount*/
              ST_PERCEPTION,    0,    0,    1,    0,    3,    5,
               ST_ENDURANCE,    0,    0,    0,    1,    3,    5,
                ST_CHARISMA,    0,    0,    0,    0,    3,    5,
               ST_INTELLECT,    0,    0,    0,    0,    1,    3,
				 ST_AGILITY,    0,    0,    1,    2,    5,    6,
		      ST_CURRENT_HP,    0,    1,    3,    5,   15,   20,
    		ST_HEALING_RATE,    0,    0,    0,    5,   10,   10,
};

// Table offsets
#define TABLE_STAGE_VALUE #(stage)          Effects[(stage)-1]
#define TABLE_STAT_INDEX #(stat)            Effects[6+(stat)*7]
#define TABLE_STAT_AMOUNT #(stat,stage)     Effects[6+(stat)*7+(stage)]


void Affect(::Critter& cr, int value) // Export
{
	if(cr.IsDead() || cr.Stat[ST_BODY_TYPE]==BT_ROBOT || cr.Stat[ST_BODY_TYPE]==BT_ALIEN || cr.IsFarmGenerated) return;
	
	int levelVal=cr.Stat[ST_RADIATION_LEVEL];
	int resistVal=cr.Stat[ST_RADIATION_RESISTANCE];

	if(value>=0) value-=value*resistVal/100;
	cr.StatBase[ST_RADIATION_LEVEL]=CLAMP(levelVal+value,0,2000);
	levelVal=cr.Stat[ST_RADIATION_LEVEL];

	if(value>RADIATION_HIGH_DOSE) cr.SayMsg(SAY_NETMSG,TEXTMSG_GAME,STR_RADIATION_HIGH_DOSE);

	if(levelVal>=RADIATION_DAMAGE_VALUE)
	{
		if(cr.Damage[DAMAGE_RADIATED]==0) cr.DamageBase[DAMAGE_RADIATED]=1;
	}
	else
	{
		if(cr.Damage[DAMAGE_RADIATED]!=0) cr.DamageBase[DAMAGE_RADIATED]=0;
	}

	uint[] indexes;
	int[] rates;
	if(cr.GetTimeEvents(CTE_RADIATION,indexes,null,rates)!=0) // Try begin event with new effects
	{
		uint stage=rates[0];
		uint newStage=GetStage(levelVal);
		if(stage!=newStage) cr.ChangeTimeEvent(indexes[0],0,stage, 0);
	}
	else // Try start new event
	{
		int stage1Val=TABLE_STAGE_VALUE(1);
		if(levelVal>=stage1Val) cr.AddTimeEvent("Mk2@Radiation::cte_Radiation",0,CTE_RADIATION);
	}

	if(levelVal>=RADIATION_DEAD_DOSE)
	{
		cr.ToDead(ANIM2_DEAD_FUSED,null);
		cr.SayMsg(SAY_NETMSG,TEXTMSG_GAME,STR_RADIATION_DIE);
	}
}

void Drop(::Critter& cr) // Export
{
	if(cr.GetTimeEvents(CTE_RADIATION,null,null,null)!=0)
	{
		uint stage=GetStage(cr.Stat[ST_RADIATION_LEVEL]);
		ChangeStage(cr,stage,false);
		cr.EraseTimeEvents(CTE_RADIATION);
	}
	cr.StatBase[ST_RADIATION_LEVEL]=0;
	if(cr.Damage[DAMAGE_RADIATED]!=0) cr.DamageBase[DAMAGE_RADIATED]=0;
}

uint cte_Radiation(::Critter& cr, int identifier, int& stage, int&)
{
	if(cr.IsDead()) return REAL_MINUTE(5);

	int newStage=GetStage(cr.Stat[ST_RADIATION_LEVEL]);
	uint duration=RADIATION_DURATION;

	if(stage!=newStage) // Set new effects
	{
		ChangeStage(cr,stage,false);
		ChangeStage(cr,newStage,true);
		stage=newStage;
	}
	else // Erase effects
	{
		ChangeStage(cr,stage,false);
		duration=0;
	}
	return duration;
}

uint GetStage(int level)
{
	for(uint i=0,j=RADIATION_STAGES;i<=j;i++)
	{
		int valMin=(i>0?TABLE_STAGE_VALUE(i):0);
		int valMax=(i<j?TABLE_STAGE_VALUE(i+1):level+1);
		if(level>=valMin && level<valMax) return i;
	}
	return 0;
}

void ChangeStage(::Critter& cr, uint stage, bool gain)
{
	if(stage==0) return;
	if(gain) cr.SayMsg(SAY_NETMSG,TEXTMSG_GAME,STR_RADIATION_STAGE(stage));

	for(uint i=0,j=RADIATION_STATS;i<j;i++)
	{
		uint statIndex=TABLE_STAT_INDEX(i);
		int statAmount=TABLE_STAT_AMOUNT(i,stage);

		if(statAmount!=0)
		{
			int curVal=cr.Stat[statIndex];

			if(gain) // Gain effect
			{
				statAmount=-statAmount;
				if(statIndex<STAT_EXT_BEGIN) cr.StatBase[STAT_EXT_BEGIN+statIndex]+=statAmount;
				else if(statIndex==ST_CURRENT_HP)
				{
					cr.StatBase[ST_CURRENT_HP]+=statAmount;
					if(cr.Stat[ST_CURRENT_HP]<=0) cr.ToDead(ANIM2_DEAD_FUSED,null);
				}
			}
			else // Reduce effect
			{
				if(statIndex<STAT_EXT_BEGIN) cr.StatBase[STAT_EXT_BEGIN+statIndex]+=statAmount;
			}
		}
	}
}