// FOS Server

void UpdateItem(::Critter& cr, int idItem, int idUpdater, int updateSlot, ::string@, ::array<int>@ )
{
	::Item@ item = ::GetItem(idItem),
			updaterItem = ::GetItem(idUpdater);
		
	if( !validEngineObject(updaterItem) || !validEngineObject(item) )
		return;
		
	uint flag = 0;
	uint flagBussy = 0;
	if( updateSlot == 0 )
	{
		if( FLAG(item.CraftFlags,CF_UPGRADE_SLOT_0) && !FLAG(item.CraftFlags,CF_UPGRADE_SLOT_0_BUSSY) )			updateSlot = 1;
		else if( FLAG(item.CraftFlags,CF_UPGRADE_SLOT_1) && !FLAG(item.CraftFlags,CF_UPGRADE_SLOT_1_BUSSY) )		updateSlot = 2;
		else if( FLAG(item.CraftFlags,CF_UPGRADE_SLOT_2) && !FLAG(item.CraftFlags,CF_UPGRADE_SLOT_2_BUSSY) )		updateSlot = 3;
	}
	
	switch( updateSlot )
	{
		case 3:
			flag = CF_UPGRADE_SLOT_2;
			flagBussy = CF_UPGRADE_SLOT_2_BUSSY;
			break;
		case 2:
			flag = CF_UPGRADE_SLOT_1;
			flagBussy = CF_UPGRADE_SLOT_1_BUSSY;
			break;
		case 1:
			flag = CF_UPGRADE_SLOT_0;
			flagBussy = CF_UPGRADE_SLOT_0_BUSSY;
			break;
		
		default:
			return;
	}
	
	
	//cr.Say(SAY_NETMSG, "0 " + valid(updaterItem) + " " + valid(item) + " " + FLAG(item.CraftFlags,flag) + " " + (!FLAG(item.CraftFlags,flagBussy)) + " " + (!FLAG(updaterItem.CraftFlags,CF_UPGRADE_SLOT_0)) + " " + (!FLAG(updaterItem.CraftFlags,CF_UPGRADE_SLOT_1)) + " " + (!FLAG(updaterItem.CraftFlags,CF_UPGRADE_SLOT_2)) 
	//+ " " + (item.Accessory == ACCESSORY_CRITTER) + " " + (updaterItem.Accessory == ACCESSORY_CRITTER) + " " +  (updaterItem.CritId	== item.CritId) );
	if( !FLAG(item.CraftFlags,flag) || FLAG(item.CraftFlags,flagBussy) || FLAG(updaterItem.CraftFlags,CF_UPGRADE_SLOT_0) || FLAG(updaterItem.CraftFlags,CF_UPGRADE_SLOT_1) || FLAG(updaterItem.CraftFlags,CF_UPGRADE_SLOT_2) ||
		item.Accessory != ACCESSORY_CRITTER || updaterItem.Accessory != ACCESSORY_CRITTER || updaterItem.CritId	!= item.CritId )
		return;
	//cr.Say(SAY_NETMSG, "1");
	
	UpgradeItem::UpgradeDescriptor@ itemDescriptor = cast< UpgradeItem::UpgradeDescriptor@ >( @item.ScriptDescriptor ),
											updateDescriptor = cast< UpgradeItem::UpgradeDescriptor@ >( @updaterItem.ScriptDescriptor );
	if( itemDescriptor is null || updateDescriptor is null )
	{
		Log( "Error upgrade. Descriptor no valide");
		return;
	}
	
	if( !itemDescriptor.IsUpgrade( item, updaterItem ) && !updateDescriptor.IsUpgrade( item, updaterItem ) )
	{
		Log( "Error upgrade. Item no isUpgrade");
		return;
	}
	
	bool free = false;
	switch( updateSlot )
	{
		case 3:
			free = item.UpgradeSlot2 == item.Id;
			break;
		case 2:
			free = item.UpgradeSlot1 == item.Id;
			break;
		case 1:
			free = item.UpgradeSlot0 == item.Id;
			break;
		
		default:
			return;
	}
	
	if( free )
	{
		//cr.Say(SAY_NETMSG, "3");
		
		::Map@ mapj = ::GetMapByPid( MAP_junk_yard_items, 0 );
        if( validEngineObject( mapj ) )
		{
			uint hX = ::Random( 1, 100 ),
				 hY = ::Random( 1, 100 );
			uint currWhile = 0;
                    
			while( not mapj.IsHexPassed( hX, hY ) )
			{
				hX = ::Random( 1, 100 );
				hY = ::Random( 1, 100 );
					if( currWhile++ > 50 )
						break;
			}
			
			Item@ oldUpdaterItem = updaterItem;
			uint oldvar = 0;
			switch( updateSlot )
			{
				case 3:
				{
					oldvar = oldUpdaterItem.UpgradeSlot2;
					oldUpdaterItem.UpgradeSlot2 = item.Id;
				}	break;
				case 2:
				{
					oldvar = oldUpdaterItem.UpgradeSlot1;
					oldUpdaterItem.UpgradeSlot1 = item.Id;
				}	break;
				case 1:
				{
					oldvar = oldUpdaterItem.UpgradeSlot0;
					oldUpdaterItem.UpgradeSlot0 = item.Id;
				}	break;
				
				default:
					return;
			}
			
			@updaterItem = ::MoveItem( updaterItem, 1, mapj, hX, hY );
			
			if( oldUpdaterItem !is updaterItem )
				switch( updateSlot )
				{
					case 3:
						oldUpdaterItem.UpgradeSlot2 = oldvar;
						break;
					case 2:
						oldUpdaterItem.UpgradeSlot1 = oldvar;
						break;
					case 1:
						oldUpdaterItem.UpgradeSlot0 = oldvar;
						break;
					
					default:
						return;
				}
			
			if( @updaterItem !is null )
			{
				SETFLAG(updaterItem.CraftFlags,flag);
				SETFLAG(item.CraftFlags,flagBussy);
				//SETFLAG(updaterItem.Flags,ITEM_HIDDEN);
				switch( updateSlot )
				{
					case 3:
						item.UpgradeSlot2 = updaterItem.Id;
						break;
					case 2:
						item.UpgradeSlot1 = updaterItem.Id;
						break;
					case 1:
						item.UpgradeSlot0 = updaterItem.Id;
						break;
					
					default:
						return;
				}
			}
			
			item.Update();
			updaterItem.Update();
		}
	}
}
