// FOS Server

void UnsafeFunc( Offer )
{
	Critter::CritterDescriptor@ descriptor = cast<Critter::CritterDescriptor>(@player.ScriptDescriptor);
	if( @descriptor is null )
		return;
		
	::Critter@ cr = ::GetCritter( descriptor.CritterBarterId );
	
	if( @cr !is null && cr.Mode[MODE_NO_BARTER] == 0 )
	{
		if( Barter::IsOffer( player, cr, param4 ) )
		{
			uint index = 0,
				  count = uint( param4[index++] );
			while( index < count )
			{
				::Item@ item = cr.GetItemById( param4[index++] );
				if( @item !is null )
					::MoveItem( item, param4[index++], player );
			}
			
			count = param4.length();
			index++;
			while( index < count )
			{
				::Item@ item = player.GetItemById( param4[index++] );
				if( @item !is null )
					::MoveItem( item, param4[index++], cr );
			}
		}
		
		Barter::Call( player, cr );
	}
}

Critter @ GetRandomPlayer()
{
    int tries = 20;
    Map@[] maps;
    Critter@[] players;
    Critter@ player;
    uint countPlayers = 0;

    Location@[] locs;
    uint endLocsIndex = GetAllLocations( 0, locs ) - 1;
    while( tries-- > 0 )
    {
        for( uint i = 0, iMax = locs[ Random( 0, endLocsIndex ) ].GetMaps( maps ); i < iMax; i++ )
            countPlayers += maps[ i ].GetCritters( 0, FIND_LIFE|FIND_ONLY_PLAYERS, players );
        if( countPlayers > 0 )
            return players[ Random( 0, countPlayers - 1 ) ];
        maps.resize( 0 );
    }
    return null;
}