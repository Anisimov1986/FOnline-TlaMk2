// FOS Server
// Author rifleman17
// Странствующий путник, Илай.
// Может брать с собой одного игрока в качестве спутника
// Если путника убьет персонаж, у которого есть база, после этого Илай отведет следующего игрока на базу убийцы.
// не надо ставить его в СФ, иначе не выберется
// eli

enum Define
{
    CteHealSelf     = 41 ,
    StrAttacked     = 1 ,
    StrAttack       = 2 ,
    StrKill         = 3 ,
    StrTime2Move    = 4 ,
    StrPick         = 5 ,
    PlaneLoot       = 30
}

uint EliId = 0;

void _EliInit( ::Critter& cr, bool firstTime )
{
    EliId = cr.Id;
    // Прокачка
    for( uint i = ST_STRENGTH; i <= ST_LUCK; i++ )
    {
        cr.StatBase[ i ] = ::Random( 12, 15 );
    }
    for( uint i = ST_NORMAL_RESIST; i <= ST_POISON_RESISTANCE; i++ )
    {
        if( i == ST_EMP_RESIST )
            continue;
        cr.StatBase[ i ] = ::Random( 200, 280 );
    }
    cr.StatBase[ ST_MAX_LIFE ] = 1000;
    cr.StatBase[ ST_CURRENT_HP ] = cr.Stat[ ST_MAX_LIFE ];
    cr.StatBase[ ST_MELEE_DAMAGE ] = 45;
    cr.StatBase[ ST_ACTION_POINTS ] = 50;
    cr.StatBase[ ST_CRITICAL_CHANCE ] = 65;
    cr.ModeBase[ MODE_GECK ] = 1;
    cr.ModeBase[ MODE_NO_HOME ] = 1;
    cr.ModeBase[ MODE_NO_STEAL ] = 1;
    cr.ModeBase[ MODE_NO_BARTER ] = 1;
    cr.StatBase[ ST_HEALING_RATE ] = 100;
    for( uint i = SKILL_BEGIN; i <= SKILL_END; i++ )
    {
        cr.SkillBase[ i ] = ::Random( 100, 300 );
    }
    cr.SkillBase[ SK_OUTDOORSMAN ] = 50;
    cr.PerkBase[ PE_BONUS_HTH_ATTACKS ] = 3;
    cr.PerkBase[ PE_BONUS_HTH_DAMAGE ] = 3;
    cr.PerkBase[ PE_BETTER_CRITICALS ] = 1;
    cr.PerkBase[ PE_SILENT_DEATH ] = 1;
    cr.PerkBase[ PE_SLAYER ] = 1;
    cr.StatBase[ ST_CRITICAL_RESISTANCE ] = 85;
    uint16[] locPids;
    for( uint16 i = LOCATION_Den; i <= LOCATION_GeckCity; i++ )
    {
        if( i == LOCATION_SanFrancisco || i == LOCATION_Atoll || i == LOCATION_Cathedral || i == LOCATION_MilitaryBase || i == LOCATION_Sierra || i == LOCATION_Raiders || i == LOCATION_Replication1 || i == LOCATION_Replication2 || i == LOCATION_Replication3 || i == LOCATION_Replication4 || i == LOCATION_ReplicationHell || i == LOCATION_Vault13 || i == LOCATION_TechBunker || i == LOCATION_Rangers )
            continue;
        locPids.insertLast( i );
    }
    Traveller::SetTraveller( cr.Id, false, 0, 60 * 60 * 24, 60 * 60 * 2, locPids, true );
    cr.SetEvent( CRITTER_EVENT_ATTACKED, "Eli::_EliAttacked" );
    cr.SetEvent( CRITTER_EVENT_PLANE_BEGIN, "Eli::_EliPlaneBegin" );
    cr.SetEvent( CRITTER_EVENT_PLANE_END, "Eli::_EliPlaneEnd" );
    cr.SetEvent( CRITTER_EVENT_IDLE, "Eli::_EliIdle" );
    cr.SetEvent( CRITTER_EVENT_SMTH_DEAD, "Eli::_EliSmthDead" );
    cr.SetEvent( CRITTER_EVENT_ATTACK, "Eli::_EliAttack" );
}

int _EliPlaneEnd( ::Critter& cr, ::NpcPlane& plane, int reason, ::Critter@ someCr, ::Item@ someItem )
{
    if( plane.Identifier == Eli::Define::PlaneLoot && reason == REASON_SUCCESS )
    {
        _CritAnimatePickup( cr );
        if( ::Random( 1, 3 ) < 2 )
            cr.SayMsg( SAY_NORM, TEXTMSG_DLG, DLGSTR( cr.Stat[ ST_DIALOG_ID ], Eli::Define::StrPick ) );
        NpcPlanes::AddMiscPlane( cr, AI_PLANE_ATTACK_PRIORITY - 2, 2 * ::__TimeMultiplier, null );
    }
    return PLANE_RUN_GLOBAL;
}

bool _EliAttack( ::Critter& cr, ::Critter& target )
{
    if( ::Random( 1, 10 ) < 2 )
        cr.SayMsg( SAY_NORM, TEXTMSG_DLG, DLGSTR( cr.Stat[ ST_DIALOG_ID ], Eli::Define::StrAttack ) );
    return false;
}

void _EliSmthDead( ::Critter& cr, ::Critter& fromCr, ::Critter@ killer )
{
    if( valid( killer ) && killer.Id == cr.Id )
    {
        cr.SayMsg( SAY_NORM, TEXTMSG_DLG, DLGSTR( cr.Stat[ ST_DIALOG_ID ], Eli::Define::StrKill ) );
        NpcPlanes::AddWalkPlane( cr, 0, Eli::Define::PlaneLoot, fromCr.Id, fromCr.HexX, fromCr.HexY, 6, false, 1 );
    }
}

void _EliIdle( ::Critter& cr )
{
    if( !valid( cr.GetMap() ) || !cr.IsNoPlanes() )
    {
        if( cr.Stat[ ST_VAR2 ] > 0 )
            cr.StatBase[ ST_VAR2 ] = 0;
        return;
    }
    // Сохраняется время следующей песни в Var2
    if( uint( cr.Stat[ ST_VAR2 ] ) < ::__FullSecond )
    {
        if( cr.Stat[ ST_VAR2 ] > 0 )
        {
            DL( "sing!" );
            Sing( cr );
        }
        cr.StatBase[ ST_VAR2 ] = ::__FullSecond + 60 * 5 * ::__TimeMultiplier; // раз в 5 реальных минут
    }
}

void Sing( ::Critter& cr )
{
    uint8  song = ::Random( 1, 4 );
    uint16 firstStr = 0;
    uint16 lastStr = 0;
    switch( song )
    {
    case 1:
        firstStr = 5973;
        lastStr = 5978;
        break;
    case 2:
        firstStr = 5980;
        lastStr = 5987;
        break;
    case 3:
        firstStr = 5988;
        lastStr = 5997;
        break;
    case 4:
        firstStr = 5960;
        lastStr = 5967;
        break;
    default:
        return;
    }
    Monologue::Set( cr, firstStr, lastStr, 4 * ::__TimeMultiplier, 0, SAY_EMOTE_ON_HEAD );
}

// CRITTER_EVENT_PLANE_BEGIN
int _EliPlaneBegin( ::Critter& cr, ::NpcPlane& plane, int reason, ::Critter@ someCr, ::Item@ someItem )
{
    plane.Run = true;
    return PLANE_RUN_GLOBAL;
}
// CRITTER_EVENT_ATTACKED
bool _EliAttacked( ::Critter& cr, ::Critter& attacker )
{
    if( ::Random( 1, 10 ) < 3 )
        cr.SayMsg( SAY_NORM, TEXTMSG_DLG, DLGSTR( cr.Stat[ ST_DIALOG_ID ], Eli::Define::StrAttacked ) );
    if( cr.GetTimeEvents( Eli::Define::CteHealSelf, null, null, null ) == 0 )
        cr.AddTimeEvent( "Eli::cte_HealSelf", 0, Eli::Define::CteHealSelf );
    return false;
}

// Поиск новой точки маршрута нпц, производится при заходе в локацию
uint cte_HealSelf( ::Critter& cr, int identifier, int& rate, int& )
{
    cr.StatBase[ ST_CURRENT_HP ] += 50;
    if( cr.Stat[ ST_CURRENT_HP ] * 2 > cr.Stat[ ST_MAX_LIFE ] )
        return 0;
    ::Item@ drug = cr.AddItem( Content::Item::SUPER_STIMPAK, 1 );
    if( valid( drug ) )
        Drugs::Use( cr, drug );
    return 0;
}


// Debug
void WhereEli( ::Critter& cr, int, int, int )
{
    if( EliId == 0 )
        return;
    ::Critter@ eli = ::GetCritter( EliId );
    if( !valid( eli ) )
    {
        cr.Say( SAY_NETMSG, "Eli can't be found" );
        return;
    }
    ::Map@ map = eli.GetMap();
    if( !valid( map ) )
    {
        cr.Say( SAY_NETMSG, "Eli on global. X:" + eli.WorldX + "; Y:" + eli.WorldY );
        return;
    }
    cr.Say( SAY_NETMSG, "Eli found. MapPid=" + map.GetProtoId() + "; Id=" + map.Id );
}

// ~getaccess admin hh
// ~run debug ToMapEntire 34 0 0
// ~run eli AddEli 0 0 0
// ~run eli WhereEli 0 0 0
// ~settime 9999 2246 10 3 1 10 10 10
void AddEli( ::Critter& cr, int, int, int )
{
    ::Map@ map = cr.GetMap();
    if( !valid( map ) )
    {
        cr.Say( SAY_NETMSG, "Can't add Eli on global." );
        return;
    }
    int[] params = { ST_DIALOG_ID, DIALOG_eli, ST_BAG_ID, BAG_Eli, ST_REPLICATION_TIME, -1 };
    map.AddNpc( NPC_PID_Eli, cr.HexX + 1, cr.HexY + 1, 6, params, null, "Eli::_EliInit" );

}
