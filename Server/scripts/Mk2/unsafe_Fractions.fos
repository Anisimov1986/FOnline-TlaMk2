// FOS Server

enum Define
{
	CostCreateFraction = 1500000,
	CostAddPlayer = 100000
}

void DeleteOrg( ::Critter& cr, int, int, int, ::string@, int[] @ )
{
    cr.ShowScreen( SCREEN_DIALOGBOX, 1, "unsafe_Fractions::approveDeleting" );
    cr.SayMsg( SAY_DIALOGBOX_TEXT, TEXTMSG_GAME, 14036 );
    cr.SayMsg( SAY_DIALOGBOX_BUTTON( 0 ), TEXTMSG_GAME, 14037 );
}

void approveDeleting( ::Critter& cr, uint answerI, ::string& answerS )
{
    if( cr.Stat[ ST_FR_LEADERSHIP ] < 2 )
    {
        cr.Say( SAY_NETMSG, "FUCK YOU, CHEATER!" );
        return;
    }
    Fractions::DeleteFraction( cr.Stat[ ST_FACTION ] );
}

void RemoveEnemy( ::Critter& cr, int, int, int, ::string@ name, int[] @ )
{
    if( !valid( name ) )
    {
        cr.Say( SAY_NETMSG, "Error!\n ::Fraction name no correct." );
        return;
    }
    ::Fraction@ fr = Fractions::Get( name );
    ::Fraction@ masterFr = Fractions::Get( cr.Stat[ ST_FACTION ] );
    if( !valid( fr ) || !valid( masterFr ) )
    {
        cr.Say( SAY_NETMSG, "ERROR: ::Fraction not found!" );
        return;
    }
    for( uint n = 0, nMax = masterFr.Enemies.length(); n < nMax; n++ )
    {
        if( masterFr.Enemies[ n ] == fr.Id )
        {
            masterFr.Enemies.removeAt( n );
            break;
        }
    }
    cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 14038, "$name" + name );
    GetOrgEnemies( cr, 2, 0, 0, null, null );
}

void AddEnemy( ::Critter& cr, int, int, int, ::string@ name, int[] @ )
{
    if( cr.Stat[ ST_FR_LEADERSHIP ] < 2 )
    {
        cr.Say( SAY_NETMSG, "FUCK YOU, CHEATER!" );
        return;
    }
    if( !valid( name ) )
    {
        cr.Say( SAY_NETMSG, "Error!\n ::Fraction name no correct." );
        return;
    }
    ::Fraction@ masterFr = Fractions::Get( cr.Stat[ ST_FACTION ] );
    ::Fraction@ fr = Fractions::Get( name );
    if( !valid( masterFr ) || !valid( fr ) )
    {
        cr.Say( SAY_NETMSG, "ERROR: ::Fraction not found!" );
        return;
    }
    masterFr.AddEnemy( fr.Id );
    fr.AddEnemy( masterFr.Id );
    cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 14039, "$name" + name );
    GetUnrelatedList( cr, REASON_ADD_ENEMY, 0, 0, null, null );
}

void ApproveAlliance( ::Critter& cr, int, int, int, ::string@ name, int[] @ )
{
    if( cr.Stat[ ST_FR_LEADERSHIP ] < 2 )
    {
        cr.Say( SAY_NETMSG, "FUCK YOU, CHEATER" );
        return;
    }
    if( !valid( name ) )
    {
        cr.Say( SAY_NETMSG, "Error!\n ::Fraction name no correct." );
        return;
    }
    ::Fraction@ masterFr = Fractions::Get( cr.Stat[ ST_FACTION ] );
    ::Fraction@ fr = Fractions::Get( name );
    if( !valid( fr ) || !valid( masterFr ) )
    {
        cr.Say( SAY_NETMSG, "ERROR: fraction not found!" );
        return;
    }
    masterFr.ApproveAlliance( fr.Id );
    fr.ApproveAlliance( masterFr.Id );
    cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 14040, "$name" + name );
    GetAllianceRequests( cr, 0, 0, 0, null, null );
}

void RequestAlliance( ::Critter& cr, int, int, int, ::string@ name, int[] @ )
{
    if( cr.Stat[ ST_FR_LEADERSHIP ] < 2 )
    {
        cr.Say( SAY_NETMSG, "FUCK YOU, CHEATER" );
        return;
    }
    if( !valid( name ) )
    {
        cr.Say( SAY_NETMSG, "Error!\n ::Fraction name no correct." );
        return;
    }
    ::Fraction@ fr = Fractions::Get( name );
    if( !valid( fr ) )
    {
        cr.Say( SAY_NETMSG, "ERROR: ::Fraction not found!" );
        return;
    }
    for( uint n = 0; n < FR_MAX_REQUESTS; n++ )
    {
        if( fr.Requests[ n ] == 0 )
            break;
        else if( fr.Requests[ n ] == uint( cr.Stat[ ST_FACTION ] ) )
            return;
    }
    fr.AddAllianceRequest( cr.Stat[ ST_FACTION ] );
    cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 14041, "$name" + name );
    GetUnrelatedList( cr, REASON_REQUEST_FRIENDSHIP, 0, 0, null, null );
}

void GetUnrelatedList( ::Critter& cr, int reason, int, int, ::string@, int[] @ )
{
    ::string@[] list = Fractions::GetUnrelatedOrgList( cr.Stat[ ST_FACTION ] );
    if( list.length() == 0 )
    {
        cr.RunClientScript( "client_fraction_gui@__ManageShowUnrelated", reason, 1, 0, "%noneutraltag%", null );
        return;
    }
    cr.RunClientScript( "client_fraction_gui@__ManageShowUnrelated", reason, 0, 0, list.length() == 1 ? list[ 0 ] : ( ::join( list, "\n" ) ), null );
}

void GetAllianceRequests( ::Critter& cr, int, int, int, ::string@, int[] @ )
{
    ::Fraction@ fr = Fractions::Get( cr.Stat[ ST_FACTION ] );
    if( !valid( fr ) )
    {
        cr.Say( SAY_NETMSG, "ERROR: FRACTION NOT FOUND!" );
        return;
    }

    ::string  list;
    ::string@ cur;
    for( uint n = 0, nMax = fr.Requests.length(); n < nMax; n++ )
    {
        if( fr.Requests[ n ] == 0 )
            break;
        @cur = Fractions::GetName( fr.Requests[ n ] );
        if( valid( cur ) )
            list += cur + "\n";
    }
    if( valid( list ) && list.length() > 0 )
        cr.RunClientScript( "client_fraction_gui@__ManageShowRequests", 0, 0, 0, list, null );
    else
        cr.RunClientScript( "client_fraction_gui@__ManageShowUnrelated", 0, 1, 0, "%nofrrequeststag%", null );
}

void CancelAlliance( ::Critter& cr, int, int, int, ::string@ name, int[] @ )
{
    if( cr.Stat[ ST_FR_LEADERSHIP ] < 2 )
    {
        cr.Say( SAY_NETMSG, "FUCK YOU, CHEATER" );
        return;
    }
    if( !valid( name ) )
    {
        cr.Say( SAY_NETMSG, "Error!\n ::Fraction name no correct." );
        return;
    }
    ::Fraction@ masterFr = Fractions::Get( cr.Stat[ ST_FACTION ] );
    ::Fraction@ fr = Fractions::Get( name );
    if( !valid( fr ) || !valid( masterFr ) )
    {
        cr.Say( SAY_NETMSG, "ERROR: fraction not found!" );
        return;
    }
    for( uint n = 0, nMax = fr.Allies.length(); n < nMax; n++ )
    {
        if( fr.Allies[ n ] == masterFr.Id )
        {
            fr.Allies.removeAt( n );
            break;
        }
    }
    for( uint n = 0, nMax = masterFr.Allies.length(); n < nMax; n++ )
    {
        if( masterFr.Allies[ n ] == fr.Id )
        {
            masterFr.Allies.removeAt( n );
            break;
        }
    }
    cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 14042, "$name" + name );
    GetOrgFriends( cr, 2, 0, 0, null, null );
}

void CreateFraction( ::Critter& cr, int, int, int, ::string@, int[] @ )
{
    if( cr.GetAccess() == ACCESS_CLIENT )
    {
        // cr.Say(SAY_NETMSG,"Вам не доступна эта функция, для создания фракции обратитесь к администрации.");
        if( cr.Stat[ ST_FACTION ] != 0 )
        {
            cr.Say( SAY_NETMSG, "Error! ::Critter is already in fraction!" );
            return;
        }
        if( cr.Stat[ ST_LEVEL ] < 15 || cr.Stat[ ST_REPLICATION_MONEY ] < unsafe_Fractions::Define::CostCreateFraction )
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 14068 );
            return;
        }
        cr.ShowScreen( SCREEN_SAY, 0, "unsafe_Fractions::request_Org" );
        cr.SayMsg( SAY_SAY_TITLE, TEXTMSG_GAME, 14043 );
        return;
    }
    cr.ShowScreen( SCREEN_SAY, 0, "Fractions::create_Org" );
    cr.SayMsg( SAY_SAY_TITLE, TEXTMSG_GAME, 14043 );
}

void request_Org( ::Critter& cr, uint answerI, ::string& answerS )
{
    if( !Fractions::Exist( answerS ) )
    {
        if( answerS.length() < 2 || answerS.length() > 16 )
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 14044 );
            return;
        }
        if( !Fractions::CorrectName( ::strupr( answerS ) ) )
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 14075 );
            return;
        }
        answerS += "@" + ::GetPlayerName( cr.Id );
        cr.StatBase[ ST_REPLICATION_MONEY ] -= unsafe_Fractions::Define::CostCreateFraction;
        Fractions::_CreateFraction( cr, 0, 0, 0, answerS, null );
    }
    else
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 14046 );
}

void GetOrgStatistics( ::Critter& cr, int, int, int, ::string@, int[] @ )
{
    ::string statString = "";
    if( cr.Stat[ ST_FACTION ] == 0 )
        return;
    ::Fraction@ fr = Fractions::Get( cr.Stat[ ST_FACTION ] );
    if( !valid( fr ) )
        return;
    statString += "%nametag% " + Fractions::GetName( cr.Stat[ ST_FACTION ] ) + "\n";
    statString += "%ratingtag% " + fr.Stats[ FR_RATING ] + "\n";
    statString += "%killstag% " + fr.Stats[ FR_KILLS ] + "\n";
    statString += "%deathstag% " + fr.Stats[ FR_DEATHS ] + "\n";
    statString += "%enkillstag% " + fr.Stats[ FR_ENEMIES_KILLED ] + "\n";
    statString += "%frkillstag% " + fr.Stats[ FR_FRIENDS_KILLED ] + "\n";
    statString += "%moneytag% " + fr.Stats[ FR_MONEY ] + "\n";
    statString += "%poptag% " + fr.Stats[ FR_POPULATION ] + "\n";
    cr.RunClientScript( "client_fraction_gui@__FrScr_ShowInfo", 0, 0, 0, statString, null );
}

void GetOrgMembers( ::Critter& cr, int, int, int, ::string@, int[] @ )
{
    ::Fraction@ fr = Fractions::Get( cr.Stat[ ST_FACTION ] );
    if( !valid( fr ) )
        return;
    ::string@[]@ players = fr.GetPlayerList( 0 );
    ::string sendText = "";
    for( uint n = 0, nMax = players.length(); n < nMax; n++ )
    {
		if( players[n] is null ) 
			Log( "name no valid " + nMax );
        sendText += ( n + 1 ) + ") " + players[ n ] + "\n";
    }
    cr.RunClientScript( "client_fraction_gui@__FrScr_ShowInfo", 0, 0, 0, sendText, null );
}

void GetOrgFriends( ::Critter& cr, int screen, int, int, ::string@, int[] @ )
{
    ::Fraction@ fr = Fractions::Get( cr.Stat[ ST_FACTION ] );
    if( !valid( fr ) )
        return;
    bool   listEmpty = fr.Allies.length() == 0;
    ::string sendText = "";
    for( uint n = 0, nMax = fr.Allies.length(); n < nMax; n++ )
    {
        if( screen < 2 )
            sendText += ( n + 1 ) + ") " + Fractions::GetName( fr.Allies[ n ] ) + "\n";
        else
            sendText += Fractions::GetName( fr.Allies[ n ] ) + "\n";
    }
    if( listEmpty )
        sendText = "%nofriendstag%";
    if( screen == 0 )
        cr.RunClientScript( "client_fraction_gui@__FrScr_ShowInfo", 0, 0, 0, sendText, null );
    else if( screen == 1 || listEmpty )
        cr.RunClientScript( "client_fraction_gui@__ManageShowFriends", 0, 0, 0, sendText, null );
    else
        cr.RunClientScript( "client_fraction_gui@__ManageShowFriends", 1, 0, 0, sendText, null );
}

void GetOrgEnemies( ::Critter& cr, int screen, int, int, ::string@, int[] @ )
{
    ::Fraction@ fr = Fractions::Get( cr.Stat[ ST_FACTION ] );
    if( !valid( fr ) )
        return;
    ::string sendText = "";
    int    empty = ( fr.Enemies.length() == 0 ? 1 : 0 );
    for( uint n = 0, nMax = fr.Enemies.length(); n < nMax; n++ )
    {
        if( screen != 2 )
            sendText += ( n + 1 ) + ")" + Fractions::GetName( fr.Enemies[ n ] ) + "\n";
        else
            sendText += Fractions::GetName( fr.Enemies[ n ] ) + "\n";
    }
    if( empty == 1 )
        sendText = "%noenemiestag%";
    if( screen == 0 )
        cr.RunClientScript( "client_fraction_gui@__FrScr_ShowInfo", 0, 0, 0, sendText, null );
    else if( screen == 1 )
        cr.RunClientScript( "client_fraction_gui@__ManageShowEnemy", 0, 0, 0, sendText, null );
    else
        cr.RunClientScript( "client_fraction_gui@__ManageShowEnemy", 1, empty, 0, sendText, null );
}

void GetOrgStatByName( ::Critter& cr, int, int, int, ::string@ name, int[] @ )
{
    if( !valid( name ) )
    {
        cr.Say( SAY_NETMSG, "Error!\n ::Fraction name is not correct." );
        return;
    }
    ::Fraction@ fr = Fractions::Get( name );
    if( !valid( fr ) )
        return;
    ::string statString = "";

    statString += "%nametag% " + fr.Name + "\n";
    statString += "%ratingtag% " + fr.Stats[ FR_RATING ] + "\n";
    statString += "%killstag% " + fr.Stats[ FR_KILLS ] + "\n";
    statString += "%deathstag% " + fr.Stats[ FR_DEATHS ] + "\n";
    statString += "%enkillstag% " + fr.Stats[ FR_ENEMIES_KILLED ] + "\n";
    statString += "%frkillstag% " + fr.Stats[ FR_FRIENDS_KILLED ] + "\n";
    statString += "%moneytag% " + fr.Stats[ FR_MONEY ] + "\n";
    statString += "%poptag% " + fr.Stats[ FR_POPULATION ] + "\n";
    if( fr.Allies.length() > 0 )
    {
        statString += "\n %alliancetag% \n";
        for( uint n = 0, nMax = fr.Allies.length(); n < nMax; n++ )
        {
            statString += ( n + 1 ) + ") " + Fractions::GetName( fr.Allies[ n ] ) + "\n";
        }
        statString += "\n";
    }
    else
        statString += "\n %noalliancetag% \n";

    if( fr.Enemies.length() > 0 )
    {
        statString += "\n %enemytag% \n";
        for( uint n = 0, nMax = fr.Enemies.length(); n < nMax; n++ )
        {
            statString += ( n + 1 ) + ") " + Fractions::GetName( fr.Enemies[ n ] ) + "\n";
        }
        statString += "\n";
    }
    else
        statString += "\n %noenemytag% \n";

    cr.RunClientScript( "client_fraction_gui@__FrStat_ShowInfo", 0, 0, 0, statString, null );
}

void Fr_GUI_Reinit( ::Critter& cr, int frId, int leadership )
{
    cr.RunClientScript( "client_fraction_gui@__Scr_ReInit", frId, leadership, 0, null, null );
}

void InvitePlayer( ::Critter& cr, int, int, int, ::string@ name, int[] @ )
{
    if( !valid( name ) )
    {
        cr.Say( SAY_NETMSG, "Error!\n Incorrect player name." );
        return;
    }
    ::Fraction@ fr = Fractions::Get( cr.Stat[ ST_FACTION ] );
    ::Critter@  invited = ::GetPlayer( name );
    if( valid( invited ) )
    {
        if( invited.Stat[ ST_FACTION ] != 0 )
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 14047, "$name" + name + "$orgname" + Fractions::GetName( invited.Stat[ ST_FACTION ] ) );
        }
        else if( uint( invited.Stat[ ST_LAST_FACTION_QUIT ] + REAL_DAY( 1 ) ) > ::__FullSecond )
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 14076, "$pname" + name );
        }
        else if( valid( fr ) && fr.Stats[ FR_MONEY ] < uint( unsafe_Fractions::Define::CostAddPlayer ) )
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 14105, "$money" + unsafe_Fractions::Define::CostAddPlayer );
            return;
        }
        else
        {
            invited.StatBase[ ST_FR_CLIPBOARD ] = cr.Stat[ ST_FACTION ];
            invited.ShowScreen( SCREEN_DIALOGBOX, 1, "unsafe_Fractions::addPlayerToOrg" );
            invited.SayMsg( SAY_DIALOGBOX_TEXT, TEXTMSG_GAME, 14048, "$name" + ::GetPlayerName( cr.Id ) + "$orgname" + Fractions::GetName( cr.Stat[ ST_FACTION ] ) );
            invited.SayMsg( SAY_DIALOGBOX_BUTTON( 0 ), TEXTMSG_GAME, 14049 );
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 14050, "$name" + name );
        }
    }
    else
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 14103, "$name" + name );
    }
}

void addPlayerToOrg( ::Critter& cr, uint answerI, ::string& answerS )
{
    ::Fraction@ fr = Fractions::Get( cr.Stat[ ST_FR_CLIPBOARD ] );
    if( !valid( fr ) )
    {
        Log( "Warning! Faction not found! Id=" + cr.Stat[ ST_FR_CLIPBOARD ] );
        return;
    }
    if( fr.Stats[ FR_MONEY ] < uint( unsafe_Fractions::Define::CostAddPlayer ) )
        return;
    fr.Stats[ FR_MONEY ] -= unsafe_Fractions::Define::CostAddPlayer;
    fr.AddPlayer( cr.Id );
}

void GetLowPlayersList( ::Critter& cr, int, int, int, ::string@, int[] @ )
{
    ::Fraction@ fr = Fractions::Get( cr.Stat[ ST_FACTION ] );
    if( !valid( fr ) )
        return;
    int list = 1;
    ::string@[] players = fr.GetPlayerList( 1 );
    if( players.length() < 1 )
    {
        players.insertLast( "%nobodytag%" );
        list = 0;
    }
    cr.RunClientScript( "client_fraction_gui@__ShowIncreaselist", list, 0, 0, ::join( players, "\n" ), null );
}

void GetHighPlayersList( ::Critter& cr, int, int, int, ::string@, int[] @ )
{
    ::Fraction@ fr = Fractions::Get( cr.Stat[ ST_FACTION ] );
    if( !valid( fr ) )
        return;
    int list = 1;
    ::string@[] players = fr.GetPlayerList( 2 );
    if( players.length() < 1 )
    {
        players.insertLast( "%nobodytag%" );
        list = 0;
    }
    cr.RunClientScript( "client_fraction_gui@__ShowLowerlist", list, 0, 0, ::join( players, "\n" ), null );
}

void GetDismissPlayers( ::Critter& cr, int, int, int, ::string@, int[] @ )
{
    ::Fraction@ fr = Fractions::Get( cr.Stat[ ST_FACTION ] );
    if( !valid( fr ) )
        return;
    int list = 1;
    ::string@[] players;
    if( cr.Stat[ ST_FR_LEADERSHIP ] == 2 )
    {
        players = fr.GetPlayerList( 0 );
        players.removeFirst();
    }
    else
    {
        players = fr.GetPlayerList( 1 );
    }

    if( players.length() < 1 )
    {
        players.insertLast( "%nobodytag%" );
        list = 0;
    }
    cr.RunClientScript( "client_fraction_gui@__ShowDismissList", list, 0, 0, ::join( players, "\n" ), null );
}

void ApproveIncreasing( ::Critter& cr, int, int, int, ::string@ name, int[] @ )
{
    if( cr.Stat[ ST_FR_LEADERSHIP ] < 2 )
    {
        cr.Say( SAY_NETMSG, "FUCK YOU CHEATER!!!" );
        return;
    }
    if( !valid( name ) )
    {
        cr.Say( SAY_NETMSG, "Error!\n Incorrect player name." );
        return;
    }
    ::Fraction@ fr = Fractions::Get( cr.Stat[ ST_FACTION ] );
    if( !valid( fr ) )
        return;
    int result = fr.ChangePlayerRank( name, cr, 1 );
    if( result == -1 )
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 14052, "$name" + name );
    else if( result == 0 )
        cr.Say( SAY_NETMSG, "ERROR! Player not found!" );
    else
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 14053, "$name" + name );
    GetLowPlayersList( cr, 0, 0, 0, null, null );
}

void ApproveLowing( ::Critter& cr, int, int, int, ::string@ name, int[] @ )
{
    if( cr.Stat[ ST_FR_LEADERSHIP ] < 2 )
    {
        cr.Say( SAY_NETMSG, "FUCK YOU CHEATER!!!" );
        return;
    }
    if( !valid( name ) )
    {
        cr.Say( SAY_NETMSG, "Error!\n Incorrect player name" );
        return;
    }
    ::Fraction@ fr = Fractions::Get( cr.Stat[ ST_FACTION ] );
    if( !valid( fr ) )
        return;
    int8 result = fr.ChangePlayerRank( name, cr, 0 );
    if( result == -1 )
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 14054, "$name" + name );
    else if( result == 0 )
        cr.Say( SAY_NETMSG, "ERROR! Player not found!" );
    else
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 14055, "$name" + name );
    GetHighPlayersList( cr, 0, 0, 0, null, null );
}

void DismissPlayer( ::Critter& cr, int, int, int, ::string@ name, int[] @ )
{
    if( !valid( name ) )
    {
        cr.Say( SAY_NETMSG, "Error!\n Incorrect player name" );
        return;
    }
    ::Fraction@ fr = Fractions::Get( cr.Stat[ ST_FACTION ] );
    if( !valid( fr ) )
        return;
    int8 result = fr.DismissPlayer( name, cr );
    if( result != 1 )
    {
        cr.Say( SAY_NETMSG, "ERROR!" );
        return;
    }
    else
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 14056, "$name" + name );
        GetDismissPlayers( cr, 0, 0, 0, null, null );
    }
}

void quitOrg( ::Critter& cr, int, int, int, ::string@, int[] @ )
{
    cr.ShowScreen( SCREEN_DIALOGBOX, 1, "unsafe_Fractions::approveQuitOrg" );
    cr.SayMsg( SAY_DIALOGBOX_TEXT, TEXTMSG_GAME, 14057, "$name" + Fractions::GetName( cr.Stat[ ST_FACTION ] ) );
    cr.SayMsg( SAY_DIALOGBOX_BUTTON( 0 ), TEXTMSG_GAME, 14037 );
}

void approveQuitOrg( ::Critter& cr, uint answerI, ::string& answerS )
{
    ::Fraction@ fr = Fractions::Get( cr.Stat[ ST_FACTION ] );
    if( !valid( fr ) )
        return;
    fr.DismissPlayer( cr.Name, null );
    Fr_GUI_Reinit( cr, 0, 0 );
}

void OrgColorizingSend( ::Critter& cr, int, int, int, ::string@, int[] @ colors )
{
    ::Fraction@ fr = Fractions::Get( cr.Stat[ ST_FACTION ] );
    if( !valid( fr ) || !valid( colors ) || colors.length() < 1 || cr.Stat[ ST_FR_LEADERSHIP ] < 1 )
        return;
    fr.ColorList.resize( 0 );
    for( uint n = 0, nMax = colors.length; n < nMax; n++ )
        fr.ColorList.insertLast( uint( colors[ n ] ) );
    cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 14067 );
}

void OrgColorizingRefresh( ::Critter& cr, int, int, int, ::string@, int[] @ )
{
    ::Fraction@ fr = Fractions::Get( cr.Stat[ ST_FACTION ] );
    if( !valid( fr ) )
        return;
    if( fr.ColorList.length() < 1 )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 14065 );
        return;
    }
    int[] colors;
    for( uint n = 0, nMax = fr.ColorList.length; n < nMax; n++ )
        colors.insertLast( int(fr.ColorList[ n ]) );
    cr.RunClientScript( "client_main@__RefreshFrColors", 0, 0, 0, null, colors );
}

void MarkTarget( ::Critter& cr, int id, int reason, int hex, ::string@, int[] @ ids )
{
    if( cr.Stat[ ST_FACTION ] == 0 || cr.Stat[ ST_FR_LEADERSHIP ] == 0 )
        return;
    ::Map@ map = cr.GetMap();
    if( valid( map ) )
    {
        ::Critter@[] crits;
        if( valid( ids ) && ids.length() > 0 )
        {
            for( uint n = 0; n < ids.length(); n++ )
            {
                ::Critter@ selected = ::GetCritter( ids[ n ] );
                if( valid( selected ) && selected.IsPlayer() )
                {
                    ::Map@ sMap = selected.GetMap();
                    if( valid( sMap ) && sMap.Id == map.Id )
                        crits.insertLast( @selected );

                }
            }
            crits.insertLast( @cr );
        }
        else
            map.GetCritters( 0, FIND_LIFE_AND_KO | FIND_ONLY_PLAYERS, crits );
        for( uint n = 0, nMax = crits.length(); n < nMax; n++ )
        {
            if( crits[ n ].IsPlayer() && crits[ n ].Stat[ ST_FACTION ] == cr.Stat[ ST_FACTION ] )
                crits[ n ].RunClientScript( "client_main@__SetAssist", id, reason, hex, null, null );
        }
    }
}

void GetList( ::Critter& player, int mode, int, int, ::string@, int[] @ )
{
    ::string@[] list = Fractions::GetList();
    if( !valid( list ) || list.length < 1 )
        return;
    int[] indexes;
    for( uint n = 0; n < list.length(); n++ )
    {
        indexes.insertLast( Fractions::GetId( list[ n ] ) );
    }
    switch( mode )
    {
    case 0:
        player.RunClientScript( "client_main@__SetOrgList", 0, 0, 0, ::join( list, "\n" ), indexes );
        break;
    case 1:
        player.RunClientScript( "client_fraction_gui@__SetColorList", 0, 0, 0, ::join( list, "\n" ), indexes );
        break;
    case 2:
        player.RunClientScript( "client_fraction_gui@__StatScr_SetList", 0, 0, 0, ::join( list, "\n" ), null );
        break;
    default:
        break;
    }
}
