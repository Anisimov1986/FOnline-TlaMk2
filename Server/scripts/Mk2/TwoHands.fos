// FOS Server Client
// Модуль отвечает за использование итемов требующих две руки
#ifdef __CLIENT
namespace Option
{
	namespace Inventory
	{
		Options::Color 	ShadowColor(0,0,0,180);
	}
}
#endif

void ModuleInit( )
{
	::__EventCritterCheckMoveItem.Subscribe( @CritterCheckMoveItem );
#ifdef __CLIENT
	GuiKit::Add( CLIENT_SCREEN_INVENTORY_MK2, null, @TwoHands::RenderTwoSlot( ) );
#endif
#ifdef __SERVER
	::__EventCritterMoveItem.Subscribe( @CritterMoveItem );
#endif
}

bool CritterCheckMoveItem(::CritterMutual@ cr, ::ItemMutual@ item, uint8 toSlot, ::ItemMutual@ itemSwap)
{
	if( toSlot != SLOT_HAND1 && toSlot != SLOT_HAND2 )
		return true;
	const uint8 fromSlot = item.CritSlot;
	bool handsSwap = ((fromSlot == SLOT_HAND1 && toSlot == SLOT_HAND2) || (fromSlot == SLOT_HAND2 && toSlot == SLOT_HAND1));
	if( !handsSwap )
		return true;
		
	uint16 pid = item.GetProtoId();
	
	bool isSlot = toSlot == SLOT_HAND1 || toSlot == SLOT_HAND2; 
	if( FLAG( item.Proto.Flags, ITEM_TWO_HANDS ) || ( validEngineObject(itemSwap) && FLAG( itemSwap.Proto.Flags, ITEM_TWO_HANDS ) ) )
		if( ( validEngineObject(itemSwap) || toSlot == SLOT_HAND2 ) || ( isSlot && ( cr.Damage[ DAMAGE_RIGHT_ARM ] != 0 || cr.Damage[ DAMAGE_LEFT_ARM ] != 0 ) ) )
			return false;
	return true;
}

#ifdef __CLIENT

class RenderTwoSlot : IGUI::ElementCallbackDrawPos, GuiKit::IGuiKitElement
{	
	::string@ get_Name( ){
		return @GuiKit::FormatKey( "Slot2" );
	}

	GuiKit::IGuiKitElement@ Build( int screenIndex )
	{
		int[] coords = IniParser::GetCoord( Name );
		GUI_AddScreenElement( screenIndex, null, 0, 0 )
			.Position( coords )
			.CallbackDrawPos( @this );
		
		W = coords[2];
		H = coords[3];
		return @this;
	}

	void OnDraw( int ScreenX, int ScreenY, int ElementX, int ElementY )
	{
		::CritterMutual@ chosen = ::GetChosen( );
		if( @chosen !is null )
		{
			::ItemCl@ item = chosen.GetItem ( 0, SLOT_HAND1 );
			if( @item !is null && FLAG( item.Proto.Flags, ITEM_TWO_HANDS ) )
			{
				uint pid=item.GetProtoId();
				
				if( pid != WeaponPid )
				{
					WeaponPid = pid;
					WeaponSpriteId = ::LoadSprite( item.Proto.PicInv, 0 );
				}
				
				::DrawSprite( WeaponSpriteId, 0, ScreenX + ElementX, ScreenY + ElementY,  W,H, true, true, TwoHands::Option::Inventory::ShadowColor.Get() );
			}
		}
	}	
	
	uint WeaponPid;
	uint WeaponSpriteId;
	
	int W;
	int H;
}
#endif

#ifdef __SERVER

bool CritterMoveItem(::CritterMutual@ cr, ::ItemMutual@ item, uint8 fromSlot)
{
	uint8 toSlot=item.CritSlot;
	
	bool handsSwap = ((fromSlot == SLOT_HAND1 && toSlot == SLOT_HAND2) || (fromSlot == SLOT_HAND2 && toSlot == SLOT_HAND1));
	
	int otherSlot = -1;
	::ItemMutual@ otherItem = null;
	
	if( toSlot == SLOT_HAND2 )
		otherSlot = SLOT_HAND1;
	else if( toSlot == SLOT_HAND1 )
		otherSlot = SLOT_HAND2;
	bool isSlot = toSlot == SLOT_HAND1 || toSlot == SLOT_HAND2; 
	if( otherSlot != -1 )
	{
		@ otherItem = cr.GetItem ( 0, otherSlot );
		if( @otherItem !is null && FLAG( otherItem.Proto.Flags, ITEM_TWO_HANDS ) || FLAG( item.Proto.Flags, ITEM_TWO_HANDS ) )
		{
			if( @otherItem !is null )
				cr.MoveItem ( otherItem.Id, otherItem.GetCount(), SLOT_INV);
			if(toSlot == SLOT_HAND2)
				cr.MoveItem ( item.Id, item.GetCount(), SLOT_HAND1);
		}
	}	
	
	if( FLAG( item.Proto.Flags, ITEM_TWO_HANDS ) )
	{
		if( ( handsSwap ) || ( isSlot && ( cr.Damage[ DAMAGE_RIGHT_ARM ] != 0 || cr.Damage[ DAMAGE_LEFT_ARM ] != 0 ) ) )
			return true;
		
		if( toSlot == SLOT_HAND2 )
			cr.MoveItem ( item.Id, item.GetCount(), SLOT_HAND1);
		
		if( fromSlot == SLOT_INV && isSlot )
		{
			::Item@[] hands = {};
			cr.GetItems( SLOT_HAND1, hands );
			cr.GetItems( SLOT_HAND2, hands );
			for( uint n = 0; n < hands.length(); n++ )
				if( hands[n].Id != item.Id && !cr.MoveItem ( hands[n].Id, hands[n].GetCount(), SLOT_INV) )
					return true;
		}
	}	
	return true;
}

#endif
