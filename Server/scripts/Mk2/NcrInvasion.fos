// FOS Server
// NcrInvasion
// Mk2@NcrInvasion::
enum Define
{
	NpcRoleRaider = 17,
	
	GangSize = 12,
	
	EntireHexNum = 111,
	
	StrShoutRaiders = 2950,
	StrElizeRadio = 2951,
	
	MsgAttack = 6,
	MsgRaiderKilled = 7,
	
	EnemySearchRad = 35,
	
	NextInvasion = 1 * 5 * 24 * 60 * 60,
	TimeToDeleteDead = 1 * 60 * 60
}

void DefineInvasionEvent()
{
    ::CreateTimeEvent( ::__FullSecond + NcrInvasion::Define::NextInvasion, "NcrInvasion::e_BeginInvasion", true );
}

uint e_BeginInvasion( ::array<uint> @ values )
{
    ::GameVar @ invasionStatus = ::GetGlobalVar( GVAR_ncr_invasion );
    if( !valid( invasionStatus ) )
        return 0;
    if( invasionStatus.GetValue() == 1 )
        return 60 * 60 * 24;                             // откладываем выполнение на следующий день

    ::GameVar @ campsNum = ::GetGlobalVar( GVAR_ncr_siege_camps_num );
    if( !valid( campsNum ) )
        return 0;

    if( campsNum.GetValue() == 0 )
        return 0;

    ::Location @ ncr = ::GetLocationByPid( LOCATION_NCR, 0 );

    if( !valid( ncr ) )
        return 0;

    ::array<::Location@> locations;

    if( ::GetLocations( ncr.WorldX, ncr.WorldY, ::__GlobalMapZoneLength * 2, locations ) == 0 )
        return 0;

    ::Map @ bazaar = ncr.GetMap( MAP_ncr_bazaar );
    if( !valid( bazaar ) )
        return 0;

    for( uint i = 0, iMax = locations.length(); i < iMax; i++ )
    {
        uint16 locPid = locations[ i ].GetProtoId();
        if( locPid < LOCATION_Quest_NCR_SIEGE1 || locPid > LOCATION_Quest_NCR_SIEGE5 )
            continue;

        ::Map @map = locations[ i ].GetMapByIndex( locations[ i ].GetMapCount() - 1 );
        if( !valid( map ) )
            continue;

        uint raidersNum = map.GetNpcCount( NcrInvasion::Define::NpcRoleRaider, FIND_LIFE | FIND_ONLY_NPC );
        if( raidersNum == 0 )
            continue;
        DL( "Raiders:" + raidersNum );
        FighterPattern::FighterPattern fp = FighterPattern::FighterPattern();
        fp.ForceArmourLvl = map.GetData( 0 );

        uint   ec = bazaar.CountEntire( NcrInvasion::Define::EntireHexNum );
        uint16 hX = 0, hY = 0, eX = 0, eY = 0;
        bazaar.GetEntireCoords( NcrInvasion::Define::EntireHexNum, ::Random( 0, ec - 1 ), eX, eY );

        for( uint j = 0; j < uint( NcrInvasion::Define::GangSize ); j++ )
        {
            ::Critter @ donor = map.GetNpc( NcrInvasion::Define::NpcRoleRaider, FIND_ALL | FIND_ONLY_NPC, ::Random( 0, raidersNum - 1 ) );
            if( !valid( donor ) )
                continue;
            Entires::GetNearEntire( bazaar, NcrInvasion::Define::EntireHexNum, hX, hY );
            if( !GetFreeHex( bazaar, 4, hX, hY ) )
                continue;
            if( hX != eX && hY != eY && bazaar.GetPathLength( hX, hY, eX, eY, 0 ) == 0 )
                continue;
            // GetFreeHex
            ::array<int> params =
            {
                ST_DIALOG_ID, donor.Stat[ ST_DIALOG_ID ],
                ST_AI_ID, donor.Stat[ ST_AI_ID ],
                ST_BAG_ID, donor.Stat[ ST_BAG_ID ],
                ST_NPC_ROLE, NcrInvasion::Define::NpcRoleRaider,
                ST_TEAM_ID, TEAM_Slaver,
                ST_REPLICATION_TIME, -1,
                MODE_NO_HOME, 1,
                ST_LEVEL, donor.Stat[ ST_LEVEL ],
                ST_ROLE_CITY, CITY_NONE_PROTECT
            };
            ::Critter @ raider = bazaar.AddNpc( donor.GetProtoId(), hX, hY, ::Random( 0, 5 ), params, null, "NcrInvasion::_InvaderInit" );
            fp.ForceCritterArmour( raider );
            ::array<::Item@> items;
            donor.GetItems( -1, items );
            for( uint k = 0, kMax = items.length(); k < kMax; k++ )
            {
                raider.AddItem( items[ k ].GetProtoId(), items[ k ].GetCount() );
            }
        }
    }
    DL( "invasion done" );

    ::RadioMessageMsg( 0, TEXTMSG_TEXT, NcrInvasion::Define::StrElizeRadio );
    invasionStatus = 1;   // нападение началось!
    return 0;
}

bool IsValidToattack( ::Critter& raider, ::Critter& target )
{
    // DL("Script^ " + GetScriptName(target.GetScriptId()));

    if( !target.IsLife() )
        return false;
    if( target.IsPlayer() )
        return true;
    if( raider.StatBase[ ST_TEAM_ID ] == target.StatBase[ ST_TEAM_ID ] )
        return false;
    if( target.StatBase[ ST_TEAM_ID ] == 0 )
        return false;

    return true;
}

void _InvaderInit( ::Critter& raider, bool firstTime )
{
    EncounterNpc::_NpcInit( raider, firstTime );
    raider.ModeBase[ MODE_NO_SUPPLY ] = 1;
    raider.SetEvent( CRITTER_EVENT_SHOW_CRITTER, "NcrInvasion::_OnShowCritter" );
    raider.SetEvent( CRITTER_EVENT_ATTACKED, "NcrInvasion::_RaiderAttacked" );
    raider.SetEvent( CRITTER_EVENT_IDLE, "NcrInvasion::_RaiderIdle" );
    raider.SetEvent( CRITTER_EVENT_DEAD, "NcrInvasion::_RaiderDead" );
    raider.SetEvent( CRITTER_EVENT_MESSAGE, "NcrInvasion::_CritterInvasionMessage" );
    raider.SetEvent( CRITTER_EVENT_PLANE_END, "NcrInvasion::_OnInvaderPlaneEnd" );

    if( firstTime )
    {
        raider.StatBase[ ST_ACTION_POINTS ] = ::Random( 10, 16 );
        raider.StatBase[ ST_ARMOR_CLASS ] = ::Random( 15, 30 );
        raider.PerkBase[ PE_MORE_CRITICALS ] = ::Random( 1, 5 );

        uint16 MaxLife = ::Random( 200, 300 );
        raider.StatBase[ ST_MAX_LIFE ] = MaxLife;
        raider.StatBase[ ST_CURRENT_HP ] = MaxLife;

        raider.StatBase[ ST_CRITICAL_RESISTANCE ] = ::Random( 20, 25 );
        raider.StatBase[ ST_NORMAL_RESIST ] = ::Random( 20, 25 );
        raider.StatBase[ ST_LASER_RESIST ] = ::Random( 20, 25 );
        raider.StatBase[ ST_EXPLODE_RESIST ] = ::Random( 20, 25 );
        raider.StatBase[ ST_FIRE_RESIST ] = ::Random( 20, 25 );
        raider.StatBase[ ST_PLASMA_RESIST ] = ::Random( 20, 25 );
        raider.StatBase[ ST_ELECTRO_RESIST ] = ::Random( 20, 25 );

        raider.StatBase[ ST_NORMAL_ABSORB ] = ::Random( 4, 6 );
        raider.StatBase[ ST_LASER_ABSORB ] = ::Random( 4, 6 );
        raider.StatBase[ ST_EXPLODE_ABSORB ] = ::Random( 10, 16 );
        raider.StatBase[ ST_FIRE_ABSORB ] = ::Random( 14, 20 );
        raider.StatBase[ ST_PLASMA_ABSORB ] = ::Random( 8, 12 );
        raider.StatBase[ ST_ELECTRO_ABSORB ] = ::Random( 6, 12 );

        raider.SkillBase[ SK_SMALL_GUNS ] += 60;
        raider.SkillBase[ SK_BIG_GUNS ] += 60;
        raider.SkillBase[ SK_UNARMED ] += 60;
        raider.SkillBase[ SK_ENERGY_WEAPONS ] += 60;

        raider.PerkBase[ PE_SNIPER ] = 1;
        raider.PerkBase[ PE_SLAYER ] = 1;
        raider.PerkBase[ PE_MORE_CRITICALS ] = 3;
    }
}

uint e_DeleteDeadRaider( ::array<uint> @ values )
{
    ::Critter@ raider = ::GetCritter( values[ 0 ] );
    if( !valid( raider ) )
    {
        DL( "Raider not found" );
        return 0;
    }
    ::DeleteNpc( raider );
    DL( "Raider deleted" );
    return 0;
}

void _RaiderDead( ::Critter& cr, ::Critter@ killer )
{
    // добавляем событие удаления трупа
    ::CreateTimeEvent( ::__FullSecond + NcrInvasion::Define::TimeToDeleteDead, "NcrInvasion::e_DeleteDeadRaider", cr.Id, true );
    //
    if( !valid( killer ) )
        return;
    cr.SendMessage( NcrInvasion::Define::MsgRaiderKilled, killer.Id, MESSAGE_TO_ALL_ON_MAP );
    EncounterNpc::_NpcDead( cr, killer );

    // работа с переменными
    if( killer.IsPlayer() )
    {
        ::GameVar @ qVar = ::GetLocalVar( LVAR_q_ncr_elize_invasion, killer.Id );
        if( valid( qVar ) && qVar.GetValue() == 1 )
            qVar = 2;
    }
    // проверка, если все рейдеры мертвы, присваиваем всем игрокам статус квеста: выполнено
    ::Map @ map = cr.GetMap();
    if( !valid( map ) )
        return;

    uint invadersNum = map.GetNpcCount( NcrInvasion::Define::NpcRoleRaider, FIND_LIFE | FIND_ONLY_NPC );

    if( invadersNum > 0 )
        return;

    // все рейдеры мертвы
    ::GameVar @ invasionStatus = ::GetGlobalVar( GVAR_ncr_invasion );
    if( !valid( invasionStatus ) )
        return;

    invasionStatus = 0;

    ::array<::Critter @> players;

    map.GetCritters( 0, FIND_LIFE_AND_KO | FIND_ONLY_PLAYERS, players );

    if( players.length() > 0 )
    {
        for( uint i = 0, iMax = players.length(); i < iMax; i++ )
        {
            ::GameVar @ pVar = ::GetLocalVar( LVAR_q_ncr_elize_invasion, players[ i ].Id );
            if( !valid( pVar ) )
                continue;
            if( pVar.GetValue() != 2 )
                continue;
            pVar = 3;
        }
    }
    DefineInvasionEvent();
}

void _CritterInvasionMessage( ::Critter& cr, ::Critter& fromCr, int message, int value )
{
    if( message == NcrInvasion::Define::MsgRaiderKilled )
    {
        if( cr.IsNoPlanes() )
        {
            // bool AddWalkPlane(::Critter& npc, uint priority, uint16 hexX, uint16 hexY, uint8 dir, bool run, uint8 cut)
            NpcPlanes::AddWalkPlane( cr, AI_PLANE_ATTACK - 1, fromCr.HexX, fromCr.HexY, ::Random( 0, 5 ), true, ::Random( 1, 2 ) );
        }
        return;
    }
    EncounterNpc::_NpcMessage( cr, fromCr, message, value );
    // if(cr.IsNoPlanes()) _NpcMessage(cr, fromCr, message, value);// enc npc
}

void _RaiderIdle( ::Critter& cr )
{
    if( cr.IsNoPlanes() )
    {
        ::Map @map = cr.GetMap();
        if( !valid( map ) )
            return;
        ::array<::Critter @> critters;
        for( uint i = 0, iMax = map.GetCrittersHex( cr.HexX, cr.HexY, NcrInvasion::Define::EnemySearchRad, FIND_LIFE | FIND_ALL, critters ); i < iMax; i++ )
        {
            if( IsValidToattack( cr, critters[ i ] ) )
                NpcPlanes::AddAttackPlane( cr, AI_PLANE_ATTACK * ( critters[ i ].IsPlayer() ? 2 : 1 ), critters[ i ] );
        }
    }
}

// CRITTER_EVENT_ATTACKED
bool _RaiderAttacked( ::Critter& cr, ::Critter& attacker )
{
    // ("cr team"+ cr.StatBase[ST_TEAM_ID] + " attacker team" +attacker.StatBase[ST_TEAM_ID]);
    if( !IsValidToattack( cr, attacker ) )
    {
        if( cr.CheckEnemyInStack( attacker.Id ) )
            cr.EraseEnemyFromStack( attacker.Id );
        if( attacker.CheckEnemyInStack( cr.Id ) )
            attacker.EraseEnemyFromStack( cr.Id );
        NpcPlanes::EraseAttackPlane( attacker, cr.Id );
        // cr.ModeBase[MODE_INVULNERABLE]=1;
        return true;
        // return true;
    }
    else
    {
        // cr.ModeBase[MODE_INVULNERABLE]=0;
        // DL("kill");
        return false;
    }
}

// CRITTER_EVENT_SHOW_CRITTER
void _OnShowCritter( ::Critter& cr, ::Critter& showCrit )
{
    if( !IsValidToattack( cr, showCrit ) )
        return;

    NpcPlanes::AddAttackPlane( cr, AI_PLANE_ATTACK * ( showCrit.IsPlayer() ? 2 : 1 ), showCrit );

    if( showCrit.IsPlayer() )
        return;
    if( ::Random( 1, 10 ) == 1 )
    {
        cr.SayMsg( CLAMP( ::Random( 0, 5 ), SAY_NORM_ON_HEAD, SAY_SHOUT_ON_HEAD ), TEXTMSG_TEXT, NcrInvasion::Define::StrShoutRaiders );
    }
}

// если путь заблокирован, уменьшаем приоритет плана, если есть хотя бы еще один план
int _OnInvaderPlaneEnd( ::Critter& cr, ::NpcPlane& plane, int reason, ::Critter@ someCr, ::Item@ someItem )
{
    if( EncounterNpc::_NpcPlaneEnd( cr, plane, reason, someCr, someItem ) == PLANE_RUN_GLOBAL )
        return PLANE_RUN_GLOBAL;

    if( reason == REASON_HEX_BUSY || reason == REASON_HEX_BUSY_RING || reason == REASON_POSITION_NOT_FOUND || reason == REASON_FIND_PATH_ERROR || reason == REASON_HEX_TOO_FAR )
    {
        if( cr.GetPlanes( null ) > 1 && plane.Priority > 1 )
            plane.Priority--;
    }
    else if( reason == REASON_GAG_CRITTER ) // к двери не пройти, мешает другой нпц
    {
        if( valid( someCr ) )
        {
            if( someCr.IsNpc() )
            {
                if( cr.GetPlanes( null ) > 1 && plane.Priority > 1 )
                    plane.Priority--;
            }
        }
    }
    return PLANE_RUN_GLOBAL;
// -------------
}

// debug
// ~run Mk2 NcrInvasion::BI 0 0 0
void BI( ::Critter& cr, int p0, int p1, int p2 )
{
    ::array<uint> @ values;
    e_BeginInvasion( values );
}
