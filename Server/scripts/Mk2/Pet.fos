// Author: rifleman17
/*
   Небоевые спутники, хранятся в предмете, например клетке
   при выходе игрока на глобал, удаляются

   если теряет из видимости хозяина, бежит за ним
   если атакован, удаляются

   можно использовать на предметах в инвентаре, или на статических, на картах
   тогда пет будет провожать игрока до глобала, потом удаляться

 */
 
enum Define
{
	RolePet = 765567,
	OwnerLostDist = 8,
	MaxDistance = 40
}

#define PetId            Val1
#define PetProto         Val2

/* Pet */

void _PetInit( ::Critter& cr, bool firstTime )
{
    cr.ModeBase[ MODE_INVULNERABLE ] = 1;
    cr.ModeBase[ MODE_NO_STEAL ] = 1;
    cr.ModeBase[ MODE_NO_ENEMY_STACK ] = 1;
    cr.ModeBase[ MODE_NO_LOOSE_LIMBS ] = 1;
    cr.ModeBase[ MODE_NO_HOME ] = CLAMP( ::Random( 0, 2 ), 0, 1 );
    cr.ModeBase[ MODE_NO_HEAL ] = 1;
    cr.ModeBase[ MODE_NO_UNARMED ] = 1;
    cr.ModeBase[ MODE_NO_TALK ] = 1;
    cr.StatBase[ ST_NPC_ROLE ] = Pet::Define::RolePet;

    cr.SetEvent( CRITTER_EVENT_HIDE_CRITTER_1, "Pet::_PetHideCritter" );
    cr.SetEvent( CRITTER_EVENT_PLANE_BEGIN, "Pet::_PetPlanBegin" );
    cr.SetEvent( CRITTER_EVENT_PLANE_END, "Pet::_PetPlanEnd" );
    cr.SetEvent( CRITTER_EVENT_USE_ITEM_ON_ME, "Pet::_PetUseItemOnMe" );
    cr.SetEvent( CRITTER_EVENT_ATTACKED, "Pet::_PetAttacked" );
    cr.SetEvent( CRITTER_EVENT_IDLE, "Pet::_PetIdle" );

    cr.ShowCritterDist1 = Pet::Define::OwnerLostDist;
}

void _PetIdle( ::Critter& cr )
{
    if( cr.IsLife() && FollowMaster( cr, cr.Pet_OwnerId ) )
    {
        if( ::Random( 1, 5 ) > 4 && cr.IsNoPlanes() )
        {
            cr.MoveRandom();
        }
        return;
    }
    else
    {
        if( cr.Pet_LifeTime + REAL_SECOND( 10 ) < int(::__FullSecond) )
        {
            DL( "Deleting" );
            ::DeleteNpc( cr );
        }
    }
}

bool _PetAttacked( ::Critter& cr, ::Critter& attacker )
{
    // Теоретически можно устраивать бесконечные бои петов
    // но нужен контроль на их время жизни, иначе они могут биться до вайпа
    // if(attacker.IsNpc() && attacker.Stat[ST_NPC_ROLE] == Pet::Define::RolePet)
    // {
    //	return false;
    // }
    // При атаке пета он удаляется, чтобы всегда можно было освободить любой проход, если его занял пет
    ::DeleteNpc( cr );
    return true;
}

bool _PetUseItemOnMe( ::Critter& cr, ::Critter& whoUse, ::Item& item )
{
    return UseItem( cr, whoUse, item );
}

int _PetPlanBegin( ::Critter& cr, ::NpcPlane& plane, int reason, ::Critter@ someCr, ::Item@ someItem )
{
    if( plane.Type == AI_PLANE_ATTACK )
        return PLANE_DISCARD;
    
    return PLANE_RUN_GLOBAL;
}

int _PetPlanEnd( ::Critter& cr, ::NpcPlane& plane, int reason, ::Critter@ someCr, ::Item@ someItem )
{
    return PLANE_RUN_GLOBAL;
}

void _PetHideCritter( ::Critter& cr, ::Critter& hideCrit )
{
    if( hideCrit.Id == uint( cr.Pet_OwnerId ) )
    {
        if( !FollowMaster( cr, cr.Pet_OwnerId ) )
            ::DeleteNpc( cr );
    }
}

bool FollowMaster( ::Critter& pet, uint idMaster )
{
    ::Critter@ cr = ::GetCritter( idMaster );
    if( valid( cr ) )
    {
        ::Map@ mapCr = cr.GetMap();
        ::Map@ mapPet = pet.GetMap();
        if( valid( mapCr ) && valid( mapPet ) && mapCr.Id == mapPet.Id )
        {
            uint dist = ::GetCrittersDistantion( cr, pet );
            if( dist <= Pet::Define::OwnerLostDist )
            {
                return true;
            }
            if( dist > Pet::Define::OwnerLostDist && dist < Pet::Define::MaxDistance )
            {
                uint16 x = cr.HexX, y = cr.HexY;
                if( GetFreeHex( mapCr, 2, x, y ) )
                {
                    NpcPlanes::AddWalkPlane( pet, 0, x, y, ::Random( 0, 5 ), true, 0 );
                    return true;
                }
            }
        }
    }

    return false;
}


// Обработку использования предметов нужно добавлять сюда
bool UseItem( ::Critter& cr, ::Critter& whoUse, ::Item& item )
{
    return false;     // реакция по умолчанию
}
/* Box */

void _BoxInit( ::Item& item, bool firstTime )
{
    if( item.PetId > 0 )
    {
        ::Critter@ pet = ::GetCritter( item.PetId );
        if( valid( pet ) )
            ::DeleteNpc( pet );
    }
    item.SetEvent( ITEM_EVENT_USE, "Pet::_BoxUse" );
}

bool _BoxUse( ::Item& item, ::Critter& cr, ::Critter@ onCritter, ::Item@ onItem, ::Scenery@ onScenery )
{
    if( !valid( onCritter ) && !valid( onItem ) && !valid( onScenery ) )
    {
        ::Critter@ pet;
        if( item.PetId > 0 )
        {
            @pet = ::GetCritter( item.PetId );
            item.PetId = 0;
            if( valid( pet ) )
            {
                ::DeleteNpc( pet );
                return true;
            }
        }
        ::Map@ map = cr.GetMap();
        if( valid( map ) && item.PetProto > 0 )
        {
            uint16 x = cr.HexX, y = cr.HexY;
            if( GetFreeHex( map, 2, x, y ) )
            {
                int[] params = { ST_NPC_ROLE, Pet::Define::RolePet, ST_VAR2, cr.Id, ST_VAR1, ::__FullSecond };
                @pet = map.AddNpc( item.PetProto, x, y, ::GetDirection( x, y, cr.HexX, cr.HexY ), params, null, "Pet::_PetInit" );
                if( valid( pet ) )
                {
                    item.PetId = pet.Id;
                    pet.Pet_OwnerId = cr.Id;
                    return true;
                }
            }
        }
    }
    return false;
}

void AddPetBox( ::Critter& cr, int boxPid, int petPid, int )
{
    ::Item@ box = cr.AddItem( boxPid, 1 );
    if( valid( box ) )
    {
        box.PetProto = petPid;
        SETFLAG( box.Flags, ITEM_CAN_USE );
        box.Update();
        box.SetScript( "Pet::_BoxInit" );
    }
}
