// FOS Server
// Author: cvet

const uint16[] EatPid =
{
    Content::Item::MUTATED_FRUIT, Content::Item::IGUANA_ON_A_STICK, Content::Item::MEAT_ON_A_STICK, Content::Item::BEER,
    Content::Item::BOX_OF_NOODLES, Content::Item::FROZEN_DINNER, Content::Item::MEAT_JERKY, Content::Item::CHEEZY_POOFS, Content::Item::COOKIE,
    Content::Item::SMITTY_MEAL, Content::Item::MEAT
};

void _PoormanInit( ::Critter& poorman, bool firstTime )
{
    poorman.SetEvent( CRITTER_EVENT_SHOW_ITEM_ON_MAP, "DenPoorman::ShowItemOnMap" );
    poorman.SetEvent( CRITTER_EVENT_HIDE_ITEM_ON_MAP, "DenPoorman::HideItemOnMap" );
    poorman.StatBase[ ST_VAR0 ] = 0; // Тут будет хранится Id итема, который мы хотим съесть.
}

void ShowItemOnMap( ::Critter& poorman, ::Item& item, bool added, ::Critter@ dropper )
{
    // Можем ли мы сейчас подойти.
    if( poorman.Stat[ ST_VAR0 ] != 0 || ! poorman.IsNoPlanes() )
        return;
    
    // Смотрим, съедобен ли итем.
	if( EatPid.find( item.GetProtoId() ) != -1 )
    {
        poorman.SayMsg( SAY_NORM_ON_HEAD, TEXTMSG_TEXT, 104061 );
        poorman.StatBase[ ST_VAR0 ] = int(item.Id);
        NpcPlanes::AddPickPlane( poorman, 0, item, 0, true );
    }
}

void HideItemOnMap( ::Critter& poorman, ::Item& item, bool deleted, ::Critter@ picker )
{
    // Проверим, может кто-то поднял нашу еду.
    if( uint( poorman.Stat[ ST_VAR0 ] ) != item.Id )
        return;
    poorman.StatBase[ ST_VAR0 ] = 0;
	
    if( @picker is null )
        return;

    // Ругаем поднявшего.
    if( picker.Id != poorman.Id )
    {
        _NpcEraseAllPlanesPick( poorman );
        poorman.SayMsg( SAY_NORM_ON_HEAD, TEXTMSG_TEXT, 104062 );
        poorman.Wait( 3000 );
    }
    // Это мы сами подняли, едим.
    else
    {
        poorman.DeleteItem( item.GetProtoId(), item.GetCount() );
        poorman.SayMsg( SAY_NORM_ON_HEAD, TEXTMSG_TEXT, 104062 );
        poorman.Wait( 3000 );
    }
}
