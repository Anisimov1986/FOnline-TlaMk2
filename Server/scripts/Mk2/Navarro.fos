// FOS Server
// Author: rifleman17
// Navarro sub1 quests
#include "_macros.fos"
// Quest "Soft Job", Henry

enum String
{
	Scan = 5150,
	Full = 5151,
	Empty = 5152,
	
	
	ChipSetUp = 5153,
	ChipSetFail = 5154,
	RobotCantRepair = 5155,
	RobotRepaired = 5156,
}

const int ScanerInfo = 2;

void ScanerInit( ::Item& item, bool firstTime )
{
    item.Info = ScanerInfo;
    SETFLAG( item.Flags, ITEM_CAN_USE_ON_SMTH );
    item.SetLexems( "$value" + item.Val1 );
    item.SetEvent( ITEM_EVENT_USE, "Navarro::ScanerUse" );
    item.Update();
    if( firstTime )
        // Создаем событие удаления предмета через 1 игровой месяц
        ::CreateTimeEvent( ::__FullSecond + 60 * 60 * 24 * 30, "Navarro::e_DeleteScaner", item.Id, true );
}

uint e_DeleteScaner( uint[] @ values )
{
    ::Item@ item = ::GetItem( values[ 0 ] );
    if( @item !is null )
        ::DeleteItem( item );
    return 0;
}

bool ScanerUse( ::Item& item, ::Critter& cr, ::Critter@ onCritter, ::Item@ onItem, ::Scenery@ onScenery )
{
    if( @onCritter !is null && onCritter.IsDead() && onCritter.Stat[ ST_BASE_CRTYPE ] == CRTYPE_ROBOT )
    {
        ::Map@ map = onCritter.GetMap();
        if( @map is null ) return false;
        
		::Location@ loc = map.GetLocation();
        if( @loc is null || loc.GetProtoId() != LOCATION_Sierra ) return false;
        
		if( uint( onCritter.Stat[ ST_VAR1 ] ) > ::__FullSecond )
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, Navarro::String::Empty );
            return true;
        }
        // Каждого робота можно сканировать только раз в два реальных часа
        onCritter.StatBase[ ST_VAR1 ] = ::__FullSecond + ::__TimeMultiplier * 2 * 60 * 60;
        uint value = 1;
        if( cr.Skill[ SK_SCIENCE ] > 50  )	value = ::Random( 5, 10 );
        if( cr.Skill[ SK_SCIENCE ] > 100 )	value = ::Random( 15, 20 );
        if( cr.Skill[ SK_SCIENCE ] > 150 )	value = ::Random( 20, 25 );
        item.Val1 += value;
        item.Val1 = CLAMP( item.Val1, 0, 100 );
        item.SetLexems( "$value" + item.Val1 );
        item.Update();
		
        if( item.Val1 > 99 )	cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, Navarro::String::Full );
        else                  	cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, Navarro::String::Scan, "$value" + item.Val1 );
        return true;
    }
    return false;
}

bool d_SJComplete( ::Critter& player, ::Critter@ npc )
{
    ::Item@[] items;
    for( uint i = 0, iMax = player.GetItems( -1, items ); i < iMax; i++ )
        if( items[ i ].GetProtoId() == Content::Item::ELEC_LOCKPICK_MKII && items[ i ].Info == ScanerInfo && items[ i ].Val1 == 100 )
			return true;
    return false;
}

void r_AddScaner( ::Critter& player, ::Critter@ npc )
{
    ::Item@ item = player.AddItem( Content::Item::ELEC_LOCKPICK_MKII, 1 );
    if( @item !is null ) item.SetScript( "Navarro::ScanerInit" );
}

// Чип для подчинения робота
void r_AddChip( ::Critter& player, ::Critter@ npc )
{
    ::Item@ item = player.AddItem( Content::Item::V15_COMPUTER_PART, 1 );
    if( @item !is null ) item.SetScript( "Navarro::ChipInit" );
}

void ChipInit( ::Item& item, bool firstTime )
{
    item.Info = 2;
    SETFLAG( item.Flags, ITEM_CAN_USE_ON_SMTH );
    item.SetEvent( ITEM_EVENT_USE, "Navarro::ChipUse" );
    item.Update();
}

bool ChipUse( ::Item& item, ::Critter& cr, ::Critter@ onCritter, ::Item@ onItem, ::Scenery@ onScenery )
{
    if( @onCritter !is null && onCritter.IsDead() && onCritter.Stat[ ST_BASE_CRTYPE ] == CRTYPE_ROBOT )
    {
        ::Map@ map = onCritter.GetMap();
        if( @map is null ) return false;
        
		::Location@ loc = map.GetLocation();
        if( @loc is null || loc.GetProtoId() != LOCATION_Sierra ) return false;
        if( cr.Skill[ SK_SCIENCE ] < 100 )
            cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, Navarro::String::ChipSetFail );
        else
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, Navarro::String::ChipSetUp );
            ::DeleteItem( item );
            onCritter.SetEvent( CRITTER_EVENT_SMTH_USE_SKILL, "Navarro::RobotSmthUseSkill" );
            onCritter.StatBase[ ST_VAR1 ] = cr.Id;         // Запоминаем, кто установил чип
        }
        return true;
    }
    return false;
}

void RobotSmthUseSkill( ::Critter& cr, ::Critter& fromCr, int skill, ::Critter@ onCritter, ::Item@ onItem, ::Scenery@ onScenery )
{
    if( skill == SK_REPAIR && @onCritter !is null && onCritter.Id == cr.Id && uint( cr.Stat[ ST_VAR1 ] ) == fromCr.Id )
    {
        if( fromCr.Skill[ SK_REPAIR ] <= 100 )
            fromCr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, Navarro::String::RobotCantRepair );
        else
        {
            fromCr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, Navarro::String::RobotRepaired );
            cr.ClearEnemyStack();
            cr.ToLife();
            cr.StatBase[ ST_CURRENT_HP ] = cr.Stat[ ST_MAX_LIFE ];
            cr.MercBase[ MERC_MASTER_DIST ] = 6;
            cr.StatBase[ ST_BAG_ID ] = 144;         // Sentry robot bag
            Merc2Player( fromCr, cr, 4 );         // Охранник по умолчанию. Защищает хозяина
        }
    }
}

void CountEmpRocketTests( ::Critter& player, ::Critter& target )
{
    ::GameVar@ status = ::GetLocalVar( LVAR_q_nav_henry_emp_test, player.Id );
    ::GameVar@ tested = ::GetUnicumVar( UVAR_nav_emp_tested_critter, player.Id, target.Id );
    if( @status !is null && status > 0 && status < 7 && @tested !is null && tested == 0 )
    {
        status = status.GetValue() + 1;
        tested = 1;
    }
}
