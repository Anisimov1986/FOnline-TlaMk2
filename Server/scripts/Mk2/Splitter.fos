// FOS Client

SplitMainScreen SplitMaster;

void Show( Splitter::SplitResult@ result )
{
	@SplitMaster.Current = result;
	::ShowScreen( CLIENT_SCREEN_SPLIT_MK2, 0, 0, 0 );
}

interface SplitResult
{
	void Split( const uint& count );
	uint get_SplitMaxCount( );
	void Draw( int x, int y, int w, int h );
}

void ModuleInit( ){
	GuiKit::Add( CLIENT_SCREEN_SPLIT_MK2, @SplitMaster );
}

namespace Option
{
	namespace GUI
	{
		uint ColorTitle = COLOR_SAND;
		
		uint ColorAll = COLOR_SAND;
		uint ColorAllDown = COLOR_SAND;
		
		uint ColorValue = COLOR_WHITE;
	}
}

void CancelButton( int click )
{
	if( click == MOUSE_CLICK_LEFT )
		::HideScreen( CLIENT_SCREEN_SPLIT_MK2, 0, 0, 0 );
}

void AddCountButton( int click )
{
	if( click == MOUSE_CLICK_LEFT )
		SplitMaster.SetCount( 1 );
}

void SubCountButton( int click )
{
	if( click == MOUSE_CLICK_LEFT )
		SplitMaster.SetCount( -1 );
}

void DoneButton( int click )
{
	if( click == MOUSE_CLICK_LEFT )
		SplitMaster.Done( );
}

void AllCountButton( int click )
{
	if( click == MOUSE_CLICK_LEFT )
		SplitMaster.CountAll( );
}

class SplitMainScreen : IGUI::ScreenCallbackShow, IGUI::ElementCallbackKeyPress, IGUI::ScreenCallbackHide, IGUI::ElementCallbackDrawPos, IGUI::ElementCallbackMouseDown, GuiKit::GUIScreenPattern
{
	::string@ get_Name( )
	{
		return "Split";
	}

	void Build( int screenIndex, ::IGUIScreenOpt@ opt )
	{
		ImagePosition = IniParser::GetCoord( GuiKit::FormatKey( "Item" ) );
		CountPosition = IniParser::GetCoord( GuiKit::FormatKey( "Value" ) );
		
		GUI_AddScreenElement( screenIndex, null, 0, 0 )
			.CallbackDrawPos( @this )
			.CallbackMouseDown( @this )
			.CallbackKeyPress( @this )
			.SetNoFocusedKeyPress( true )
			.Position( CountPosition );
			
		GuiKit::Button( @CancelButton, 	"Cancel" );
		GuiKit::Button( @DoneButton, 		"Done" );
		GuiKit::Button( @AddCountButton, "Up" )	;
		GuiKit::Button( @SubCountButton, "Down" );
		GuiKit::Text( "Title", STR_SPLIT_TITLE )
			.SetColor( ThisModule::Option::GUI::ColorTitle );
			
		GuiKit::Button( @AllCountButton, "All" );
		GuiKit::Text( "All", STR_SPLIT_ALL )
			.SetColor( ThisModule::Option::GUI::ColorAll );
	}
	
	SplitMainScreen( )
	{
		@ Current = null;
		Count = 0;
		ImagePosition.resize( 4 );
		CountPosition.resize( 4 );
	}
	
	void Done( )
	{
		Splitter::SplitResult@ result = @ Current;
		uint count = Count;
		::HideScreen( CLIENT_SCREEN_SPLIT_MK2, 0, 0, 0 );
		result.Split( count );
	}
	
    void OnMouseDown( int click ) override
	{
		if( click == MOUSE_CLICK_WHEEL_UP )
			SetCount( 1 );
		else if( click == MOUSE_CLICK_WHEEL_DOWN )
			SetCount( -1 );
	}
	
	void CountAll( )
	{
		SetCount( Current.SplitMaxCount, false );
	}
	
	void SetCount( int value, bool isAdd = true )
	{
		int count = Count;
		
		if( isAdd )
			count += value;
		else
			count = value;

		Count = count;
	}

	void OnKeyPress( uint8 key, uint8 letter, bool& result )
	{
		if( key == DIK_RETURN || key == DIK_NUMPADENTER )
			Done( );
		else 
		{
			string txt = "" + Count;
			int count = 0;
			if( key == DIK_BACK )
			{
				if( txt.length() > 0 )
					txt.resize( txt.length() - 1 );
			}
			else if( letter <= 0x39 && letter >= 0x30 )
			{
				if( txt.length() < 5 )
				{
					if( RealCount == 0 )
						txt[0] = letter;
					else
					{
						txt.resize( txt.length() + 1 );
						txt[txt.length() - 1] = letter;
					}
				}
			}
			::StrToInt( txt, count );
			
			Count = count;
		}
	}
	
	void OnDraw( int ScreenX, int ScreenY, int ElementX, int ElementY ) override
	{
		if( @Current !is null )
			Current.Draw( ScreenX + ImagePosition[0], ScreenY + ImagePosition[1], ImagePosition[2], ImagePosition[3] );

		string txt = "" + Count;
		
		switch( txt.length() )
		{
			case 0:
				break;
			case 1:
				txt = "0000" + Count; 
				break;
				
			case 2:
				txt = "000" + Count; 
				break;
				
			case 3:
				txt = "00" + Count;
				break;
				
			case 4:
				txt = "0" + Count;
				break;
				
			case 5:
				break;
				
			default:
				txt = "99999";
				break;
		}
		
		::DrawText( txt, ScreenX + CountPosition[0], ScreenY + CountPosition[1], CountPosition[2], CountPosition[3],
			ThisModule::Option::GUI::ColorValue, FONT_BIG_NUM, 0 );	
	}
	
	void OnShow( int p0, int p1, int p2 ) override
	{
		Count = 0;
	}
	
	void OnHide( int, int, int ) override
	{
		@ Current = null;
		Count = 0;
	}
	
	SplitResult@ Current;
	
	int[] ImagePosition;
	int[] CountPosition;
	
	uint RealCount;
	uint Count
	{
		get
		{
			if( RealCount == 0 )
				return 1;
			return RealCount;
		}
		
		set
		{
			int maxCount = ( ( @Current !is null ) ? Current.SplitMaxCount : 99999 );
			if( maxCount > 99999 )
				maxCount = 99999;
			RealCount = CLAMP( value, 0, uint( maxCount ) );
		}
	}
}