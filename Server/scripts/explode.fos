// Author: cvet, rifleman17
#include "_macros.fos"
#include "_msgstr.fos"
#include "_npc_pids.fos"

import void    InjureCritter( Critter& cr, uint dmg, uint dmgType, uint8 dir, uint attackerId ) from "combat";
import void    ItemDamage( Item& it, uint TotalDamag ) from "combat";
import Item@[] GetItems( Map& map, uint16 hexX, uint16 hexY, uint radius ) from "combat";
import void    QuakeScreen( Map& map ) from "effects";
import bool    explode_run_plastic( Critter& runner, Map@ map, Item@ plastic, Critter@ explCr, uint16 hexX, uint16 hexY ) from "main";
import bool    CityGuard_ProcessOfCrime( Critter& cr, int penalty, int info, Critter@ infoCr, Item@ infoIt, bool noPenalty ) from "Mk2";

#define TRAPS_HIDE                      # (traps)              ( ( traps ) / 5 + 10 )
#define EXPLODE_CLEARANCE_EXPERIENCE    ( 50 )

#define _ExplodeSetNumEvent             # ( explode, eventNum )explode.Val1 = int(eventNum)
#define _ExplodeGetNumEvent             # (explode) uint( explode.Val1 )
#define _ExplodeSetSwitch               # ( explode, explSwitch )explSwitch.Val1 = int(explode.Id)
#define _ExplodeGetExplode              # (explSwitch) GetItem( uint( explSwitch.Val1 ) )
#define _ExplodeSetOwner                # ( explode, ownerId )explode.Val2 = int(ownerId)
#define _ExplodeGetOwner                # (explode) uint( explode.Val2 )
#define _ExplodeSetBonusDamage          # ( explode, value )explode.Val3 = value
#define _ExplodeGetBonusDamage          # (explode) ( explode.Val3 / 4 + 250 )
#define _ExplodeSetBonusRadius          # ( explode, value )explode.Val4 = ( value )
#define _ExplodeGetBonusRadius          # (explode) ( explode.Val4 )

void ExplodeItemDrop( Item& it ) // Export
{
    uint16 itPid = it.GetProtoId();
    switch( itPid )
    {
    // PID_ACTIVE_MINE
    // 40% что погексовка ущерба не принесёт
    // 30% что мин просто будет уничтожен, без детонации
    // 30% что мин сдетонирует.
    case PID_ACTIVE_MINE:
    {
        CreateTimeEvent( __FullSecond, "e_Explode", it.Id, false );
    } break;
    // Пластид.
    // 65% что погексовка ущерба не принесёт
    // 20% что пластид просто будет уничтожен, без детонации
    // 15% что пластид сдетонирует.
    case PID_ACTIVE_PLASTIC_EXPLOSIVE:
    {
        uint16   x = 0;
        uint16   y = 0;
        Map@     map = it.GetMapPosition( x, y );
        Critter@ c = null;
        uint     ownerId = it.Val2;
        int      bD = it.Val3;
        int      bR = it.Val4;
        Explode( map, x, y, c, itPid, ownerId, bD, bR );
        DeleteItem( it );
    } break;
    default:
        break;
    }
}

/*void ExplodeItemCombat(Item& it) // Export
   {
        uint16 itPid=it.GetProtoId();
        switch (itPid)
        {
                // PID_ACTIVE_MINE
                // 40% что погексовка ущерба не принесёт
                // 30% что мин просто будет уничтожен, без детонации
                // 30% что мин сдетонирует.
                case PID_ACTIVE_MINE:
                        {
                                uint chance = Random(1,100);
                                if(chance>=70)
                                {
                                        DeleteItem(it);
                                } else if(chance>=40)
                                {
                                        CreateTimeEvent(__FullSecond,"e_Explode",it.Id,false);
                                }
                        } break;
                // Пластид.
                // 65% что погексовка ущерба не принесёт
                // 20% что пластид просто будет уничтожен, без детонации
                // 15% что пластид сдетонирует.
                case PID_ACTIVE_PLASTIC_EXPLOSIVE:
                        {
                                uint chance = Random(1,100);
                                if(chance>=80)
                                {
                                        DeleteItem(it);
                                }
                                else if(chance>=65)
                                {
                                        uint16 x=0;	uint16 y=0;
                                        Map@ map=it.GetMapPosition(x,y);
                                        Critter@ c=null;
                                        uint ownerId=it.Val2;
                                        int bD=it.Val3;
                                        int bR=it.Val4;
                                        Explode(map,x,y,c,itPid,ownerId,bD,bR);
                                        DeleteItem(it);
                                }
                        } break;

                default: break;
        }
   }*/

// Global on use, export
bool OnUseExplode( Critter& cr, Item& explode, Critter@ targetCr, Item@ targetItem, Scenery@ targetScen, uint timer ) // Export
{
    if( valid( targetCr ) || valid( targetItem ) || valid( targetScen ) )
        return false;
    uint16 pid = explode.GetProtoId();
    if( pid != PID_DYNAMITE && pid != PID_ACTIVE_DYNAMITE &&
        pid != PID_PLASTIC_EXPLOSIVES && pid != PID_ACTIVE_PLASTIC_EXPLOSIVE && pid != PID_TOGGLE_SWITCH &&
        pid != PID_MINE && pid != PID_ACTIVE_MINE )
        return false;

    bool isExpert = cr.Perk[ PE_DEMOLITION_EXPERT ] != 0;
    int  trapsSkill = cr.Skill[ SK_TRAPS ];
    if( trapsSkill < 0 )
        trapsSkill = 0;

    if( timer < TIMER_MIN_VALUE )
        timer = TIMER_MIN_VALUE;
    if( timer > TIMER_MAX_VALUE )
        timer = TIMER_MAX_VALUE;
    timer *= 60;   // Convert to game seconds

    // Activate dynamite explosion
    if( pid == PID_DYNAMITE )
    {
        @ targetItem = cr.AddItem( PID_ACTIVE_DYNAMITE, 1 );
        if( not valid( targetItem ) )
            return false;

        CityGuard_ProcessOfCrime( cr, City::PenaltyListing::ExplodeActivate, 0, null, targetItem, false );
        if( not isExpert )
            timer = timer * Random( 80, 120 ) / 100;

        uint numEvent = CreateTimeEvent( __FullSecond + timer, "explode@e_Explode", targetItem.Id, true );
        SETFLAG( targetItem.Flags, ITEM_TRAP );
        _ExplodeSetNumEvent( targetItem, numEvent );
        _ExplodeSetOwner( targetItem, cr.Id );
        targetItem.TrapValue = TRAPS_HIDE( cr.Skill[ SK_TRAPS ] );
        _ExplodeSetBonusDamage( targetItem, trapsSkill );
        _ExplodeSetBonusRadius( targetItem, isExpert ? 1 : 0 );
        if( cr.Timeout[ TO_REMOVE_FROM_GAME ] < int(timer) + REAL_MINUTE( 5 ) )
            cr.TimeoutBase[ TO_REMOVE_FROM_GAME ] = __FullSecond + timer + REAL_MINUTE( 5 );
    }
    // Activate plastic explosion
    else if( pid == PID_PLASTIC_EXPLOSIVES )
    {
        Item@ expl = cr.AddItem( PID_ACTIVE_PLASTIC_EXPLOSIVE, 1 );
        if( not valid( expl ) )
            return false;
        Item@ explSwitch = cr.AddItem( PID_TOGGLE_SWITCH, 1 );
        if( not valid( explSwitch ) )
            return false;

        CityGuard_ProcessOfCrime( cr, City::PenaltyListing::ExplodeActivate, 0, null, expl, false );
        SETFLAG( expl.Flags, ITEM_TRAP );
        _ExplodeSetSwitch( expl, explSwitch );
        _ExplodeSetOwner( expl, cr.Id );
        expl.TrapValue = TRAPS_HIDE( cr.Skill[ SK_TRAPS ] );
        _ExplodeSetBonusDamage( expl, trapsSkill );
        _ExplodeSetBonusRadius( expl, isExpert ? 1 : 0 );

        expl.Info += 2;
        explSwitch.Info += 2;
        expl.SetLexems( "$frequency" + expl.Id );
        explSwitch.SetLexems( "$frequency" + expl.Id );
        expl.Update();
        explSwitch.Update();
    }
    // Explode plastic explosion
    else if( pid == PID_TOGGLE_SWITCH )
    {
        Item@ expl = _ExplodeGetExplode( explode );
        if( valid( expl ) )
        {
            uint16 hexX = 0, hexY = 0;
            Map@   map = expl.GetMapPosition( hexX, hexY );
            if( not valid( cr.GetMap() ) || map.Id != cr.GetMap().Id )
            {
                cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_NO_EXPLODE );
                return true;
            }

            Critter@ crExpl = ( expl.Accessory == ACCESSORY_CRITTER ? ::GetCritter( expl.CritId ) : null );
            if( expl.Accessory == ACCESSORY_CONTAINER )
            {
                Item@ bags = GetItem( expl.ContainerId );
                if( valid( bags ) )
                {
                    @crExpl = ( bags.Accessory == ACCESSORY_CRITTER ? ::GetCritter( bags.CritId ) : null );
                }
            }
            if( explode_run_plastic( cr, map, expl, crExpl, hexX, hexY ) )
            {
                CityGuard_ProcessOfCrime( cr, City::PenaltyListing::Explode, 0, null, expl, false );
                DeleteItem( expl );
                Explode( map, hexX, hexY, crExpl, PID_ACTIVE_PLASTIC_EXPLOSIVE, _ExplodeGetOwner( expl ), _ExplodeGetBonusDamage( expl ), _ExplodeGetBonusRadius( expl ) );
            }
        }
    }
    // Activate mine
    else if( pid == PID_MINE )
    {
        Item@ mine = cr.AddItem( PID_ACTIVE_MINE, 1 );
        if( not valid( mine ) )
            return false;

        CityGuard_ProcessOfCrime( cr, City::PenaltyListing::ExplodeActivate, 0, null, mine, false );
        SETFLAG( mine.Flags, ITEM_TRAP );
        _ExplodeSetOwner( mine, cr.Id );
        mine.TrapValue = TRAPS_HIDE( cr.Skill[ SK_TRAPS ] );
        _ExplodeSetBonusDamage( mine, trapsSkill );
        // Log("bd="+_ExplodeGetBonusDamage(mine));
        _ExplodeSetBonusRadius( mine, isExpert ? 1 : 0 );
        mine.SetScript( "_ExplodeInit" );
    }
    // Deactivate dynamite explosion, plastic explosion or mine
    else if( ( pid == PID_ACTIVE_DYNAMITE || pid == PID_ACTIVE_PLASTIC_EXPLOSIVE || pid == PID_ACTIVE_MINE ) && ( explode.CritSlot == SLOT_HAND1 ) )
    {
        if( pid == PID_ACTIVE_DYNAMITE )
            ::EraseTimeEvent( _ExplodeGetNumEvent( explode ) );

        int chance = cr.Skill[ SK_TRAPS ] - ( explode.TrapValue - 10 ) * ( cr.Id == _ExplodeGetOwner( explode ) ? 5 : 10 );
        chance = CLAMP( chance, 5, 90 ) + cr.Stat[ ST_LUCK ];

        // Success
        if( chance > Random( 1, 100 ) )
        {
            if( pid == PID_ACTIVE_DYNAMITE )
                cr.AddItem( PID_DYNAMITE, 1 );
            else if( pid == PID_ACTIVE_MINE )
                cr.AddItem( PID_MINE, 1 );
            else if( pid == PID_ACTIVE_PLASTIC_EXPLOSIVE )
                cr.AddItem( PID_PLASTIC_EXPLOSIVES, 1 );
            cr.StatBase[ ST_EXPERIENCE ] += EXPLODE_CLEARANCE_EXPERIENCE;
        }
        // Fail
        else
        {
            CityGuard_ProcessOfCrime( cr, City::PenaltyListing::Explode, 0, null, explode, false );
            Map@ map = cr.GetMap();
            Explode( map, cr.HexX, cr.HexY, cr, pid, _ExplodeGetOwner( explode ), _ExplodeGetBonusDamage( explode ), _ExplodeGetBonusRadius( explode ) );
        }
    }

    _SubItem( explode, 1 );
    return true;
}

// Explosions initialisation
void _ExplodeInit( Item& item, bool firstTime )
{
    if( item.GetProtoId() == PID_ACTIVE_MINE )
    {
        SETFLAG( item.Flags, ITEM_TRAP );
        item.SetEvent( ITEM_EVENT_WALK, "_MineWalk" );
        item.Update();
    }
}

// Item walk event
void _MineWalk( Item& mine, Critter& cr, bool entered, uint8 dir )
{
    if( cr.IsPlayer() )
    {
        if( cr.Mode[ MODE_HIDE ] == 1 && cr.GetAccess() == ACCESS_ADMIN )
            return;
    }
    if( entered && cr.Stat[ ST_LOCOMOTION_TYPE ] != LOCOMOTION_FLY && ( cr.Perk[ PE_LIGHT_STEP ] == 0 || Random( 1, 100 ) >= 91 ) )
    {
        CreateTimeEvent( __FullSecond, "e_Explode", mine.Id, false );
    }
}

// Time event
uint e_Explode( uint[] @ values )
{
    Item@ item = GetItem( values[ 0 ] );
    if( not valid( item ) )
        return 0;

    uint16 explodePid = item.GetProtoId();
    uint   ownerId = _ExplodeGetOwner( item );
    int    bonusDamage = ( explodePid == PID_JACKAL_MINE_ACTIVE ) ? item.Val3 : _ExplodeGetBonusDamage( item );
    int    bonusRadius = _ExplodeGetBonusRadius( item );
    uint16 hexX = 0;
    uint16 hexY = 0;
    Map@   map = item.GetMapPosition( hexX, hexY );
    DeleteItem( item );

    Critter@ accessor = null;

    switch( item.Accessory )
    {
    case ACCESSORY_CONTAINER:
    {
        Item@ cont = GetItem( item.ContainerId );
        if( valid( cont ) )
        {
            if( cont.Accessory == ACCESSORY_CRITTER )
                @ accessor = ::GetCritter( cont.CritId );
        }
        break;
    }
    case ACCESSORY_CRITTER:
        @ accessor = ::GetCritter( item.CritId );
        break;
    default:
        break;
    }

    if( valid( accessor ) )
    {
        CityGuard_ProcessOfCrime( accessor, City::PenaltyListing::Explode, 0, null, item, false );
        item.Val8 = accessor.Id;
    }
    if( valid( map ) )
        Explode( map, hexX, hexY, null, explodePid, ownerId, bonusDamage, bonusRadius );
    else if( valid( accessor ) ) // Global map
        Explode( null, 0, 0, accessor, explodePid, ownerId, bonusDamage, bonusRadius );
    return 0;
}

void Explode( Map@ map, uint16 hexX, uint16 hexY, Critter@ cr, uint16 explodePid, uint ownerId, int bonusDamage, int bonusRadius ) // Export
{
    uint16 effectPid;
    uint   effectRadius;
    uint   damage;
    uint   damageType;
    uint   damageRadius;

    if( valid( map ) )
    {
        Item@[] items;
        map.GetItems( hexX, hexY, items );
        for( int i = 0, l = items.length(); i < l; i++ )
        {
            int16 pid = items[ i ].GetProtoId();
            if( pid >= PID_DYNAMITE && pid <= PID_TRAP )
            {
                Item@ dItem = items[ i ];
                if( valid( dItem ) )
                    DeleteItem( dItem );
            }
        }
    }

    switch( explodePid )
    {
    case PID_ACTIVE_DYNAMITE:
        effectPid = PID_EXPLODE_ROCKET;
        effectRadius = 1;
        damage = Random( 30, 50 );
        damageType = DAMAGE_EXPLODE;
        damageRadius = 3;
        break;
    case PID_ACTIVE_PLASTIC_EXPLOSIVE:
        effectPid = PID_EXPLODE_ROCKET;
        effectRadius = 2;
        damage = Random( 40, 80 );
        damageType = DAMAGE_EXPLODE;
        damageRadius = 3;
        break;
    case PID_ACTIVE_MINE:
        effectPid = PID_EXPLODE_ROCKET;
        effectRadius = 1;
        damage = Random( 40, 80 );
        damageType = DAMAGE_EXPLODE;
        damageRadius = 3;
        break;
    case PID_JACKAL_MINE_ACTIVE:
        effectPid = PID_EXPLODE_ROCKET;
        effectRadius = 1;
        damage = 0;        // Random(80,120); ’олько бонус, равный навыку
        damageType = DAMAGE_EXPLODE;
        damageRadius = 2;
        break;
    default:
        Log( "Invalid explode pid." );
        return;
    }

    damage += bonusDamage;
    if( damage <= 0 )
        damage = 1;
    damageRadius += bonusRadius;
    if( damageRadius <= 0 )
        damageRadius = 1;

    if( valid( map ) )
    {
        ExplodeEx( map, hexX, hexY, effectPid, effectRadius, damage, damageType, damageRadius, ownerId, cr );
    }
    else if( valid( cr ) )
        InjureCritter( cr, damage, damageType, cr.Dir, ownerId );

    // Log("ID ATACKER="+ownerId);
}

void ExplodeEx( Map& map, uint16 hexX, uint16 hexY, uint16 effectPid, uint effectRadius, uint damage, uint damageType, uint damageRadius, uint ownerId ) // Export
{
    map.RunEffect( effectPid, hexX, hexY, effectRadius, EFFECT_INSTRUCTION_NONE );
    map.PlaySound( Random( 0, 1 ) == 0 ? "WHN1XXX1.ACM" : "WHN1XXX2.ACM" );
    QuakeScreen( map );

    Critter@[] critters;
    if( map.GetCrittersHex( hexX, hexY, damageRadius, FIND_LIFE_AND_KO, critters ) == 0 )
        return;
    for( uint i = 0, iMax = critters.length(); i < iMax; i++ )
    {
        Critter@ cr = critters[ i ];
        uint     dist = ::GetDistantion( hexX, hexY, cr.HexX, cr.HexY );
        int      dir = ( dist == 0 ? ( cr.Dir + 3 ) % 6 : GetDirection( hexX, hexY, cr.HexX, cr.HexY ) );
        InjureCritter( cr, damage, damageType, dir, ownerId );
        if( ownerId != 0 )
            cr.AddEnemyInStack( ownerId );
    }
    Item@[] items = GetItems( map, hexX, hexY, damageRadius );
    for( uint i = 0, iMax = items.length(); i < iMax; i++ )
    {
        ItemDamage( items[ i ], damage );
    }
}

void ExplodeEx( Map& map, uint16 hexX, uint16 hexY, uint16 effectPid, uint effectRadius, uint damage, uint damageType, uint damageRadius, uint ownerId, Critter@ crit ) // Export
{
    map.RunEffect( effectPid, hexX, hexY, effectRadius, EFFECT_INSTRUCTION_NONE );
    map.PlaySound( Random( 0, 1 ) == 0 ? "WHN1XXX1.ACM" : "WHN1XXX2.ACM" );
    QuakeScreen( map );

    if( valid( crit ) )
    {
        if( crit.Id == ownerId )
        {
            Critter@[] critters;
            if( map.GetCrittersHex( hexX, hexY, damageRadius, FIND_LIFE_AND_KO, critters ) == 0 )
                return;
            Critter@[] lookCritters;
            crit.GetCritters( true, FIND_ALL, lookCritters );
            for( uint i = 0, iMax = critters.length(); i < iMax; i++ )
            {
                Critter@ cr = critters[ i ];
                for( uint j = 0, jMax = lookCritters.length(); j < jMax; j++ )
                {
                    if( valid( lookCritters[ j ] ) && crit.Id != cr.Id )
                    {
                        lookCritters[ j ].EventSmthAttack( crit, cr );
                        lookCritters[ j ].EventSmthAttacked( cr, crit );
                    }
                }
                uint dist = ::GetDistantion( hexX, hexY, cr.HexX, cr.HexY );
                int  dir = ( dist == 0 ? ( cr.Dir + 3 ) % 6 : GetDirection( hexX, hexY, cr.HexX, cr.HexY ) );
                InjureCritter( cr, damage, damageType, dir, ownerId );
                if( ownerId != 0 )
                    cr.AddEnemyInStack( ownerId );
            }
        }
        else
        {
            Critter@ attacker = GetCritter( ownerId );
            bool     IsAttacker = ( valid( attacker ) );
            Critter@[] critters;
            if( map.GetCrittersHex( hexX, hexY, damageRadius, FIND_LIFE_AND_KO, critters ) == 0 )
                return;
            Critter@[] lookCritters;
            crit.GetCritters( true, FIND_ALL, lookCritters );
            for( uint i = 0, iMax = critters.length(); i < iMax; i++ )
            {
                Critter@ cr = critters[ i ];
                // Исключаем урон по себе для ходячих мин
                if( cr.IsNpc() && cr.GetProtoId() == NPC_WALKING_MINE && crit.Merc[ MERC_MASTER_ID ] == cr.Merc[ MERC_MASTER_ID ] )
                    continue;
                for( uint j = 0, jMax = lookCritters.length(); j < jMax; j++ )
                {
                    if( valid( lookCritters[ j ] ) && crit.Id != cr.Id )
                    {
                        if( IsAttacker )
                        {
                            lookCritters[ j ].EventSmthAttack( attacker, cr );
                            lookCritters[ j ].EventSmthAttacked( cr, attacker );
                        }
                        lookCritters[ j ].EventSmthAttack( crit, cr );
                        lookCritters[ j ].EventSmthAttacked( cr, crit );
                    }
                }
                uint dist = ::GetDistantion( hexX, hexY, cr.HexX, cr.HexY );
                int  dir = ( dist == 0 ? ( cr.Dir + 3 ) % 6 : GetDirection( hexX, hexY, cr.HexX, cr.HexY ) );
                InjureCritter( cr, damage, damageType, dir, ownerId );
                if( IsAttacker )
                    cr.EventAttacked( attacker );
            }
        }
    }
    else
    {
        Critter@ attacker = GetCritter( ownerId );
        bool     IsAttacker = ( valid( attacker ) );
        Critter@[] critters;
        if( map.GetCrittersHex( hexX, hexY, damageRadius, FIND_LIFE_AND_KO, critters ) == 0 )
            return;
        Critter@[] lookCritters;
        if( IsAttacker )
            attacker.GetCritters( true, FIND_ALL, lookCritters );
        for( uint i = 0, iMax = critters.length(); i < iMax; i++ )
        {
            Critter@ cr = critters[ i ];
            for( uint j = 0, jMax = lookCritters.length(); j < jMax; j++ )
            {
                if( valid( lookCritters[ j ] ) && attacker.Id != cr.Id && !IsAttacker )
                {
                    lookCritters[ j ].EventSmthAttack( attacker, cr );
                    lookCritters[ j ].EventSmthAttacked( cr, attacker );
                }
            }
            uint dist = ::GetDistantion( hexX, hexY, cr.HexX, cr.HexY );
            int  dir = ( dist == 0 ? ( cr.Dir + 3 ) % 6 : GetDirection( hexX, hexY, cr.HexX, cr.HexY ) );
            InjureCritter( cr, damage, damageType, dir, ownerId );
            if( IsAttacker )
                cr.EventAttacked( attacker );
        }
    }
    Item@[] items = GetItems( map, hexX, hexY, damageRadius );
    for( uint i = 0, iMax = items.length(); i < iMax; i++ )
    {
        ItemDamage( items[ i ], damage );
    }
}

/*
        Самовостанавливающаяся мина, которую можно положить через маппер
        восстанавливается через некоторое время в тех же координатах
        после того, как взорвется
        время восстановления, в игровых минутах, указывается в Val1
        поскольку Val1 - используется только для динамита пока
        !работает только для предмета Активированная мина
        все параметры:
        Val1 - время респавна мины после активации, в игровых минутах
        Val2 - Id сапера, поставившего мину
        TrapValue- сложность мины
        Val3 - дополнительный урон
        Val4 - дополнительный радиус(базовый радиус=3)
 */
void _TimerMineInit( Item& mine, bool firstTime )
{
    if( mine.GetProtoId() == PID_ACTIVE_MINE )
    {
        mine.SetEvent( ITEM_EVENT_WALK, "_TimerMineWalk" );
        mine.SetEvent( ITEM_EVENT_SKILL, "_OnSkillTimerMine" );
        mine.Val4 = CLAMP( mine.Val4, 1, 5 );
        SETFLAG( mine.Flags, ITEM_TRAP );
        mine.Update();
    }
}

void _TimerMineWalk( Item& mine, Critter& cr, bool entered, uint8 dir )
{
    // Cкопировано из _MineWalk
    if( entered && cr.Stat[ ST_LOCOMOTION_TYPE ] != LOCOMOTION_FLY && ( cr.Perk[ PE_LIGHT_STEP ] == 0 || Random( 1, 100 ) >= 91 ) )
    {
        CreateTimeEvent( __FullSecond, "e_Explode", mine.Id, false );

        // Respawn
        if( mine.Val1 > 0 )
        {
            uint[] values = { mine.MapId, mine.HexX, mine.HexY, mine.GetProtoId(), mine.Val1, mine.Val2, mine.TrapValue, mine.Val3, mine.Val4 }; // 9 элементов массива
            CreateTimeEvent( __FullSecond + mine.Val1 * 60, "e_RespawnTimerMine", values, true );
        }
    }
}

uint e_RespawnTimerMine( uint[] @ values )
{
    if( values.length() < 9 )
        return 0;

    Map@ map = GetMap( values[ 0 ] );
    if( valid( map ) )
    {
        Item @ mine = map.AddItem( values[ 1 ], values[ 2 ], values[ 3 ], 1 );
        if( valid( mine ) )
        {
            mine.Val1 = values[ 4 ];
            mine.Val2 = values[ 5 ];
            mine.TrapValue = ( values[ 6 ] == 0 ? Random( 30, 50 ) : values[ 6 ] );
            mine.Val3 = values[ 7 ];
            mine.Val4 = CLAMP( values[ 8 ], 1, 5 );
            mine.Update();
            mine.SetScript( "_TimerMineInit" );
        }
    }

    return 0;
}

bool _OnSkillTimerMine( Item& mine, Critter& cr, int skill )
{
    uint16 pid = mine.GetProtoId();
    if( pid != PID_ACTIVE_MINE || skill != SK_TRAPS )
        return false;

    bool isExpert = cr.Perk[ PE_DEMOLITION_EXPERT ] != 0;
    int  trapsSkill = MAX( cr.Skill[ SK_TRAPS ], 1 );

    int  chance = trapsSkill - ( mine.TrapValue - 10 ) * ( cr.Id == _ExplodeGetOwner( mine ) ? 5 : 10 );
    chance = CLAMP( chance, 5, 90 ) + cr.Stat[ ST_LUCK ];

    // Success
    if( chance > Random( 1, 100 ) )
    {
        cr.StatBase[ ST_EXPERIENCE ] += EXPLODE_CLEARANCE_EXPERIENCE;
    }
    // Fail
    else
    {
        Map@ map = cr.GetMap();
        Explode( map, cr.HexX, cr.HexY, cr, pid, _ExplodeGetOwner( mine ), _ExplodeGetBonusDamage( mine ), _ExplodeGetBonusRadius( mine ) );
    }

    if( mine.Val1 > 0 )
    {
        uint[] values = { mine.MapId, mine.HexX, mine.HexY, mine.GetProtoId(), mine.Val1, mine.Val2, mine.TrapValue, mine.Val3, mine.Val4 }; // 9 элементов массива
        CreateTimeEvent( __FullSecond + mine.Val1 * 60 + Random( 120, 240 ) * 60, "e_RespawnTimerMine", values, true );
    }

    _SubItem( mine, 1 );
    return true;
}

bool IsExplosive( Item@ item ) // Export
{
    if( @item == null )
        return false;
    uint pid = item.GetProtoId();
    return ( pid == PID_ACTIVE_MINE || pid == PID_ACTIVE_PLASTIC_EXPLOSIVE || pid == PID_ACTIVE_DYNAMITE || pid == PID_JACKAL_MINE_ACTIVE );
}

void _JackalMineWalk( Item& mine, Critter& cr, bool entered, uint8 dir )
{
    MoveItem( mine, 1, cr );
    cr.PlaySound( "FLRTRAP.ACM", cr.IsPlayer() );
}

void _JackalMineInit( Item& mine, bool firstTime )
{
    if( !firstTime )
        DeleteItem( mine );
    else
    {
        SETFLAG( mine.Flags, ITEM_TRAP );
        mine.SetEvent( ITEM_EVENT_WALK, "_JackalMineWalk" );
        mine.Val1 = CreateTimeEvent( __FullSecond + REAL_SECOND( 30 ), "e_Explode", mine.Id, false );
    }
}

void unsafe_ActivateJackal( Critter& cr, int, int, int, string@, int[] @ )
{
    Item@ jackal = _CritGetItemHand( cr );
    if( @jackal == null || jackal.GetProtoId() != PID_JACKAL || cr.IsDead() )
    {
        cr.Say( SAY_NETMSG, "FAIL!" );
        return;
    }
    if( cr.Stat[ ST_CURRENT_AP ] < 2 )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 14200 );
        return;
    }
    cr.StatBase[ ST_CURRENT_AP ] -= 200;
    Item@[] items;
    Critter@[] critters;
    GetAllItems( PID_JACKAL_MINE_ACTIVE, items );
    for( uint n = 0; n < items.length(); n++ )
    {
        if( items[ n ].LockerId == jackal.Id )
        {
            uint duration = 0;
            uint[] values;
            if( GetTimeEvent( items[ n ].Val1, duration, values ) )
            {
                SetTimeEvent( items[ n ].Val1, 0, values );
            }
            else
                CreateTimeEvent( __FullSecond, "e_Explode", items[ n ].Id, false );
        }
    }
}
