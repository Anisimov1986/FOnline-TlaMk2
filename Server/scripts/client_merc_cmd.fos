#define MODE_MOVE       ( 2 )
#define MODE_ATTACK     ( 1 )
#define MODE_DEFAULT    ( 0 )

int   LastX, LastY;

class MercScr
{
    IGUIElementOpt@[] Elements;

    bool hide = false;

    void SwitchVisibility()
    {
        hide = !hide;
        ToHide( hide );
    }

    void ToHide( bool toHide )
    {
        CritterCl@ cr = GetChosen();
        if( !valid( cr ) )
            return;
        if( hide || ( cr.Param[ ST_FR_LEADERSHIP ] == 0 && cr.Param[ MASTER_COUNT_MERC ] == 0 ) )
            toHide = true;
        for( uint n = 0; n < Elements.length(); n++ )
        {
            if( valid( Elements[ n ] ) )
                Elements[ n ].ToHide( toHide );
        }
    }

    bool IsHidden()
    {
        for( uint n = 0; n < Elements.length(); n++ )
        {
            if( valid( Elements[ n ] ) )
                return Elements[ n ].IsHidden();
        }
        return true;
    }

    void KeepCursor( int cursor )
    {
        for( uint n = 0; n < Elements.length(); n++ )
        {
            if( @Elements[ n ] == null )
            {
                continue;
            }
            if( Elements[ n ].IsAutoCursor() )
                Elements[ n ].KeepCursor( cursor );
        }
    }
}

void ShowMercScreen( bool show )
{
    MercScreen.ToHide( !show );
}

class AttackButton : IGUI::ElementCallbackMouseClick
{
    void OnMouseClick( int click )
    {
        if( click != MOUSE_CLICK_LEFT )
            return;
        merc_setmode( MODE_ATTACK );
    }
}

class MoveButton : IGUI::ElementCallbackMouseClick
{
    void OnMouseClick( int click )
    {
        if( click != MOUSE_CLICK_LEFT )
            return;
        merc_setmode( MODE_MOVE );
    }
}

class CancelButton : IGUI::ElementCallbackMouseClick
{
    void OnMouseClick( int click )
    {
        if( click != MOUSE_CLICK_LEFT )
            return;
        RunServerScriptUnsafe( "merc@unsafe_MercCmd", 0, 0, 2, null, null );
    }
}

class SelectButton : IGUI::ElementCallbackMouseClick
{
    void OnMouseClick( int click )
    {
        if( click != MOUSE_CLICK_LEFT )
            return;
        ChangeCursor( CURSOR_DEFAULT );
        TDown = !TDown;
        __HideCursor = TDown;
    }
}

class MercScreenInit : IGUI::ElementCallbackInit
{
    void OnInit()
    {
        CritterCl@ cr = GetChosen();
        MercScreen.Elements.insertLast( GUI_GetElementOptions().ToHide( __IfaceHidden || @cr == null || ( cr.Param[ ST_FR_LEADERSHIP ] == 0 && cr.Param[ MASTER_COUNT_MERC ] == 0 ) || MercScreen.hide ) );
    }
}

MercScr MercScreen;

void InitCMDScreen()
{
    AttackButton   AttackBtn;
    MoveButton     MoveBtn;
    CancelButton   CancelBtn;
    MercScreenInit Init;

    int[] coords = GetIfaceCoords( "mercMenuPos" );
    GUI_AddScreenElement( CLIENT_MAIN_SCREEN_GAME, GetIfaceIniStr( "mercMenuPic" ), coords[ 0 ], coords[ 1 ] )
    .AutoCursor( CURSOR_DEFAULT )
    .CallbackInit( Init );

    int[] SelectCoords = GetIfaceCoords( "mSelectBtnCoords" );
    GUI_AddScreenElement( CLIENT_MAIN_SCREEN_GAME, "", coords[ 0 ] + SelectCoords[ 0 ], coords[ 1 ] + SelectCoords[ 1 ] )
    .CallbackInit( Init )
    .CallbackMouseClick( SelectButton() )
    .DownPic( GetIfaceIniStr( "mercSelectPic" ) );

    int[] AttackCoords = GetIfaceCoords( "mAttackBtnCoords" );
    GUI_AddScreenElement( CLIENT_MAIN_SCREEN_GAME, "", coords[ 0 ] + AttackCoords[ 0 ], coords[ 1 ] + AttackCoords[ 1 ] )
    .CallbackMouseClick( AttackBtn )
    .Text( "", FONT_FALLOUT, COLOR_DGREEN, COLOR_RED, FT_CENTERX | FT_CENTERY )
    .DownPic( GetIfaceIniStr( "mercAttackPic" ) )
    .CallbackInit( Init );

    int[] MoveCoords = GetIfaceCoords( "mMoveBtnCoords" );
    GUI_AddScreenElement( CLIENT_MAIN_SCREEN_GAME, "", coords[ 0 ] + MoveCoords[ 0 ], coords[ 1 ] + MoveCoords[ 1 ] )
    .CallbackMouseClick( MoveBtn )
    .Text( "", FONT_FALLOUT, COLOR_DGREEN, COLOR_RED, FT_CENTERX | FT_CENTERY )
    .DownPic( GetIfaceIniStr( "mercMovePic" ) )
    .CallbackInit( Init );

    int[] StopCoords = GetIfaceCoords( "mStopBtnCoords" );
    GUI_AddScreenElement( CLIENT_MAIN_SCREEN_GAME, "", coords[ 0 ] + StopCoords[ 0 ], coords[ 1 ] + StopCoords[ 1 ] )
    .CallbackMouseClick( CancelBtn )
    .Text( "", FONT_FALLOUT, COLOR_DGREEN, COLOR_RED, FT_CENTERX | FT_CENTERY )
    .DownPic( GetIfaceIniStr( "mercStopPic" ) )
    .CallbackInit( Init );
}
