
shared class Quest
{
    Quest( uint countStat, string@ name, uint id, bool init = true )
    {
        CountStat = countStat;
        @ Name = name;
        Finish = false;
        Id = id;
        Init = init;

        if( IsAnyData( Name + "_" + id ) )
        {
            GetAnyData( Name + "_" + id, Data );
            Init = true;
        }
        else if( Init )
        {
            Data.resize( countStat );
            SetAnyData( Name + "_" + id, Data );
        }
    }

    Quest( uint countStat, string@ name, Critter & cr, bool init = true )
    {
        CountStat = countStat;
        @ Name = name;
        Finish = false;
        Init = init;
        if( not IsAnyData( "cr_qRef_" + Name + "_" + cr.Id ) )
            Id = cr.Id;
        else
        {
            int32[] _data;
            Init = false;
            if( GetAnyData( "cr_qRef_" + Name + "_" + cr.Id, _data ) )
            {
                Id = _data[ 0 ];
                if( GetAnyData( Name + "_" + Id, Data ) )
                {
                    Init = true;
                }
            }
            return;
        }

        if( IsAnyData( Name + "_" + Id ) )
        {
            GetAnyData( Name + "_" + Id, Data );
            Init = true;
        }
        else if( Init )
        {
            Data.resize( countStat );
            Data.insertLast( cr.Id );
            int32[] _refData = { Id };
            SetAnyData( Name + "_" + Id, Data );
            SetAnyData( "cr_qRef_" + Name + "_" + cr.Id, _refData );
            CallbackAddCritter( cr );
        }
    }

    ~Quest()
    {
        if( not Init )
            return;
        if( Finish )
        {
            for( uint i = 0, iEnd = CountPlayers; i < iEnd; i++ )
            {
                CallbackFinishCritter( Player[ i ] );
                EraseAnyData( "cr_qRef_" + Name + "_" + PlayerId[ i ] );
            }
            EraseAnyData( Name + "_" + Id );
            CallbackFinish();
        }
        else
            Update();
    }

    Quest@ opAddAssign( Critter& cr )
    {
        if( Init )
        {
            // Log( "Добавляем криттера в квест" );
            if( this != cr )
            {
                Data.insertLast( cr.Id );
                int32[] _refData = { Id };
                SetAnyData( Name + "_" + Id, Data );
                SetAnyData( "cr_qRef_" + Name + "_" + cr.Id, _refData );
                CallbackAddCritter( cr );
            }
            // CallbackAddCritter( cr );
        }
        return this;
    }

    Quest@ opAddAssign( Critter@[] crs )
    {
        if( Init )
        {
            for( uint i = 0, iEnd = crs.length(); i < iEnd; i++ )
            {
                if( valid( crs[ i ] ) )
                    this += crs[ i ];
            }
        }
        return this;
    }

    Quest@ opAdd( Critter@[] crs )
    {
        return this += crs;
    }

    Quest@ opAdd( Critter& cr )
    {
        return this += cr;
    }

    void Update()
    {
        if( Init )
            SetAnyData( Name + "_" + Id, Data );
    }

    bool opEquals( Critter& cr )
    {
        // Log( "Проверяем, взят ли квест" );
        if( valid( Name ) )
            return IsAnyData( "cr_qRef_" + Name + "_" + cr.Id );
        Log( "Имя квеста не установлено." );
        return false;
    }

    Quest@ opNeg()
    {
        // Log( "Удаляем" );
        Finish = true;
        return this;
    }

    uint get_CountPlayers()
    {
        if( Data.length() < CountStat )
        {
            Log( "Ошибка синхронихации данных" );
            return 0;
        }
        return Data.length() - CountStat;
    }

    Critter@ get_Player( uint index )
    {
        index += CountStat;
        if( index >= Data.length() )
            return null;

        return GetCritter( Data[ index ] );
    }

    uint get_PlayerId( uint index )
    {
        index += CountStat;
        if( index >= Data.length() )
            return 0;

        return Data[ index ];
    }

    int get_Stat( uint index )
    {
        if( index < CountStat )
            return Data[ index ];

        Log( "Индекс квестового стата выше количества статов." );
        return 0;
    }

    void set_Stat( uint index, int value )
    {
        if( index < CountStat )
        {
            CallbackChangeStat( index, value );
            Data[ index ] = value;
        }

        Log( "Индекс квестового стата выше количества статов." );
    }

    void CallbackAddCritter( Critter& cr )                {}
    void CallbackFinishCritter( Critter& cr )             {}
    void CallbackChangeStat( uint indexStat, int& value ) {}
    void CallbackFinish()                                 {}

    uint          Id;
    bool          Finish;
    bool          Init;
    string@       Name;

    private int[] Data;
    private uint  CountStat;
}
