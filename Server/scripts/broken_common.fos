// Author: rifleman17
// Квесты Брокен Хиллс
#include "_macros.fos"

// Квест "Рога изобилия".

#define PID_SABOTEUR_MALE      ( 252 )
#define PID_SABOTEUR_FEMALE    ( 253 )
#define STR_KILL_SABOTEUR      ( 5900 )
#define HOLO_MSG_ID            ( 56 )
#define STR_LOW_SCIENCE        ( 5901 )
#define STR_HIGH_SCIENCE       ( 5902 )
#define MIN_SCIENCE            ( 120 )
#define URANIUM_DISCOUNT       ( 25 )                  // Скидка в процентах на уран для выполнившего квест

import void _TraderInit( Critter& trader, bool firstTime ) from "trader";
import void EncounterNpc_NpcInit( Critter& npc, bool firstTime ) from "Mk2";
import void EncounterNpc_NpcDead( Critter& npc, Critter@ killer ) from "Mk2";

// Подсчет убитых саботажников для квеста
void CountDeadSaboteurs( Critter& cr, Map@ map, Critter@ killer )
{
    if( !validEngineObject( map ) || !validEngineObject( killer ) || cr.IsPlayer() || killer.IsNpc() )
        return;
    uint pid = cr.GetProtoId();
    if( pid != PID_SABOTEUR_MALE && pid != PID_SABOTEUR_FEMALE )
        return;
    Critter@ leader = killer.GetFollowLeader();
    if( !validEngineObject( leader ) )
        @leader = killer;
    array< Critter@ > grp = { @leader };
    leader.GetFollowGroup( FIND_LIFE, grp );
    Critter@          player = null;
    GameVar@          qVar = null, counter = null;
    for( uint i = 0, iMax = grp.length(); i < iMax; i++ )
    {
        @ player = grp[ i ];
        if( !validEngineObject( player ) || player.IsNpc() )
            continue;

        @ qVar = GetLocalVar( LVAR_q_bh_super_new_technology, player.Id );
        if( !valid( qVar ) || qVar != 2 )
            continue;

        @ counter = GetLocalVar( LVAR_bh_dead_saboteurs_counter, player.Id );
        if( !valid( counter ) )
            continue;
        if( counter.GetValue() == 39 )
            qVar = 3;

        counter = counter.GetValue() + 1;
        player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_KILL_SABOTEUR, "$dead" + counter.GetValue() );
    }
}

void r_WriteHolodisk( Critter& player, Critter@ )
{
    Item@ holo = player.AddItem( PID_HOLODISK, 1 );
    if( validEngineObject( holo ) )
        holo.SetScript( "broken_common@_HoloInit" );
}

void _HoloInit( Item& holo, bool )
{
    holo.HolodiskNumber = HOLO_MSG_ID;
    holo.SetEvent( ITEM_EVENT_USE, "_HoloUse" );
    holo.SetEvent( ITEM_EVENT_SKILL, "_HoloSkill" );
    holo.Update();
}

bool _HoloSkill( Item&, Critter&, int skill )
{
    if( skill == SKILL_PICK_ON_GROUND )
        return false;
    return true;
}

bool _HoloUse( Item& item, Critter& cr, Critter@, Item@ onItem, Scenery@ onScenery )
{
    if( validEngineObject( onItem ) || valid( onScenery ) )
        return true;
    if( cr.Skill[ SK_SCIENCE ] >= MIN_SCIENCE )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_HIGH_SCIENCE );
        GameVar@ check = GetLocalVar( LVAR_bh_hub_holo_remembered, cr.Id );
        if( valid( check ) && check.GetValue() == 0 )
            check = 1;
    }
    else
        cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_LOW_SCIENCE );
    return true;
}

void r_GrantPlayer( Critter& cr, Critter@ )
{
    cr.StatBase[ ST_RADIATION_RESISTANCE ] += 5;
}

void _GhoulTraderInit( Critter& cr, bool firstTime )
{
    _TraderInit( cr, firstTime );
    cr.SetEvent( CRITTER_EVENT_BARTER, "_GhoulBarter" );
}

bool _GhoulBarter( Critter& cr, Critter& player, bool attach, uint barterCount )
{
    bool setDisc = false;
    if( attach && barterCount < 2 )
    {
        GameVar@ hasDiscount = GetLocalVar( LVAR_bh_uran_discount, player.Id );
        if( valid( hasDiscount ) && hasDiscount.GetValue() == 1 )
            setDisc = true;
    }
    SedUraniumCost( cr, ( setDisc ? 100 - URANIUM_DISCOUNT : 100 ) );
    return true;
}

void SedUraniumCost( Critter& cr, uint8 percent )
{
    Item@ ore = cr.GetItem( PID_REFINED_ORE, -1 );
    if( !validEngineObject( ore ) )
        return;
    uint newCost = uint( ore.Proto.Cost * percent * 0.01 );
    ore.Cost = newCost;
}

void _SaboteurInit( Critter& npc, bool firstTime )
{
    EncounterNpc_NpcInit( npc, firstTime );
    npc.SetEvent( CRITTER_EVENT_DEAD, "_SaboteurDead" );
}

void _SaboteurDead( Critter& npc, Critter@ killer )
{
    if( validEngineObject( killer ) )
    {
        CountDeadSaboteurs( npc, npc.GetMap(), killer );
        EncounterNpc_NpcDead( npc, killer );
    }
}
