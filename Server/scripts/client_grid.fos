#include "_client_defines.fos"
#include "client_gui_h.fos"
#include "_colors.fos"
#include "_macros.fos"
#include "client_rectangle_h.fos"

#define SCROLL_UP      ( -1 )
#define SCROLL_NONE    ( 0 )
#define SCROLL_DN      ( 1 )

interface IGridCellCallback {
    void OnCellValueNeeded( uint row, uint column, string& text );
    void OnCellSelected( uint rowIndex );
}
interface IGridColumnSortedCallback {
    void OnColumnSort( uint sortedValue, bool descending );
}

class GridScrollBarButton : IGUI::ElementCallbackMouseClick, IGUI::ElementCallbackInit
{
    GridTable@      Grid;
    string          Pic;
    string          PicDn;               // Изображение кнопки в нажатом состоянии
    string          PicDisabled;         // Изображение кнопки в неактивном состоянии
    Rectangle@      Bounds;
    int             ScrollDirection;     // Напрваление скролла при нажатии на кнопку
    IGUIElementOpt@ Options;
    bool            Enabled;

    GridScrollBarButton( GridTable & grid, string@ picture, string@ pictureDn, string@ pictureDisabled, Rectangle@ bounds, int direction )
    {
        @Grid = grid;
        @Bounds = bounds;
        ScrollDirection = direction;
        @Options = null;
        Enabled = true;
        Pic = picture;
        PicDn = pictureDn;
        PicDisabled = pictureDisabled;
    }

    void OnInit()
    {
        @Options = GUI_GetElementOptions();
    }

    void SetEnable( bool enabled )
    {
        // TODO: добавить перерисовку картинки основную
        // Заменить ее на PicDisabled
        Enabled = enabled;
        if( enabled )
        {
            Options.DownPic( null );
            // Picture(PicDisabled);
        }
        else
        {
            Options.DownPic( PicDn );
            // Picture(Pic);
        }
    }

    void Init()
    {
        GUI_AddScreenElement( Grid.ScreenIndex, Pic, Bounds.Location.X, Bounds.Location.Y )
        .DownPic( PicDn )
        .Position( Bounds.Location.X, Bounds.Location.Y, Bounds.Region.Width, Bounds.Region.Height )
        .CallbackInit( this )
        .CallbackMouseClick( this );
    }

    void OnMouseClick( int click )
    {
        if( click == MOUSE_CLICK_LEFT )
            Grid.SetScroll( ScrollDirection, 1 );
    }

}

// Таблица
class GridTable : IGUI::ElementCallbackInit
{
    int             ScreenIndex;
    Rectangle@      Bounds;
    IGUIElementOpt@ Options;
    GridColumn[]         Columns;
    GridCell[][]         Cells;
    int                        HeaderHeight;
    int                        RowHeight; // Высота одной строки
    int                        MaxVisibleRows;
    int                        FirstVisibleRow;
    int                        LastSelectedRow;
    int                        TotalRows; // Всего строк
    IGridCellCallback@         CellsCallback;
    GridScrollBarButton@       BtnUp;
    GridScrollBarButton@       BtnDn;
    IGridColumnSortedCallback@ SortingCallback;

    GridTable( int screen, Rectangle & bounds, int headerHeight, int rowHeight, int totalRows )
    {
        ScreenIndex = screen;
        @Bounds = bounds;
        HeaderHeight = headerHeight;
        RowHeight = rowHeight;
        LastSelectedRow = -1;
        FirstVisibleRow = 0;
        TotalRows = totalRows;
    }

    void OnInit()
    {
        @Options = GUI_GetElementOptions();
        LastSelectedRow = -1;
        FirstVisibleRow = 0;
    }

    void UpBtnOptions( string picture, string pictureDn, string pictureDisabled, Rectangle& boundsBtn, int direction )
    {
        @BtnUp = GridScrollBarButton( this, picture, pictureDn, pictureDisabled, boundsBtn, direction );
    }

    void DnBtnOptions( string picture, string pictureDn, string pictureDisabled, Rectangle& boundsBtn, int direction )
    {
        @BtnDn = GridScrollBarButton( this, picture, pictureDn, pictureDisabled, boundsBtn, direction );
    }

    void SetScroll( int dir, int steps )
    {
        if( dir == SCROLL_UP && FirstVisibleRow > 0 )
        {
            FirstVisibleRow--;
            Refresh();
            if( LastSelectedRow >= 0 && LastSelectedRow + 1 < MaxVisibleRows )
                SelectRow( LastSelectedRow + 1 );

        }
        else if( dir == SCROLL_DN && FirstVisibleRow + MaxVisibleRows < TotalRows )
        {
            FirstVisibleRow++;
            Refresh();
            if( LastSelectedRow >= 0 && LastSelectedRow - 1 >= 0 )
                SelectRow( LastSelectedRow - 1 );
        }
    }

    void OnColumnSort( uint sortedValue, bool descending )
    {
        // Message("on column sort");
        for( uint i = 0, l = Columns.length(); i < l; i++ )
        {
            if( Columns[ i ].Header.SortedValue == sortedValue )
            {
                Columns[ i ].Header.ForeColor = ( descending ? COLOR_LBLUE : COLOR_LGREEN );
            }
            else
            {
                Columns[ i ].Header.ForeColor = COLOR_RED;
            }
            Columns[ i ].Header.Draw();
        }
    }

    void Refresh()
    {

        for( uint i = 0, l = this.Cells.length(); i < l; i++ )
        {
            for( uint j = 0, k = this.Cells[ i ].length(); j < k; j++ )
            {
                this.Cells[ i ][ j ].Refresh();
            }
        }
    }

    // Добавление колонки
    void AddColumn(
        string headerText,
        int    headerFormat,
        string headerPic,
        uint   headerForeColor,
        int    columnWidth,
        int    columnFormat,
        uint   columnForeColor,
        uint   columnForeColorSelected,
        uint   sortedValue )
    {
        GridColumn       column();
        GridColumnHeader header();
        @column.Header = header;
        @column.Grid = this;
        @header.Column = column;
        @header.Grid = this;
        header.SortedValue = sortedValue;
        int x = Bounds.Location.X;
        int y = Bounds.Location.Y;
        for( uint i = 0, l = Columns.length(); i < l; i++ )
            x += Columns[ i ].Width;
        @header.Bounds = Rectangle( x, y, columnWidth, HeaderHeight );
        header.Caption = headerText;
        header.Picture = headerPic;
        header.FormatCaption = headerFormat;
        header.ForeColor = headerForeColor;
        column.Width = columnWidth;
        column.CellFormat = columnFormat;
        column.CellForeColor = columnForeColor;
        column.CellForeColorSelected = columnForeColorSelected;
        column.ColumnIndex = Columns.length();
        Columns.insertLast( column );
    }

    void SelectRow( int rowIndex )
    {
        if( rowIndex == LastSelectedRow )
            return;
        if( LastSelectedRow >= 0 )
        {
            for( uint i = 0, l = Columns.length(); i < l; i++ )
            {
                this.Cells[ LastSelectedRow ][ i ].Unselect();
            }
        }

        for( uint i = 0, l = Columns.length(); i < l; i++ )
        {
            this.Cells[ rowIndex ][ i ].Select();
        }
        LastSelectedRow = rowIndex;
        if( valid( CellsCallback ) )
        {
            CellsCallback.OnCellSelected( rowIndex );
        }
    }

    void Init()
    {
        MaxVisibleRows = int( ( Bounds.Region.Height - HeaderHeight ) / RowHeight );
        this.Cells.resize( 0 );
        for( uint i = 0, l = Columns.length(); i < l; i++ )
        {
            Columns[ i ].Header.Init();
        }
        int x = 0;
        int y = Columns[ 0 ].Header.Bounds.Location.Y + Columns[ 0 ].Header.Bounds.Region.Height;
        for( int i = 0; i < MaxVisibleRows; i++ )
        {
            this.Cells.grow( 1 );
            x = Columns[ 0 ].Header.Bounds.Location.X;
            for( uint j = 0, l = Columns.length(); j < l; j++ )
            {
                this.Cells[ i ].insertLast( GridCell( this, Rectangle( x, y, Columns[ j ].Width, RowHeight ), i, j ) );
                this.Cells[ i ].last().Init();
                x += Columns[ j ].Width;
            }
            y += RowHeight;
        }
        if( valid( BtnUp ) )
            BtnUp.Init();
        if( valid( BtnDn ) )
            BtnDn.Init();
        GUI_AddScreenElement( ScreenIndex, null, Bounds.Location.X, Bounds.Location.Y )
        .Position( Bounds.Location.X, Bounds.Location.Y, Bounds.Region.Width, Bounds.Region.Height );
    }
}
// Колонка
class GridColumn
{
    GridTable@        Grid;
    GridColumnHeader@ Header;
    int               Width;
    int               CellFormat;
    uint              CellForeColor;
    uint              CellForeColorSelected;
    int               ColumnIndex;
}

// Заголовок таблицы, при клике сортируется содержимое и сбивается позиция скролла на 0
class GridColumnHeader : IGUI::ElementCallbackInit, IGUI::ElementCallbackMouseClick
{
    GridTable@      Grid;
    GridColumn@     Column;
    Rectangle@      Bounds;
    IGUIElementOpt@ Options;
    string          Caption;
    string          Picture;
    uint            FormatCaption;
    uint            ForeColor;
    uint            SortedValue;
    bool            Descending;

    void OnInit()
    {
        @Options = GUI_GetElementOptions();
    }

    void OnMouseClick( int click )
    {
        if( click == MOUSE_CLICK_LEFT )
        {
            // Message("click. Sorted value: " + SortedValue);
            if( SortedValue > 0 )
            {
                Descending = !Descending;
                if( valid( Grid ) )
                {
                    Grid.OnColumnSort( SortedValue, Descending );
                    if( valid( Grid.SortingCallback ) )
                    {
                        Grid.SortingCallback.OnColumnSort( SortedValue, Descending );
                    }
                }
            }
        }
    }

    void Draw()
    {
        if( valid( Options ) )
        {
            Options.Text( Caption, FONT_FALLOUT, ForeColor, ForeColor, FormatCaption );
        }
    }
    void Init()
    {
        GUI_AddScreenElement( Grid.ScreenIndex, Picture, Bounds.Location.X, Bounds.Location.Y )
        .Position( Bounds.Location.X, Bounds.Location.Y, Bounds.Region.Width, Bounds.Region.Height )
        .Text( Caption, FONT_FALLOUT, ForeColor, ForeColor, FormatCaption )
        .CallbackInit( this )
        .CallbackMouseClick( this );
    }
}



// Ячейка таблицы
class GridCell : IGUI::ElementCallbackInit, IGUI::ElementCallbackMouseClick
{
    GridTable@         Grid;
    Rectangle@         Bounds;
    IGUIElementOpt@    Options;
    bool               IsSelected;
    int                RowIndex;
    int                ColumnIndex;
    string             Text;
    IGridCellCallback@ ValueNeededCallback;

    GridCell( GridTable & grid, Rectangle & bounds, int rowIndex, int columnIndex )
    {
        @Grid = grid;
        @Bounds = bounds;
        RowIndex = rowIndex;
        ColumnIndex = columnIndex;
    }

    GridCell@ SetCellValueNeededCallback( IGridCellCallback@ callback )
    {
        @ValueNeededCallback = callback;
        return this;
    }

    void Refresh()
    {
        if( valid( Grid.CellsCallback ) )
        {
            string text = Text;
            Grid.CellsCallback.OnCellValueNeeded( RowIndex, ColumnIndex, text );
            // if(text != Text)
            SetCellText( text );
        }
    }

    void SetCellText( string text )
    {
        GridColumn@ column = Grid.Columns[ ColumnIndex ];
        Text = text;
        if( valid( Options ) )
        {
            Options.Text( text, FONT_FALLOUT, column.CellForeColor, column.CellForeColorSelected, column.CellFormat );
        }
    }

    void Select()
    {
        GridColumn@ column = Grid.Columns[ ColumnIndex ];
        if( valid( Options ) )
        {
            Options.Font( FONT_FALLOUT, column.CellForeColorSelected );
        }
    }

    void Unselect()
    {
        GridColumn@ column = Grid.Columns[ ColumnIndex ];
        if( valid( Options ) )
        {
            Options.Font( FONT_FALLOUT, column.CellForeColor );
        }
    }

    void OnInit()
    {
        @Options = GUI_GetElementOptions();
        Refresh();
    }

    void OnMouseClick( int click )
    {
        if( click == MOUSE_CLICK_LEFT )
        {
            Grid.SelectRow( RowIndex );
            return;
            // TODO: Выбор предмета, подсветка ячейки
        }
        int dir = ( click == MOUSE_CLICK_WHEEL_UP ? SCROLL_UP : ( click == MOUSE_CLICK_WHEEL_DOWN ? SCROLL_DN : SCROLL_NONE ) );
        if( dir != SCROLL_NONE )
        {
            Grid.SetScroll( dir, 1 );
        }
    }

    void Init()
    {
        GUI_AddScreenElement( Grid.ScreenIndex, null, Bounds.Location.X, Bounds.Location.Y )
        .Position( Bounds.Location.X, Bounds.Location.Y, Bounds.Region.Width, Bounds.Region.Height )
        .CallbackInit( this )
        .CallbackMouseClick( this );
    }
}
