#include "_macros.fos"
#include "_colors.fos"

#define MSG_THAT_DOES_NOTHING    ( 10202 )
#define MSG_ENTER_CODE           ( 60 )
#define MSG_LOCKER_INSTALLED     ( 61 )
#define MSG_WRONG_ACCESS_CODE    ( 62 )
#define MSG_INVALID_CODE         ( 65 )

#ifdef __CLIENT
# include "_client_defines.fos"
# include "client_gui_h.fos"

import int[] GetIfaceQuadreCoords( string& Key ) from "client_main";
import int[] GetIfaceCoords( string& Key ) from "client_main";

int             curContainer = 0;

IGUIElementOpt@ lockerFace;

class           ELockerButton1 : IGUI::ElementCallbackMouseClick
{
    void OnMouseClick( int click )
    {
        if( click == MOUSE_CLICK_LEFT )
        {
            if( lockerFace.GetText().length() < 9 )
            {
                lockerFace.Text( lockerFace.GetText() + "1", FONT_BIG_NUM, COLOR_GRAY, COLOR_GRAY, FT_CENTERY | FT_ALIGN );
                lockerFace.InputTrigger();
            }
        }
    }
}

class ELockerButton2 : IGUI::ElementCallbackMouseClick
{
    void OnMouseClick( int click )
    {
        if( click == MOUSE_CLICK_LEFT )
        {
            if( lockerFace.GetText().length() < 9 )
            {
                lockerFace.Text( lockerFace.GetText() + "2", FONT_BIG_NUM, COLOR_GRAY, COLOR_GRAY, FT_CENTERY | FT_ALIGN );
                lockerFace.InputTrigger();
            }
        }
    }
}

class ELockerButton3 : IGUI::ElementCallbackMouseClick
{
    void OnMouseClick( int click )
    {
        if( click == MOUSE_CLICK_LEFT )
        {
            if( lockerFace.GetText().length() < 9 )
            {
                lockerFace.Text( lockerFace.GetText() + "3", FONT_BIG_NUM, COLOR_GRAY, COLOR_GRAY, FT_CENTERY | FT_ALIGN );
                lockerFace.InputTrigger();
            }
        }
    }
}

class ELockerButton4 : IGUI::ElementCallbackMouseClick
{
    void OnMouseClick( int click )
    {
        if( click == MOUSE_CLICK_LEFT )
        {
            if( lockerFace.GetText().length() < 9 )
            {
                lockerFace.Text( lockerFace.GetText() + "4", FONT_BIG_NUM, COLOR_GRAY, COLOR_GRAY, FT_CENTERY | FT_ALIGN );
                lockerFace.InputTrigger();
            }
        }
    }
}

class ELockerButton5 : IGUI::ElementCallbackMouseClick
{
    void OnMouseClick( int click )
    {
        if( click == MOUSE_CLICK_LEFT )
        {
            if( lockerFace.GetText().length() < 9 )
            {
                lockerFace.Text( lockerFace.GetText() + "5", FONT_BIG_NUM, COLOR_GRAY, COLOR_GRAY, FT_CENTERY | FT_ALIGN );
                lockerFace.InputTrigger();
            }
        }
    }
}

class ELockerButton6 : IGUI::ElementCallbackMouseClick
{
    void OnMouseClick( int click )
    {
        if( click == MOUSE_CLICK_LEFT )
        {
            if( lockerFace.GetText().length() < 9 )
            {
                lockerFace.Text( lockerFace.GetText() + "6", FONT_BIG_NUM, COLOR_GRAY, COLOR_GRAY, FT_CENTERY | FT_ALIGN );
                lockerFace.InputTrigger();
            }
        }
    }
}

class ELockerButton7 : IGUI::ElementCallbackMouseClick
{
    void OnMouseClick( int click )
    {
        if( click == MOUSE_CLICK_LEFT )
        {
            if( lockerFace.GetText().length() < 9 )
            {
                lockerFace.Text( lockerFace.GetText() + "7", FONT_BIG_NUM, COLOR_GRAY, COLOR_GRAY, FT_CENTERY | FT_ALIGN );
                lockerFace.InputTrigger();
            }
        }
    }
}

class ELockerButton8 : IGUI::ElementCallbackMouseClick
{
    void OnMouseClick( int click )
    {
        if( click == MOUSE_CLICK_LEFT )
        {
            if( lockerFace.GetText().length() < 9 )
            {
                lockerFace.Text( lockerFace.GetText() + "8", FONT_BIG_NUM, COLOR_GRAY, COLOR_GRAY, FT_CENTERY | FT_ALIGN );
                lockerFace.InputTrigger();
            }
        }
    }
}

class ELockerButton9 : IGUI::ElementCallbackMouseClick
{
    void OnMouseClick( int click )
    {
        if( click == MOUSE_CLICK_LEFT )
        {
            if( lockerFace.GetText().length() < 9 )
            {
                lockerFace.Text( lockerFace.GetText() + "9", FONT_BIG_NUM, COLOR_GRAY, COLOR_GRAY, FT_CENTERY | FT_ALIGN );
                lockerFace.InputTrigger();
            }
        }
    }
}

class ELockerButton0 : IGUI::ElementCallbackMouseClick
{
    void OnMouseClick( int click )
    {
        if( click == MOUSE_CLICK_LEFT )
        {
            if( lockerFace.GetText().length() < 9 )
            {
                lockerFace.Text( lockerFace.GetText() + "0", FONT_BIG_NUM, COLOR_GRAY, COLOR_GRAY, FT_CENTERY | FT_ALIGN );
                lockerFace.InputTrigger();
            }
        }
    }
}

class ELockerButtonEnter : IGUI::ElementCallbackMouseClick
{
    void OnMouseClick( int click )
    {
        if( click == MOUSE_CLICK_LEFT )
        {
            int code = 0;
            SafeStrToInt( lockerFace.GetText(), code );
            if( code == 0 )
            {
                Message( TEXTMSG_GAME, MSG_ENTER_CODE );
            }
            else if( lockerFace.GetText()[ 0 ] == '0' )
            {
                Message( TEXTMSG_GAME, MSG_INVALID_CODE );
            }
            else
            {
                ::HideScreen( CLIENT_SCREEN_ELECTRIC_LOCKER, 3, 3, 3 );
                RunServerScriptUnsafe( "e_locker@unsafe_LockerEnterCode", curContainer, code, 0, null, null );
            }
        }
    }
}

class ELockerFace : IGUI::ElementCallbackInit, IGUI::ElementCallbackKeyPress
{
    void OnInit()
    {
        @lockerFace = GUI_GetElementOptions();
    }

    void OnKeyPress( uint8 key, uint8 letter, bool& result )
    {
        if( letter <= 0x39 && letter >= 0x30 )
            PlaySound( "BUTIN1.ACM" );
        if( key != DIK_RETURN && key != DIK_NUMPADENTER )
            return;
        PlaySound( "BUTIN1.ACM" );
        int code = 0;
        SafeStrToInt( lockerFace.GetText(), code );
        if( code == 0 )
        {
            Message( TEXTMSG_GAME, MSG_ENTER_CODE );
        }
        else if( lockerFace.GetText()[ 0 ] == '0' )
        {
            Message( TEXTMSG_GAME, MSG_INVALID_CODE );
        }
        else
        {
            ::HideScreen( CLIENT_SCREEN_ELECTRIC_LOCKER, 3, 3, 3 );
            RunServerScriptUnsafe( "e_locker@unsafe_LockerEnterCode", curContainer, code, 0, null, null );
        }
    }
}

void InitLockerScreen()
{
    ELockerButton1     button1;
    ELockerButton2     button2;
    ELockerButton3     button3;
    ELockerButton4     button4;
    ELockerButton5     button5;
    ELockerButton6     button6;
    ELockerButton7     button7;
    ELockerButton8     button8;
    ELockerButton9     button9;
    ELockerButton0     button0;
    ELockerButtonEnter enter;
    ELockerFace        face;

    string             pic;
    string             picDn;
    int[] coords;

    pic = GetIfaceIniStr( "ELockerMainPic" );

    GUI_CreateScreen( CLIENT_SCREEN_ELECTRIC_LOCKER, pic )
    .CanMove( true )
    .Modal( false )
    .Multiinstance( true );

    pic = GetIfaceIniStr( "ELockerButtonPic" );
    picDn = GetIfaceIniStr( "ELockerButtonPicDn" );
    coords = GetIfaceCoords( "ELocker1" );

    GUI_AddScreenElement( CLIENT_SCREEN_ELECTRIC_LOCKER, pic, coords[ 0 ], coords[ 1 ] )
    .CallbackMouseClick( button1 )
    .ClickSound( "BUTIN1.ACM" )
    .DownPic( picDn );

    coords = GetIfaceCoords( "ELocker2" );

    GUI_AddScreenElement( CLIENT_SCREEN_ELECTRIC_LOCKER, pic, coords[ 0 ], coords[ 1 ] )
    .CallbackMouseClick( button2 )
    .ClickSound( "BUTIN1.ACM" )
    .DownPic( picDn );

    coords = GetIfaceCoords( "ELocker3" );

    GUI_AddScreenElement( CLIENT_SCREEN_ELECTRIC_LOCKER, pic, coords[ 0 ], coords[ 1 ] )
    .CallbackMouseClick( button3 )
    .ClickSound( "BUTIN1.ACM" )
    .DownPic( picDn );

    coords = GetIfaceCoords( "ELocker4" );

    GUI_AddScreenElement( CLIENT_SCREEN_ELECTRIC_LOCKER, pic, coords[ 0 ], coords[ 1 ] )
    .CallbackMouseClick( button4 )
    .ClickSound( "BUTIN1.ACM" )
    .DownPic( picDn );

    coords = GetIfaceCoords( "ELocker5" );

    GUI_AddScreenElement( CLIENT_SCREEN_ELECTRIC_LOCKER, pic, coords[ 0 ], coords[ 1 ] )
    .CallbackMouseClick( button5 )
    .ClickSound( "BUTIN1.ACM" )
    .DownPic( picDn );

    coords = GetIfaceCoords( "ELocker6" );

    GUI_AddScreenElement( CLIENT_SCREEN_ELECTRIC_LOCKER, pic, coords[ 0 ], coords[ 1 ] )
    .CallbackMouseClick( button6 )
    .ClickSound( "BUTIN1.ACM" )
    .DownPic( picDn );

    coords = GetIfaceCoords( "ELocker7" );

    GUI_AddScreenElement( CLIENT_SCREEN_ELECTRIC_LOCKER, pic, coords[ 0 ], coords[ 1 ] )
    .CallbackMouseClick( button7 )
    .ClickSound( "BUTIN1.ACM" )
    .DownPic( picDn );

    coords = GetIfaceCoords( "ELocker8" );

    GUI_AddScreenElement( CLIENT_SCREEN_ELECTRIC_LOCKER, pic, coords[ 0 ], coords[ 1 ] )
    .CallbackMouseClick( button8 )
    .ClickSound( "BUTIN1.ACM" )
    .DownPic( picDn );

    coords = GetIfaceCoords( "ELocker9" );

    GUI_AddScreenElement( CLIENT_SCREEN_ELECTRIC_LOCKER, pic, coords[ 0 ], coords[ 1 ] )
    .CallbackMouseClick( button9 )
    .ClickSound( "BUTIN1.ACM" )
    .DownPic( picDn );

    coords = GetIfaceCoords( "ELocker0" );

    GUI_AddScreenElement( CLIENT_SCREEN_ELECTRIC_LOCKER, pic, coords[ 0 ], coords[ 1 ] )
    .CallbackMouseClick( button0 )
    .ClickSound( "BUTIN1.ACM" )
    .DownPic( picDn );

    pic = GetIfaceIniStr( "ELockerEnterPic" );
    picDn = GetIfaceIniStr( "ELockerEnterPicDn" );
    coords = GetIfaceCoords( "ELockerEnter" );

    GUI_AddScreenElement( CLIENT_SCREEN_ELECTRIC_LOCKER, pic, coords[ 0 ], coords[ 1 ] )
    .CallbackMouseClick( enter )
    .ClickSound( "BUTIN1.ACM" )
    .DownPic( picDn );

    coords = GetIfaceQuadreCoords( "ELockerFace" );

    GUI_AddScreenElement( CLIENT_SCREEN_ELECTRIC_LOCKER, "blank.PNG", 0, 0 )
    .Position( coords[ 0 ], coords[ 1 ], coords[ 2 ], coords[ 3 ] )
    .TextInput( true, 9, COLOR_GRAY )
    .SetFocus( true )
    .OnlyDigits( true )
    .Text( "", FONT_BIG_NUM, COLOR_GRAY, COLOR_GRAY, FT_CENTERY | FT_ALIGN )
    .CallbackInit( face )
    .CallbackKeyPress( face );

}

void __ShowElockerScreen( int cont, int param1, int param2, string@ param3, int[] @ param4 )
{
    curContainer = cont;
    ::ShowScreen( CLIENT_SCREEN_ELECTRIC_LOCKER, 3, 3, 3 );
}
#endif


#ifndef __CLIENT
void _ElectricLockerInit( Item& locker, bool firstTime )
{
    locker.SetEvent( ITEM_EVENT_USE, "_electroLocker_use" );
}

void _SetLock( Item& door, bool firstTime )
{
    door.LockerComplexity = door.Val1;
    door.LockerId = Random( 100000000, 999999999 );
    SETFLAG( door.LockerCondition, LOCKER_ELECTRO );
    if( FLAG( door.LockerCondition, LOCKER_ISOPEN ) )
        door.LockerClose();
    if( door.Val2 > 0 )
        CreateTimeEvent( __FullSecond + REAL_MINUTE( door.Val2 ), "e_EDoorUpdate", door.Id, false );
}

bool _electroLocker_use( Item& item, Critter& crit, Critter@ onCritter, Item@ onItem, Scenery@ onScenery )
{
    if( !valid( onItem ) || ( onItem.GetType() != ITEM_TYPE_CONTAINER && onItem.GetType() != ITEM_TYPE_DOOR ) )
    {
        crit.SayMsg( SAY_NETMSG, TEXTMSG_GAME, MSG_THAT_DOES_NOTHING );
        return true;
    }
    if( onItem.LockerId != 0 )
    {
        crit.SayMsg( SAY_NETMSG, TEXTMSG_GAME, MSG_THAT_DOES_NOTHING );
        return true;
    }
    if( onItem.GetProtoId() >= PID_LOCKED_CONTAINER_1 && onItem.GetProtoId() <= PID_LOCKED_CONTAINER_4 )
    {
        crit.RunClientScript( "e_locker@__ShowElockerScreen", onItem.Id, 0, 0, null, null );
    }
    else
        crit.SayMsg( SAY_NETMSG, TEXTMSG_GAME, MSG_THAT_DOES_NOTHING );
    return true;
}

void unsafe_LockerEnterCode( Critter& player, int itemId, int code, int param2, string@ param3, int[] @ param4 )
{
    Item@ cont = GetItem( itemId );
    Map@  map = player.GetMap();
    if( !valid( map ) || !valid( cont ) || cont.MapId != map.Id || GetDistantion( player.HexX, player.HexY, cont.HexX, cont.HexY ) > 2 ||
        ( cont.GetType() != ITEM_TYPE_DOOR && cont.GetType() != ITEM_TYPE_CONTAINER ) )
    {
        player.Say( SAY_NETMSG, "Invalid item." );
        return;
    }
    if( !FLAG( cont.LockerCondition, LOCKER_ELECTRO ) )
    {
        if( cont.LockerId != 0 )
            player.SayMsg( SAY_NETMSG, TEXTMSG_GAME, MSG_THAT_DOES_NOTHING );
        else if( cont.GetProtoId() >= PID_LOCKED_CONTAINER_1 && cont.GetProtoId() <= PID_LOCKED_CONTAINER_4 )
        {
            if( valid( player.GetItem( PID_ELECTRO_LOCKER, -1 ) ) )
            {
                player.DeleteItem( PID_ELECTRO_LOCKER, 1 );
            }
            else
            {
                player.Say( SAY_NETMSG, "Error" );
                return;
            }
            player.SayMsg( SAY_NETMSG, TEXTMSG_GAME, MSG_LOCKER_INSTALLED );
            SETFLAG( cont.LockerCondition, LOCKER_ELECTRO | LOCKER_NOOPEN );
            cont.LockerId = code;
            // cont.LockerComplexity=CLAMP(player.Skill[SK_LOCKPICK],1,200);
            cont.LockerClose();
        }
        return;
    }
    else if( uint( code ) == cont.LockerId )
    {
        cont.LockerOpen();
        player.PlaySound( "SWDKEYX1.ACM", true );
        if( cont.GetType() == ITEM_TYPE_CONTAINER )
            player.ShowContainer( null, cont, cont.Proto.GroundLevel ? TRANSFER_HEX_CONT_DOWN : TRANSFER_HEX_CONT_UP );
        if( cont.Val1 > 0 && cont.Val2 > 0 )
        {
            CreateTimeEvent( __FullSecond + REAL_MINUTE( cont.Val2 ), "e_EDoorUpdate", cont.Id, false );
        }
    }
    else
    {
        player.PlaySound( "LOOSER.ACM", true );
        player.SayMsg( SAY_NETMSG, TEXTMSG_GAME, MSG_WRONG_ACCESS_CODE );
    }
}

uint e_EDoorUpdate( uint[] vals )
{
    if( vals.length() < 1 )
        return 0;
    Item@ door = GetItem( vals[ 0 ] );
    if( !valid( door ) )
        return 0;
    door.LockerId = Random( 100000000, 999999999 );
    if( FLAG( door.LockerCondition, LOCKER_ISOPEN ) )
        door.LockerClose();
    return REAL_MINUTE( door.Val2 );
}

#endif
